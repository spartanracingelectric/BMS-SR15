
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009510  08009510  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009518  08009518  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  200001cc  080096ec  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  080096ec  00021874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168f4  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045d7  00000000  00000000  00036b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001104  00000000  00000000  0003c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023856  00000000  00000000  0003d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d167  00000000  00000000  000610da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee4a  00000000  00000000  0007e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061f8  00000000  00000000  0013d08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00143284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08009038 	.word	0x08009038

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08009038 	.word	0x08009038

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_Set_Num_Devices>:
static const uint8_t num_aux_series_groups = 6; //Number of series groups
static uint8_t num_devices; //Keep visibility within this file
static uint8_t num_series_groups; //Number of series groups

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if (num)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <LTC_Set_Num_Devices+0x20>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7013      	strb	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	200001e8 	.word	0x200001e8

08000558 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	return num_devices;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <LTC_Get_Num_Devices+0x10>)
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	200001e8 	.word	0x200001e8

0800056c <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d802      	bhi.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <LTC_Set_Num_Series_Groups+0x28>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	7013      	strb	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200001e9 	.word	0x200001e9

08000598 <LTC_Wakeup_Idle>:
uint8_t LTC_Get_Num_Series_Groups(void) {
	return num_series_groups;
}

/* Wake LTC up from IDLE state into READY state */
void LTC_Wakeup_Idle(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e00c      	b.n	80005c2 <LTC_Wakeup_Idle+0x2a>
		LTC_nCS_Low(); //Pull CS low
 80005a8:	f000 ffda 	bl	8001560 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 80005ac:	1cf9      	adds	r1, r7, #3
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <LTC_Wakeup_Idle+0x44>)
 80005b4:	f003 ff84 	bl	80044c0 <HAL_SPI_Transmit>
		LTC_nCS_High(); //Pull CS high
 80005b8:	f000 ffc6 	bl	8001548 <LTC_nCS_High>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	f7ff ffc9 	bl	8000558 <LTC_Get_Num_Devices>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	dbeb      	blt.n	80005a8 <LTC_Wakeup_Idle+0x10>
	}
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000298 	.word	0x20000298

080005e0 <LTC_Wakeup_Sleep>:

//wake up sleep
void LTC_Wakeup_Sleep(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e00e      	b.n	800060a <LTC_Wakeup_Sleep+0x2a>
		LTC_nCS_Low();
 80005ec:	f000 ffb8 	bl	8001560 <LTC_nCS_Low>
		HAL_Delay(300);
 80005f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f4:	f001 f93c 	bl	8001870 <HAL_Delay>
		LTC_nCS_High();
 80005f8:	f000 ffa6 	bl	8001548 <LTC_nCS_High>
		HAL_Delay(300);
 80005fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000600:	f001 f936 	bl	8001870 <HAL_Delay>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	f7ff ffa5 	bl	8000558 <LTC_Get_Num_Devices>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4293      	cmp	r3, r2
 8000616:	dbe9      	blt.n	80005ec <LTC_Wakeup_Sleep+0xc>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <ltc6811_wrcomm>:
	return ret;
}

void ltc6811_wrcomm(uint8_t total_ic, //The number of ICs being written to
		uint8_t comm[6] //A two dimensional array of the comm data that will be written
		) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8000630:	2306      	movs	r3, #6
 8000632:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3304      	adds	r3, #4
 800063c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	4618      	mov	r0, r3
 8000642:	f008 f823 	bl	800868c <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2207      	movs	r2, #7
 800064e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	2221      	movs	r2, #33	; 0x21
 8000656:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	2002      	movs	r0, #2
 800065c:	f000 f9e8 	bl	8000a30 <LTC_PEC15_Calc>
 8000660:	4603      	mov	r3, r0
 8000662:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000664:	897b      	ldrh	r3, [r7, #10]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3302      	adds	r3, #2
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3303      	adds	r3, #3
 8000676:	897a      	ldrh	r2, [r7, #10]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	75bb      	strb	r3, [r7, #22]
 8000684:	e030      	b.n	80006e8 <ltc6811_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000686:	2300      	movs	r3, #0
 8000688:	757b      	strb	r3, [r7, #21]
 800068a:	e00d      	b.n	80006a8 <ltc6811_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; //adding the config data to the array to be sent
 800068c:	7d7b      	ldrb	r3, [r7, #21]
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	441a      	add	r2, r3
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	68f9      	ldr	r1, [r7, #12]
 8000696:	440b      	add	r3, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3301      	adds	r3, #1
 80006a0:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80006a2:	7d7b      	ldrb	r3, [r7, #21]
 80006a4:	3301      	adds	r3, #1
 80006a6:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80006a8:	7d7a      	ldrb	r2, [r7, #21]
 80006aa:	7d3b      	ldrb	r3, [r7, #20]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d3ed      	bcc.n	800068c <ltc6811_wrcomm+0x68>
		}
		comm_pec = (uint16_t) LTC_PEC15_Calc(BYTES_IN_REG,
 80006b0:	7d3b      	ldrb	r3, [r7, #20]
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f9bb 	bl	8000a30 <LTC_PEC15_Calc>
 80006ba:	4603      	mov	r3, r0
 80006bc:	813b      	strh	r3, [r7, #8]
				&comm[0]); // calculating the PEC for each ICs configuration register data
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80006be:	893b      	ldrh	r3, [r7, #8]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	b299      	uxth	r1, r3
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3301      	adds	r3, #1
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	893a      	ldrh	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	3302      	adds	r3, #2
 80006e0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80006e2:	7dbb      	ldrb	r3, [r7, #22]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	7dbb      	ldrb	r3, [r7, #22]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1cb      	bne.n	8000686 <ltc6811_wrcomm+0x62>
	}

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80006ee:	f7ff ff53 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80006f2:	f000 ff35 	bl	8001560 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80006f6:	7cfb      	ldrb	r3, [r7, #19]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	68f9      	ldr	r1, [r7, #12]
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <ltc6811_wrcomm+0xf4>)
 8000700:	f003 fede 	bl	80044c0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000704:	f000 ff20 	bl	8001548 <LTC_nCS_High>
	free(cmd);
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f007 ffc7 	bl	800869c <free>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000298 	.word	0x20000298

0800071c <ltc6811_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc6811_stcomm() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000722:	2307      	movs	r3, #7
 8000724:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x23;
 8000726:	2323      	movs	r3, #35	; 0x23
 8000728:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	2002      	movs	r0, #2
 8000730:	f000 f97e 	bl	8000a30 <LTC_PEC15_Calc>
 8000734:	4603      	mov	r3, r0
 8000736:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000738:	897b      	ldrh	r3, [r7, #10]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000742:	897b      	ldrh	r3, [r7, #10]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000748:	f7ff ff26 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 800074c:	f000 ff08 	bl	8001560 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2204      	movs	r2, #4
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <ltc6811_stcomm+0x6c>)
 8000758:	f003 feb2 	bl	80044c0 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e008      	b.n	8000774 <ltc6811_stcomm+0x58>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2201      	movs	r2, #1
 8000766:	21ff      	movs	r1, #255	; 0xff
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <ltc6811_stcomm+0x6c>)
 800076a:	f003 fea9 	bl	80044c0 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b08      	cmp	r3, #8
 8000778:	ddf3      	ble.n	8000762 <ltc6811_stcomm+0x46>
	}
	LTC_nCS_High();
 800077a:	f000 fee5 	bl	8001548 <LTC_nCS_High>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000298 	.word	0x20000298

0800078c <LTC_ReadRawCellTemps>:

		actual_temp[i] = steinhart;
	}
}

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 800078c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000790:	b089      	sub	sp, #36	; 0x24
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	466b      	mov	r3, sp
 8000798:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 800079e:	f7ff fedb 	bl	8000558 <LTC_Get_Num_Devices>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	2308      	movs	r3, #8
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80007ae:	7f3b      	ldrb	r3, [r7, #28]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	7f3b      	ldrb	r3, [r7, #28]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4698      	mov	r8, r3
 80007ba:	4691      	mov	r9, r2
 80007bc:	f04f 0200 	mov.w	r2, #0
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007d0:	7f3b      	ldrb	r3, [r7, #28]
 80007d2:	2200      	movs	r2, #0
 80007d4:	461c      	mov	r4, r3
 80007d6:	4615      	mov	r5, r2
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	00eb      	lsls	r3, r5, #3
 80007e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007e6:	00e2      	lsls	r2, r4, #3
 80007e8:	7f3b      	ldrb	r3, [r7, #28]
 80007ea:	3307      	adds	r3, #7
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	ebad 0d03 	sub.w	sp, sp, r3
 80007f4:	466b      	mov	r3, sp
 80007f6:	3300      	adds	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	77bb      	strb	r3, [r7, #30]
 80007fe:	e07c      	b.n	80008fa <LTC_ReadRawCellTemps+0x16e>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 8000800:	7fbb      	ldrb	r3, [r7, #30]
 8000802:	4a46      	ldr	r2, [pc, #280]	; (800091c <LTC_ReadRawCellTemps+0x190>)
 8000804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 8000810:	7fbb      	ldrb	r3, [r7, #30]
 8000812:	4a42      	ldr	r2, [pc, #264]	; (800091c <LTC_ReadRawCellTemps+0x190>)
 8000814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f904 	bl	8000a30 <LTC_PEC15_Calc>
 8000828:	4603      	mov	r3, r0
 800082a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800082c:	8a7b      	ldrh	r3, [r7, #18]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8000836:	8a7b      	ldrh	r3, [r7, #18]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 800083c:	f7ff feac 	bl	8000598 <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 8000840:	f000 fe8e 	bl	8001560 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000844:	f107 0108 	add.w	r1, r7, #8
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2204      	movs	r2, #4
 800084c:	4834      	ldr	r0, [pc, #208]	; (8000920 <LTC_ReadRawCellTemps+0x194>)
 800084e:	f003 fe37 	bl	80044c0 <HAL_SPI_Transmit>
 8000852:	4603      	mov	r3, r0
 8000854:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8000856:	7c7b      	ldrb	r3, [r7, #17]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00b      	beq.n	8000874 <LTC_ReadRawCellTemps+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 800085c:	7c7b      	ldrb	r3, [r7, #17]
 800085e:	2200      	movs	r2, #0
 8000860:	4413      	add	r3, r2
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	b25a      	sxtb	r2, r3
 800086a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800086e:	4313      	orrs	r3, r2
 8000870:	b25b      	sxtb	r3, r3
 8000872:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000874:	7f3b      	ldrb	r3, [r7, #28]
 8000876:	b29a      	uxth	r2, r3
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	6979      	ldr	r1, [r7, #20]
 800087c:	4828      	ldr	r0, [pc, #160]	; (8000920 <LTC_ReadRawCellTemps+0x194>)
 800087e:	f003 ff62 	bl	8004746 <HAL_SPI_Receive>
 8000882:	4603      	mov	r3, r0
 8000884:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8000886:	7c7b      	ldrb	r3, [r7, #17]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00b      	beq.n	80008a4 <LTC_ReadRawCellTemps+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 800088c:	7c7b      	ldrb	r3, [r7, #17]
 800088e:	2204      	movs	r2, #4
 8000890:	4413      	add	r3, r2
 8000892:	2201      	movs	r2, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	b25a      	sxtb	r2, r3
 800089a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800089e:	4313      	orrs	r3, r2
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	777b      	strb	r3, [r7, #29]
 80008a8:	e01b      	b.n	80008e2 <LTC_ReadRawCellTemps+0x156>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80008aa:	7f7b      	ldrb	r3, [r7, #29]
 80008ac:	2208      	movs	r2, #8
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008b8:	7f7b      	ldrb	r3, [r7, #29]
 80008ba:	2206      	movs	r2, #6
 80008bc:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80008c0:	7fbb      	ldrb	r3, [r7, #30]
 80008c2:	2103      	movs	r1, #3
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
					REG_LEN - 2);
 80008d0:	2208      	movs	r2, #8
 80008d2:	3a02      	subs	r2, #2
			memcpy(
 80008d4:	68f9      	ldr	r1, [r7, #12]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f008 f80c 	bl	80088f4 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80008dc:	7f7b      	ldrb	r3, [r7, #29]
 80008de:	3301      	adds	r3, #1
 80008e0:	777b      	strb	r3, [r7, #29]
 80008e2:	f7ff fe39 	bl	8000558 <LTC_Get_Num_Devices>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	7f7b      	ldrb	r3, [r7, #29]
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d3dc      	bcc.n	80008aa <LTC_ReadRawCellTemps+0x11e>
		}

		LTC_nCS_High(); //Pull CS high
 80008f0:	f000 fe2a 	bl	8001548 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 80008f4:	7fbb      	ldrb	r3, [r7, #30]
 80008f6:	3301      	adds	r3, #1
 80008f8:	77bb      	strb	r3, [r7, #30]
 80008fa:	2206      	movs	r2, #6
 80008fc:	2303      	movs	r3, #3
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	7fba      	ldrb	r2, [r7, #30]
 8000906:	429a      	cmp	r2, r3
 8000908:	f4ff af7a 	bcc.w	8000800 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 800090c:	7ffb      	ldrb	r3, [r7, #31]
 800090e:	46b5      	mov	sp, r6
}
 8000910:	4618      	mov	r0, r3
 8000912:	3724      	adds	r7, #36	; 0x24
 8000914:	46bd      	mov	sp, r7
 8000916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800091a:	bf00      	nop
 800091c:	080090a8 	.word	0x080090a8
 8000920:	20000298 	.word	0x20000298

08000924 <LTC_ADAX>:
	LTC_nCS_High();
}

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	105b      	asrs	r3, r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3304      	adds	r3, #4
 8000944:	b2db      	uxtb	r3, r3
 8000946:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	01db      	lsls	r3, r3, #7
 800094c:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	3360      	adds	r3, #96	; 0x60
 8000958:	b2db      	uxtb	r3, r3
 800095a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	2002      	movs	r0, #2
 8000964:	f000 f864 	bl	8000a30 <LTC_PEC15_Calc>
 8000968:	4603      	mov	r3, r0
 800096a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800096c:	89bb      	ldrh	r3, [r7, #12]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800097c:	f7ff fe0c 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000980:	f000 fdee 	bl	8001560 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000984:	f107 0108 	add.w	r1, r7, #8
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	2204      	movs	r2, #4
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <LTC_ADAX+0x7c>)
 800098e:	f003 fd97 	bl	80044c0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000992:	f000 fdd9 	bl	8001548 <LTC_nCS_High>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000298 	.word	0x20000298

080009a4 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80009b6:	2307      	movs	r3, #7
 80009b8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80009ba:	2314      	movs	r3, #20
 80009bc:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 f834 	bl	8000a30 <LTC_PEC15_Calc>
 80009c8:	4603      	mov	r3, r0
 80009ca:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80009cc:	893b      	ldrh	r3, [r7, #8]
 80009ce:	0a1b      	lsrs	r3, r3, #8
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 80009d6:	893b      	ldrh	r3, [r7, #8]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80009dc:	f7ff fddc 	bl	8000598 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 80009e0:	f000 fdbe 	bl	8001560 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80009e4:	1d39      	adds	r1, r7, #4
 80009e6:	2364      	movs	r3, #100	; 0x64
 80009e8:	2204      	movs	r2, #4
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <LTC_PollAdc+0x84>)
 80009ec:	f003 fd68 	bl	80044c0 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 80009f0:	e00c      	b.n	8000a0c <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 80009f2:	f000 ff33 	bl	800185c <HAL_GetTick>
 80009f6:	4603      	mov	r3, r0
 80009f8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 80009fa:	7abb      	ldrb	r3, [r7, #10]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <LTC_PollAdc+0x62>
			finished = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	72fb      	strb	r3, [r7, #11]
 8000a04:	e002      	b.n	8000a0c <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <LTC_PollAdc+0x88>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d802      	bhi.n	8000a1a <LTC_PollAdc+0x76>
 8000a14:	7afb      	ldrb	r3, [r7, #11]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0eb      	beq.n	80009f2 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8000a1a:	f000 fd95 	bl	8001548 <LTC_nCS_High>
	return (counter);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000298 	.word	0x20000298
 8000a2c:	00030d3f 	.word	0x00030d3f

08000a30 <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a40:	2300      	movs	r3, #0
 8000a42:	737b      	strb	r3, [r7, #13]
 8000a44:	e018      	b.n	8000a78 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	09db      	lsrs	r3, r3, #7
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4053      	eors	r3, r2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	897b      	ldrh	r3, [r7, #10]
 8000a66:	490a      	ldr	r1, [pc, #40]	; (8000a90 <LTC_PEC15_Calc+0x60>)
 8000a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4053      	eors	r3, r2
 8000a70:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	3301      	adds	r3, #1
 8000a76:	737b      	strb	r3, [r7, #13]
 8000a78:	7b7a      	ldrb	r2, [r7, #13]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3e2      	bcc.n	8000a46 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b29b      	uxth	r3, r3
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	080090ac 	.word	0x080090ac

08000a94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_ADC1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000abe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ac2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000ad2:	f000 fef1 	bl	80018b8 <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 fc34 	bl	8001348 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_ADC1_Init+0x74>)
 8000af2:	f000 ffb9 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000afc:	f000 fc24 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001ec 	.word	0x200001ec
 8000b0c:	40012400 	.word	0x40012400

08000b10 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <MX_ADC2_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b4e:	f000 feb3 	bl	80018b8 <HAL_ADC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 fbf6 	bl	8001348 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_ADC2_Init+0x74>)
 8000b6e:	f000 ff7b 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b78:	f000 fbe6 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000021c 	.word	0x2000021c
 8000b88:	40012800 	.word	0x40012800

08000b8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_ADC_MspInit+0xbc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d122      	bne.n	8000bf2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bdc:	2330      	movs	r3, #48	; 0x30
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <HAL_ADC_MspInit+0xc4>)
 8000bec:	f001 fae8 	bl	80021c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000bf0:	e026      	b.n	8000c40 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_ADC_MspInit+0xc8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d121      	bne.n	8000c40 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_ADC_MspInit+0xc0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c30:	2303      	movs	r3, #3
 8000c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_ADC_MspInit+0xc4>)
 8000c3c:	f001 fac0 	bl	80021c0 <HAL_GPIO_Init>
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40012400 	.word	0x40012400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40011000 	.word	0x40011000
 8000c54:	40012800 	.word	0x40012800

08000c58 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <MX_CAN1_Init+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c64:	2209      	movs	r2, #9
 8000c66:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c7a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c7e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000c82:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_CAN1_Init+0x64>)
 8000caa:	f001 f816 	bl	8001cda <HAL_CAN_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cb4:	f000 fb48 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000270 	.word	0x20000270
 8000cc0:	40006400 	.word	0x40006400

08000cc4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <HAL_CAN_MspInit+0xb0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d143      	bne.n	8000d6c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cee:	61d3      	str	r3, [r2, #28]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_CAN_MspInit+0xb4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <HAL_CAN_MspInit+0xb8>)
 8000d2a:	f001 fa49 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <HAL_CAN_MspInit+0xb8>)
 8000d44:	f001 fa3c 	bl	80021c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_CAN_MspInit+0xbc>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
 8000d66:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_CAN_MspInit+0xbc>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40006400 	.word	0x40006400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40010000 	.word	0x40010000

08000d84 <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <CAN1_Start+0x10>)
 8000d8a:	f001 f8a1 	bl	8001ed0 <HAL_CAN_Start>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000270 	.word	0x20000270

08000d98 <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <CAN1_Activate+0x14>)
 8000da0:	f001 f8da 	bl	8001f58 <HAL_CAN_ActivateNotification>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000270 	.word	0x20000270

08000db0 <CAN1_SettingsInit>:

HAL_StatusTypeDef CAN1_Send(){
	return HAL_CAN_AddTxMessage(&hcan1, &msg.TxHeader, msg.data, &msg.TxMailbox);
}

void CAN1_SettingsInit(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	CAN1_Start();
 8000db4:	f7ff ffe6 	bl	8000d84 <CAN1_Start>
	CAN1_Activate();
 8000db8:	f7ff ffee 	bl	8000d98 <CAN1_Activate>
	msg.TxHeader.IDE= CAN_ID_STD;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <CAN1_SettingsInit+0x28>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
	msg.TxHeader.StdId = 0x00;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <CAN1_SettingsInit+0x28>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
	msg.TxHeader.RTR = CAN_RTR_DATA;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <CAN1_SettingsInit+0x28>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
	msg.TxHeader.DLC = 8;
 8000dce:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <CAN1_SettingsInit+0x28>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	611a      	str	r2, [r3, #16]
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000024c 	.word	0x2000024c

08000ddc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_GPIO_Init+0xe4>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xe8>)
 8000e56:	f001 fb37 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <MX_GPIO_Init+0xec>)
 8000e60:	f001 fb32 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000e64:	2310      	movs	r3, #16
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_GPIO_Init+0xe8>)
 8000e7c:	f001 f9a0 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000e80:	2340      	movs	r3, #64	; 0x40
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0xec>)
 8000e98:	f001 f992 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_GPIO_Init+0xec>)
 8000eb2:	f001 f985 	bl	80021c0 <HAL_GPIO_Init>

}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40011000 	.word	0x40011000

08000ecc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0a2      	sub	sp, #136	; 0x88
 8000ed0:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;
	TimerPacket timerpacket_can1;

	uint16_t *read_volt;
	read_volt = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000ed2:	2018      	movs	r0, #24
 8000ed4:	f007 fbda 	bl	800868c <malloc>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint16_t *read_temp;
	read_temp = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000ede:	2018      	movs	r0, #24
 8000ee0:	f007 fbd4 	bl	800868c <malloc>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint16_t *read_auxreg = (uint16_t*) malloc(6 * sizeof(uint16_t));
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f007 fbcf 	bl	800868c <malloc>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	67bb      	str	r3, [r7, #120]	; 0x78
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef2:	f000 fc5b 	bl	80017ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef6:	f000 f94b 	bl	8001190 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000efa:	f7ff ff6f 	bl	8000ddc <MX_GPIO_Init>
	MX_ADC1_Init();
 8000efe:	f7ff fdc9 	bl	8000a94 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f02:	f7ff fe05 	bl	8000b10 <MX_ADC2_Init>
	MX_CAN1_Init();
 8000f06:	f7ff fea7 	bl	8000c58 <MX_CAN1_Init>
	MX_TIM7_Init();
 8000f0a:	f000 fbd5 	bl	80016b8 <MX_TIM7_Init>
	MX_SPI1_Init();
 8000f0e:	f000 fa9b 	bl	8001448 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000f12:	f006 fed3 	bl	8007cbc <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	CAN1_SettingsInit(); // Start CAN at 0x00
 8000f16:	f7ff ff4b 	bl	8000db0 <CAN1_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8000f1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	499a      	ldr	r1, [pc, #616]	; (800118c <main+0x2c0>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f9a0 	bl	8001268 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000f28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f2c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f9d9 	bl	80012e8 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can1, CAN1_DELAY);
 8000f36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f3a:	210a      	movs	r1, #10
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f9d3 	bl	80012e8 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8000f42:	f000 fb01 	bl	8001548 <LTC_nCS_High>
	LTC_Set_Num_Devices(NUM_DEVICES);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff faf4 	bl	8000534 <LTC_Set_Num_Devices>
	LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8000f4c:	200c      	movs	r0, #12
 8000f4e:	f7ff fb0d 	bl	800056c <LTC_Set_Num_Series_Groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t BMS_IC[12][6] = { };
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2248      	movs	r2, #72	; 0x48
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f007 fc73 	bl	8008844 <memset>
	BMS_IC[0][0] = 0x69; // Icom Start(6) + I2C_address D0 (0x90)
 8000f5e:	2369      	movs	r3, #105	; 0x69
 8000f60:	713b      	strb	r3, [r7, #4]
	BMS_IC[0][1] = 0x28; // Fcom master NACK(8)
 8000f62:	2328      	movs	r3, #40	; 0x28
 8000f64:	717b      	strb	r3, [r7, #5]
	BMS_IC[0][2] = 0x0F; // Icom Blank (0) + eeprom address D1 (0xF8)
 8000f66:	230f      	movs	r3, #15
 8000f68:	71bb      	strb	r3, [r7, #6]
	BMS_IC[0][3] = 0xF9; // Fcom master NACK + Stop(9)
 8000f6a:	23f9      	movs	r3, #249	; 0xf9
 8000f6c:	71fb      	strb	r3, [r7, #7]
	BMS_IC[0][4] = 0x7F; // NO TRANSMIT
 8000f6e:	237f      	movs	r3, #127	; 0x7f
 8000f70:	723b      	strb	r3, [r7, #8]
	BMS_IC[0][5] = 0xF9; // Fcom master NACK + Stop(9)
 8000f72:	23f9      	movs	r3, #249	; 0xf9
 8000f74:	727b      	strb	r3, [r7, #9]

	BMS_IC[1][0] = 0x69;
 8000f76:	2369      	movs	r3, #105	; 0x69
 8000f78:	72bb      	strb	r3, [r7, #10]
	BMS_IC[1][1] = 0x28;
 8000f7a:	2328      	movs	r3, #40	; 0x28
 8000f7c:	72fb      	strb	r3, [r7, #11]
	BMS_IC[1][2] = 0x0F;
 8000f7e:	230f      	movs	r3, #15
 8000f80:	733b      	strb	r3, [r7, #12]
	BMS_IC[1][3] = 0xE9;
 8000f82:	23e9      	movs	r3, #233	; 0xe9
 8000f84:	737b      	strb	r3, [r7, #13]
	BMS_IC[1][4] = 0x7F;
 8000f86:	237f      	movs	r3, #127	; 0x7f
 8000f88:	73bb      	strb	r3, [r7, #14]
	BMS_IC[1][5] = 0xF9;
 8000f8a:	23f9      	movs	r3, #249	; 0xf9
 8000f8c:	73fb      	strb	r3, [r7, #15]

	BMS_IC[2][0] = 0x69;
 8000f8e:	2369      	movs	r3, #105	; 0x69
 8000f90:	743b      	strb	r3, [r7, #16]
	BMS_IC[2][1] = 0x28;
 8000f92:	2328      	movs	r3, #40	; 0x28
 8000f94:	747b      	strb	r3, [r7, #17]
	BMS_IC[2][2] = 0x0F;
 8000f96:	230f      	movs	r3, #15
 8000f98:	74bb      	strb	r3, [r7, #18]
	BMS_IC[2][3] = 0xD9;
 8000f9a:	23d9      	movs	r3, #217	; 0xd9
 8000f9c:	74fb      	strb	r3, [r7, #19]
	BMS_IC[2][4] = 0x7F;
 8000f9e:	237f      	movs	r3, #127	; 0x7f
 8000fa0:	753b      	strb	r3, [r7, #20]
	BMS_IC[2][5] = 0xF9;
 8000fa2:	23f9      	movs	r3, #249	; 0xf9
 8000fa4:	757b      	strb	r3, [r7, #21]

	BMS_IC[3][0] = 0x69;
 8000fa6:	2369      	movs	r3, #105	; 0x69
 8000fa8:	75bb      	strb	r3, [r7, #22]
	BMS_IC[3][1] = 0x28;
 8000faa:	2328      	movs	r3, #40	; 0x28
 8000fac:	75fb      	strb	r3, [r7, #23]
	BMS_IC[3][2] = 0x0F;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	763b      	strb	r3, [r7, #24]
	BMS_IC[3][3] = 0xC9;
 8000fb2:	23c9      	movs	r3, #201	; 0xc9
 8000fb4:	767b      	strb	r3, [r7, #25]
	BMS_IC[3][4] = 0x7F;
 8000fb6:	237f      	movs	r3, #127	; 0x7f
 8000fb8:	76bb      	strb	r3, [r7, #26]
	BMS_IC[3][5] = 0xF9;
 8000fba:	23f9      	movs	r3, #249	; 0xf9
 8000fbc:	76fb      	strb	r3, [r7, #27]

	BMS_IC[4][0] = 0x69;
 8000fbe:	2369      	movs	r3, #105	; 0x69
 8000fc0:	773b      	strb	r3, [r7, #28]
	BMS_IC[4][1] = 0x28;
 8000fc2:	2328      	movs	r3, #40	; 0x28
 8000fc4:	777b      	strb	r3, [r7, #29]
	BMS_IC[4][2] = 0x0F;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	77bb      	strb	r3, [r7, #30]
	BMS_IC[4][3] = 0xB9;
 8000fca:	23b9      	movs	r3, #185	; 0xb9
 8000fcc:	77fb      	strb	r3, [r7, #31]
	BMS_IC[4][4] = 0x7F;
 8000fce:	237f      	movs	r3, #127	; 0x7f
 8000fd0:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_IC[4][5] = 0xF9;
 8000fd4:	23f9      	movs	r3, #249	; 0xf9
 8000fd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	BMS_IC[5][0] = 0x69;
 8000fda:	2369      	movs	r3, #105	; 0x69
 8000fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	BMS_IC[5][1] = 0x28;
 8000fe0:	2328      	movs	r3, #40	; 0x28
 8000fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	BMS_IC[5][2] = 0x0F;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_IC[5][3] = 0xA9;
 8000fec:	23a9      	movs	r3, #169	; 0xa9
 8000fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	BMS_IC[5][4] = 0x7F;
 8000ff2:	237f      	movs	r3, #127	; 0x7f
 8000ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	BMS_IC[5][5] = 0xF9;
 8000ff8:	23f9      	movs	r3, #249	; 0xf9
 8000ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	BMS_IC[6][0] = 0x69;
 8000ffe:	2369      	movs	r3, #105	; 0x69
 8001000:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_IC[6][1] = 0x28;
 8001004:	2328      	movs	r3, #40	; 0x28
 8001006:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	BMS_IC[6][2] = 0x0F;
 800100a:	230f      	movs	r3, #15
 800100c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	BMS_IC[6][3] = 0x99;
 8001010:	2399      	movs	r3, #153	; 0x99
 8001012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BMS_IC[6][4] = 0x7F;
 8001016:	237f      	movs	r3, #127	; 0x7f
 8001018:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BMS_IC[6][5] = 0xF9;
 800101c:	23f9      	movs	r3, #249	; 0xf9
 800101e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	BMS_IC[7][0] = 0x69;
 8001022:	2369      	movs	r3, #105	; 0x69
 8001024:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	BMS_IC[7][1] = 0x28;
 8001028:	2328      	movs	r3, #40	; 0x28
 800102a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BMS_IC[7][2] = 0x0F;
 800102e:	230f      	movs	r3, #15
 8001030:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BMS_IC[7][3] = 0x89;
 8001034:	2389      	movs	r3, #137	; 0x89
 8001036:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	BMS_IC[7][4] = 0x7F;
 800103a:	237f      	movs	r3, #127	; 0x7f
 800103c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	BMS_IC[7][5] = 0xF9;
 8001040:	23f9      	movs	r3, #249	; 0xf9
 8001042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	BMS_IC[8][0] = 0x69;
 8001046:	2369      	movs	r3, #105	; 0x69
 8001048:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	BMS_IC[8][1] = 0x08;
 800104c:	2308      	movs	r3, #8
 800104e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	BMS_IC[8][2] = 0x0F;
 8001052:	230f      	movs	r3, #15
 8001054:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	BMS_IC[8][3] = 0xF9;
 8001058:	23f9      	movs	r3, #249	; 0xf9
 800105a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BMS_IC[8][4] = 0x7F;
 800105e:	237f      	movs	r3, #127	; 0x7f
 8001060:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BMS_IC[8][5] = 0xF9;
 8001064:	23f9      	movs	r3, #249	; 0xf9
 8001066:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	BMS_IC[9][0] = 0x69;
 800106a:	2369      	movs	r3, #105	; 0x69
 800106c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	BMS_IC[9][1] = 0x08;
 8001070:	2308      	movs	r3, #8
 8001072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	BMS_IC[9][2] = 0x0F;
 8001076:	230f      	movs	r3, #15
 8001078:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	BMS_IC[9][3] = 0xE9;
 800107c:	23e9      	movs	r3, #233	; 0xe9
 800107e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	BMS_IC[9][4] = 0x7F;
 8001082:	237f      	movs	r3, #127	; 0x7f
 8001084:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	BMS_IC[9][5] = 0xF9;
 8001088:	23f9      	movs	r3, #249	; 0xf9
 800108a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	BMS_IC[10][0] = 0x69;
 800108e:	2369      	movs	r3, #105	; 0x69
 8001090:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	BMS_IC[10][1] = 0x08;
 8001094:	2308      	movs	r3, #8
 8001096:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	BMS_IC[10][2] = 0x0F;
 800109a:	230f      	movs	r3, #15
 800109c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	BMS_IC[10][3] = 0xD9;
 80010a0:	23d9      	movs	r3, #217	; 0xd9
 80010a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	BMS_IC[10][4] = 0x7F;
 80010a6:	237f      	movs	r3, #127	; 0x7f
 80010a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	BMS_IC[10][5] = 0xF9;
 80010ac:	23f9      	movs	r3, #249	; 0xf9
 80010ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	BMS_IC[11][0] = 0x69;
 80010b2:	2369      	movs	r3, #105	; 0x69
 80010b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	BMS_IC[11][1] = 0x08;
 80010b8:	2308      	movs	r3, #8
 80010ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	BMS_IC[11][2] = 0x0F;
 80010be:	230f      	movs	r3, #15
 80010c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	BMS_IC[11][3] = 0xC9;
 80010c4:	23c9      	movs	r3, #201	; 0xc9
 80010c6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	BMS_IC[11][4] = 0x7F;
 80010ca:	237f      	movs	r3, #127	; 0x7f
 80010cc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	BMS_IC[11][5] = 0xF9;
 80010d0:	23f9      	movs	r3, #249	; 0xf9
 80010d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t tempindex = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t increment = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint16_t data = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80010e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f8d6 	bl	80012a2 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 80010f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f907 	bl	800130e <TimerPacket_FixedPulse>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <main+0x21c>
//			LTC_ReadRawCellVoltages((uint16_t*) read_volt);
//			packvoltage = LTC_CalcPackVoltage((uint16_t*) read_volt);
			//stop reading voltages

			//start sending to mux to read temperatures
			LTC_Wakeup_Sleep();
 8001106:	f7ff fa6b 	bl	80005e0 <LTC_Wakeup_Sleep>
			ltc6811_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 800110a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800110e:	1d39      	adds	r1, r7, #4
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	440b      	add	r3, r1
 800111a:	4619      	mov	r1, r3
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fa81 	bl	8000624 <ltc6811_wrcomm>
			LTC_Wakeup_Idle();
 8001122:	f7ff fa39 	bl	8000598 <LTC_Wakeup_Idle>
			ltc6811_stcomm();
 8001126:	f7ff faf9 	bl	800071c <ltc6811_stcomm>
//			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
//			strncat(out_buf, packV, 30);
//			strncat(out_buf, char_to_str, 2);
			//end for printing over serial for pack voltage

			LTC_Wakeup_Idle();
 800112a:	f7ff fa35 	bl	8000598 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, 0); //doing GPIO all conversion
 800112e:	2302      	movs	r3, #2
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fbf6 	bl	8000924 <LTC_ADAX>
			LTC_PollAdc();
 8001138:	f7ff fc34 	bl	80009a4 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t *) read_auxreg); // Set to read back all aux registers
 800113c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800113e:	f7ff fb25 	bl	800078c <LTC_ReadRawCellTemps>
			data = read_auxreg[0];
 8001142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			read_temp[tempindex] = data;
 800114a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001152:	4413      	add	r3, r2
 8001154:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8001158:	801a      	strh	r2, [r3, #0]
			//read_temp[tempindex] = (uint16_t) read_auxreg[0];

			//start for printing over serial for voltages
			print(12, (uint16_t *) read_temp);
 800115a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800115c:	200c      	movs	r0, #12
 800115e:	f000 f8f9 	bl	8001354 <print>
			HAL_Delay(400);
 8001162:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001166:	f000 fb83 	bl	8001870 <HAL_Delay>
			//end for printing over serial for voltages

			tempindex++;
 800116a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800116e:	3301      	adds	r3, #1
 8001170:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			if (tempindex == 12) {
 8001174:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001178:	2b0c      	cmp	r3, #12
 800117a:	d102      	bne.n	8001182 <main+0x2b6>
				tempindex = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			HAL_Delay(1000);
 8001182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001186:	f000 fb73 	bl	8001870 <HAL_Delay>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800118a:	e7ad      	b.n	80010e8 <main+0x21c>
 800118c:	40011000 	.word	0x40011000

08001190 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b09c      	sub	sp, #112	; 0x70
 8001194:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800119a:	2238      	movs	r2, #56	; 0x38
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 fb50 	bl	8008844 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2220      	movs	r2, #32
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f007 fb42 	bl	8008844 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80011ca:	2304      	movs	r3, #4
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80011ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fac6 	bl	800378c <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x7a>
		Error_Handler();
 8001206:	f000 f89f 	bl	8001348 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fdc6 	bl	8003db8 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xa6>
		Error_Handler();
 8001232:	f000 f889 	bl	8001348 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8001236:	2312      	movs	r3, #18
 8001238:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800123a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f002 ff84 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc6>
		Error_Handler();
 8001252:	f000 f879 	bl	8001348 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SystemClock_Config+0xd4>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3770      	adds	r7, #112	; 0x70
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	42420070 	.word	0x42420070

08001268 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f001 f923 	bl	80024c8 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80012ae:	f000 fad5 	bl	800185c <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	1ad2      	subs	r2, r2, r3
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d90b      	bls.n	80012e0 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f001 f910 	bl	80024f8 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
	}
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	609a      	str	r2, [r3, #8]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001316:	f000 faa1 	bl	800185c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1ad2      	subs	r2, r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d905      	bls.n	800133e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <print>:
 *      Author: karth
 */

#include "print.h"

void print(uint8_t num, uint16_t *read_temp) {
 8001354:	b580      	push	{r7, lr}
 8001356:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 800135a:	af00      	add	r7, sp, #0
 800135c:	4602      	mov	r2, r0
 800135e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001362:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8001366:	6019      	str	r1, [r3, #0]
 8001368:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800136c:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8001370:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 8001372:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001376:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f007 fa5c 	bl	8008844 <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 800138c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001390:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001394:	220a      	movs	r2, #10
 8001396:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 8001398:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800139c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < num; i++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 80013aa:	e027      	b.n	80013fc <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 80013ac:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80013bc:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 80013ca:	460a      	mov	r2, r1
 80013cc:	491d      	ldr	r1, [pc, #116]	; (8001444 <print+0xf0>)
 80013ce:	f007 fa19 	bl	8008804 <siprintf>
		strncat(out_buf, buf, 20);
 80013d2:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2214      	movs	r2, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 fa39 	bl	8008854 <strncat>
		strncat(out_buf, char_to_str, 2);
 80013e2:	f107 010c 	add.w	r1, r7, #12
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2202      	movs	r2, #2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 fa31 	bl	8008854 <strncat>
	for (uint8_t i = 0; i < num; i++) {
 80013f2:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80013f6:	3301      	adds	r3, #1
 80013f8:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 80013fc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001400:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8001404:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d3ce      	bcc.n	80013ac <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 800140e:	f107 010c 	add.w	r1, r7, #12
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2202      	movs	r2, #2
 8001418:	4618      	mov	r0, r3
 800141a:	f007 fa1b 	bl	8008854 <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe fefe 	bl	8000224 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f006 fc33 	bl	8007c9e <USB_Transmit>
}
 8001438:	bf00      	nop
 800143a:	f607 0728 	addw	r7, r7, #2088	; 0x828
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08009050 	.word	0x08009050

08001448 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_SPI1_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_SPI1_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI1_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI1_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI1_Init+0x64>)
 800147c:	2228      	movs	r2, #40	; 0x28
 800147e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI1_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_SPI1_Init+0x64>)
 800149a:	f002 ff8d 	bl	80043b8 <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014a4:	f7ff ff50 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000298 	.word	0x20000298
 80014b0:	40013000 	.word	0x40013000

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d12f      	bne.n	8001534 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <HAL_SPI_MspInit+0x90>)
 8001518:	f000 fe52 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <HAL_SPI_MspInit+0x90>)
 8001530:	f000 fe46 	bl	80021c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40013000 	.word	0x40013000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010800 	.word	0x40010800

08001548 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <LTC_nCS_High+0x14>)
 8001552:	f000 ffb9 	bl	80024c8 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010800 	.word	0x40010800

08001560 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001564:	2200      	movs	r2, #0
 8001566:	2110      	movs	r1, #16
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <LTC_nCS_Low+0x14>)
 800156a:	f000 ffad 	bl	80024c8 <HAL_GPIO_WritePin>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40010800 	.word	0x40010800

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_MspInit+0x5c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x5c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x60>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_MspInit+0x60>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f909 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <OTG_FS_IRQHandler+0x10>)
 8001632:	f001 f8b9 	bl	80027a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20001008 	.word	0x20001008

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f007 f914 	bl	800889c <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20010000 	.word	0x20010000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200002f0 	.word	0x200002f0
 80016a8:	20001878 	.word	0x20001878

080016ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM7_Init+0x64>)
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_TIM7_Init+0x68>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_TIM7_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_TIM7_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_TIM7_Init+0x64>)
 80016da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_TIM7_Init+0x64>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_TIM7_Init+0x64>)
 80016e8:	f003 fbee 	bl	8004ec8 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80016f2:	f7ff fe29 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016fe:	463b      	mov	r3, r7
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_TIM7_Init+0x64>)
 8001704:	f003 fc9c 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800170e:	f7ff fe1b 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002f4 	.word	0x200002f4
 8001720:	40001400 	.word	0x40001400

08001724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x34>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10b      	bne.n	800174e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x38>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_TIM_Base_MspInit+0x38>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_TIM_Base_MspInit+0x38>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40001400 	.word	0x40001400
 800175c:	40021000 	.word	0x40021000

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001760:	f7ff ffa4 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001766:	490c      	ldr	r1, [pc, #48]	; (8001798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <LoopFillZerobss+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800177c:	4c09      	ldr	r4, [pc, #36]	; (80017a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800178a:	f007 f88d 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff fb9d 	bl	8000ecc <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800179c:	08009520 	.word	0x08009520
  ldr r2, =_sbss
 80017a0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80017a4:	20001874 	.word	0x20001874

080017a8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fcbd 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fed6 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fcd5 	bl	80021a6 <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 fc9d 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000008 	.word	0x20000008
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000008 	.word	0x20000008
 8001858:	2000033c 	.word	0x2000033c

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	2000033c 	.word	0x2000033c

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0be      	b.n	8001a58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff f948 	bl	8000b8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f9ab 	bl	8001c58 <ADC_ConversionStop_Disable>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8099 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8095 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001938:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b1b      	ldrb	r3, [r3, #12]
 800193e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001940:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d003      	beq.n	800195a <HAL_ADC_Init+0xa2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_Init+0xa8>
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	e000      	b.n	8001962 <HAL_ADC_Init+0xaa>
 8001960:	2300      	movs	r3, #0
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7d1b      	ldrb	r3, [r3, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d119      	bne.n	80019a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	3b01      	subs	r3, #1
 800197e:	035a      	lsls	r2, r3, #13
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_ADC_Init+0x1a8>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0x126>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_ADC_Init+0x1ac>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f023 0312 	bic.w	r3, r3, #18
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	ffe1f7fd 	.word	0xffe1f7fd
 8001a64:	ff1f0efe 	.word	0xff1f0efe

08001a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x20>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0dc      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1da>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d81c      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	221f      	movs	r2, #31
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4019      	ands	r1, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad0:	e03c      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d81c      	bhi.n	8001b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4019      	ands	r1, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b23      	subs	r3, #35	; 0x23
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
 8001b12:	e01b      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b41      	subs	r3, #65	; 0x41
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d91c      	bls.n	8001b8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	2207      	movs	r2, #7
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6898      	ldr	r0, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	fa00 f203 	lsl.w	r2, r0, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	e019      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bce:	2b11      	cmp	r3, #17
 8001bd0:	d132      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_ADC_ConfigChannel+0x1e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d125      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d126      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bf8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d11a      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9a      	lsrs	r2, r3, #18
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1b2>
 8001c26:	e007      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40012400 	.word	0x40012400
 8001c50:	20000000 	.word	0x20000000
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d12e      	bne.n	8001cd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c82:	f7ff fdeb 	bl	800185c <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c88:	e01b      	b.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c8a:	f7ff fde7 	bl	800185c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d914      	bls.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10d      	bne.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e007      	b.n	8001cd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d0dc      	beq.n	8001c8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0ed      	b.n	8001ec8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe ffe3 	bl	8000cc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0e:	f7ff fda5 	bl	800185c <HAL_GetTick>
 8001d12:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d14:	e012      	b.n	8001d3c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d16:	f7ff fda1 	bl	800185c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b0a      	cmp	r3, #10
 8001d22:	d90b      	bls.n	8001d3c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2205      	movs	r2, #5
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0c5      	b.n	8001ec8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0e5      	beq.n	8001d16 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0202 	bic.w	r2, r2, #2
 8001d58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5a:	f7ff fd7f 	bl	800185c <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d60:	e012      	b.n	8001d88 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d62:	f7ff fd7b 	bl	800185c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b0a      	cmp	r3, #10
 8001d6e:	d90b      	bls.n	8001d88 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e09f      	b.n	8001ec8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e5      	bne.n	8001d62 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e5b      	ldrb	r3, [r3, #25]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e9b      	ldrb	r3, [r3, #26]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0220 	bic.w	r2, r2, #32
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7edb      	ldrb	r3, [r3, #27]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0210 	bic.w	r2, r2, #16
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0210 	orr.w	r2, r2, #16
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0208 	orr.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0208 	bic.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f5b      	ldrb	r3, [r3, #29]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0204 	orr.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0204 	bic.w	r2, r2, #4
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	ea42 0103 	orr.w	r1, r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d12e      	bne.n	8001f42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fcae 	bl	800185c <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f02:	e012      	b.n	8001f2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f04:	f7ff fcaa 	bl	800185c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b0a      	cmp	r3, #10
 8001f10:	d90b      	bls.n	8001f2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2205      	movs	r2, #5
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e012      	b.n	8001f50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1e5      	bne.n	8001f04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e006      	b.n	8001f50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
  }
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <HAL_CAN_ActivateNotification+0x1e>
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d109      	bne.n	8001f8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e006      	b.n	8001f98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4906      	ldr	r1, [pc, #24]	; (800203c <__NVIC_EnableIRQ+0x34>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff90 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff2d 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff42 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff90 	bl	8002094 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5f 	bl	8002040 <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff35 	bl	8002008 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08b      	sub	sp, #44	; 0x2c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	e169      	b.n	80024a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021d4:	2201      	movs	r2, #1
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8158 	bne.w	80024a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a9a      	ldr	r2, [pc, #616]	; (8002460 <HAL_GPIO_Init+0x2a0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d05e      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 80021fc:	4a98      	ldr	r2, [pc, #608]	; (8002460 <HAL_GPIO_Init+0x2a0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d875      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002202:	4a98      	ldr	r2, [pc, #608]	; (8002464 <HAL_GPIO_Init+0x2a4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d058      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002208:	4a96      	ldr	r2, [pc, #600]	; (8002464 <HAL_GPIO_Init+0x2a4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d86f      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800220e:	4a96      	ldr	r2, [pc, #600]	; (8002468 <HAL_GPIO_Init+0x2a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d052      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002214:	4a94      	ldr	r2, [pc, #592]	; (8002468 <HAL_GPIO_Init+0x2a8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d869      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800221a:	4a94      	ldr	r2, [pc, #592]	; (800246c <HAL_GPIO_Init+0x2ac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d04c      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002220:	4a92      	ldr	r2, [pc, #584]	; (800246c <HAL_GPIO_Init+0x2ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d863      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002226:	4a92      	ldr	r2, [pc, #584]	; (8002470 <HAL_GPIO_Init+0x2b0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d046      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 800222c:	4a90      	ldr	r2, [pc, #576]	; (8002470 <HAL_GPIO_Init+0x2b0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d85d      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002232:	2b12      	cmp	r3, #18
 8002234:	d82a      	bhi.n	800228c <HAL_GPIO_Init+0xcc>
 8002236:	2b12      	cmp	r3, #18
 8002238:	d859      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_GPIO_Init+0x80>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	080022bb 	.word	0x080022bb
 8002244:	08002295 	.word	0x08002295
 8002248:	080022a7 	.word	0x080022a7
 800224c:	080022e9 	.word	0x080022e9
 8002250:	080022ef 	.word	0x080022ef
 8002254:	080022ef 	.word	0x080022ef
 8002258:	080022ef 	.word	0x080022ef
 800225c:	080022ef 	.word	0x080022ef
 8002260:	080022ef 	.word	0x080022ef
 8002264:	080022ef 	.word	0x080022ef
 8002268:	080022ef 	.word	0x080022ef
 800226c:	080022ef 	.word	0x080022ef
 8002270:	080022ef 	.word	0x080022ef
 8002274:	080022ef 	.word	0x080022ef
 8002278:	080022ef 	.word	0x080022ef
 800227c:	080022ef 	.word	0x080022ef
 8002280:	080022ef 	.word	0x080022ef
 8002284:	0800229d 	.word	0x0800229d
 8002288:	080022b1 	.word	0x080022b1
 800228c:	4a79      	ldr	r2, [pc, #484]	; (8002474 <HAL_GPIO_Init+0x2b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002292:	e02c      	b.n	80022ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e029      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	3304      	adds	r3, #4
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e024      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	3308      	adds	r3, #8
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e01f      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	330c      	adds	r3, #12
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e01a      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022c2:	2304      	movs	r3, #4
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e013      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d0:	2308      	movs	r3, #8
 80022d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	611a      	str	r2, [r3, #16]
          break;
 80022da:	e009      	b.n	80022f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022dc:	2308      	movs	r3, #8
 80022de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	615a      	str	r2, [r3, #20]
          break;
 80022e6:	e003      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          break;
 80022ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2bff      	cmp	r3, #255	; 0xff
 80022f4:	d801      	bhi.n	80022fa <HAL_GPIO_Init+0x13a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_Init+0x13e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2bff      	cmp	r3, #255	; 0xff
 8002304:	d802      	bhi.n	800230c <HAL_GPIO_Init+0x14c>
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x152>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3b08      	subs	r3, #8
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	210f      	movs	r1, #15
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80b1 	beq.w	80024a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_GPIO_Init+0x2bc>)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a40      	ldr	r2, [pc, #256]	; (8002480 <HAL_GPIO_Init+0x2c0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <HAL_GPIO_Init+0x2c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <HAL_GPIO_Init+0x2c8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <HAL_GPIO_Init+0x1e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3d      	ldr	r2, [pc, #244]	; (800248c <HAL_GPIO_Init+0x2cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_GPIO_Init+0x1e0>
 800239c:	2303      	movs	r3, #3
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e004      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023ac:	2300      	movs	r3, #0
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023be:	492f      	ldr	r1, [pc, #188]	; (800247c <HAL_GPIO_Init+0x2bc>)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	492c      	ldr	r1, [pc, #176]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4928      	ldr	r1, [pc, #160]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	491e      	ldr	r1, [pc, #120]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4918      	ldr	r1, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4914      	ldr	r1, [pc, #80]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d021      	beq.n	8002494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e021      	b.n	80024a2 <HAL_GPIO_Init+0x2e2>
 800245e:	bf00      	nop
 8002460:	10320000 	.word	0x10320000
 8002464:	10310000 	.word	0x10310000
 8002468:	10220000 	.word	0x10220000
 800246c:	10210000 	.word	0x10210000
 8002470:	10120000 	.word	0x10120000
 8002474:	10110000 	.word	0x10110000
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	40010800 	.word	0x40010800
 8002484:	40010c00 	.word	0x40010c00
 8002488:	40011000 	.word	0x40011000
 800248c:	40011400 	.word	0x40011400
 8002490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	43db      	mvns	r3, r3
 800249c:	4909      	ldr	r1, [pc, #36]	; (80024c4 <HAL_GPIO_Init+0x304>)
 800249e:	4013      	ands	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f47f ae8e 	bne.w	80021d4 <HAL_GPIO_Init+0x14>
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	372c      	adds	r7, #44	; 0x2c
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43d9      	mvns	r1, r3
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	400b      	ands	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800252a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252c:	b08f      	sub	sp, #60	; 0x3c
 800252e:	af0a      	add	r7, sp, #40	; 0x28
 8002530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e10f      	b.n	800275c <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f005 fda2 	bl	80080a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2203      	movs	r2, #3
 8002560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fe94 	bl	80052a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	687e      	ldr	r6, [r7, #4]
 8002588:	466d      	mov	r5, sp
 800258a:	f106 0410 	add.w	r4, r6, #16
 800258e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800259a:	e885 0003 	stmia.w	r5, {r0, r1}
 800259e:	1d33      	adds	r3, r6, #4
 80025a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	f002 fdb2 	bl	800510c <USB_CoreInit>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0d0      	b.n	800275c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fe81 	bl	80052c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e04a      	b.n	8002662 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	333d      	adds	r3, #61	; 0x3d
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	333c      	adds	r3, #60	; 0x3c
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	b298      	uxth	r0, r3
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3356      	adds	r3, #86	; 0x56
 8002608:	4602      	mov	r2, r0
 800260a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3340      	adds	r3, #64	; 0x40
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3344      	adds	r3, #68	; 0x44
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3348      	adds	r3, #72	; 0x48
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	334c      	adds	r3, #76	; 0x4c
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	3301      	adds	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	d3af      	bcc.n	80025cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e044      	b.n	80026fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3301      	adds	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d3b5      	bcc.n	8002672 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	687e      	ldr	r6, [r7, #4]
 800270e:	466d      	mov	r5, sp
 8002710:	f106 0410 	add.w	r4, r6, #16
 8002714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002720:	e885 0003 	stmia.w	r5, {r0, r1}
 8002724:	1d33      	adds	r3, r6, #4
 8002726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	f002 fe19 	bl	8005360 <USB_DevInit>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e00d      	b.n	800275c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fda3 	bl	80062a0 <USB_DevDisconnect>

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_PCD_Start+0x16>
 8002776:	2302      	movs	r3, #2
 8002778:	e012      	b.n	80027a0 <HAL_PCD_Start+0x3c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fd7e 	bl	8005288 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fd65 	bl	8006260 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08d      	sub	sp, #52	; 0x34
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fe1c 	bl	80063fc <USB_GetMode>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 8443 	bne.w	8003052 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fd85 	bl	80062e0 <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8439 	beq.w	8003050 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fd72 	bl	80062e0 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f002 0202 	and.w	r2, r2, #2
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fd60 	bl	80062e0 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b10      	cmp	r3, #16
 8002828:	d161      	bne.n	80028ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0210 	bic.w	r2, r2, #16
 8002838:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	0c5b      	lsrs	r3, r3, #17
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	2b02      	cmp	r3, #2
 8002864:	d124      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d035      	beq.n	80028de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800287c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6a38      	ldr	r0, [r7, #32]
 8002886:	f003 fb9d 	bl	8005fc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002896:	441a      	add	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a8:	441a      	add	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	615a      	str	r2, [r3, #20]
 80028ae:	e016      	b.n	80028de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	0c5b      	lsrs	r3, r3, #17
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d110      	bne.n	80028de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028c2:	2208      	movs	r2, #8
 80028c4:	4619      	mov	r1, r3
 80028c6:	6a38      	ldr	r0, [r7, #32]
 80028c8:	f003 fb7c 	bl	8005fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d8:	441a      	add	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0210 	orr.w	r2, r2, #16
 80028ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fcf4 	bl	80062e0 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002902:	f040 80a7 	bne.w	8002a54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fcf8 	bl	8006304 <USB_ReadDevAllOutEpInterrupt>
 8002914:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002916:	e099      	b.n	8002a4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808e 	beq.w	8002a40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fd1a 	bl	8006368 <USB_ReadDevOutEPInterrupt>
 8002934:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294c:	461a      	mov	r2, r3
 800294e:	2301      	movs	r3, #1
 8002950:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fe41 	bl	80035dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2308      	movs	r3, #8
 8002974:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fe7d 	bl	8003678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	2310      	movs	r3, #16
 8002998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d030      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d109      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	78db      	ldrb	r3, [r3, #3]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f005 fc44 	bl	800827c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	2302      	movs	r3, #2
 8002a04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2320      	movs	r3, #32
 8002a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f af62 	bne.w	8002918 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fc41 	bl	80062e0 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a68:	f040 80a4 	bne.w	8002bb4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fc60 	bl	8006336 <USB_ReadDevAllInEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a7c:	e096      	b.n	8002bac <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 808b 	beq.w	8002ba0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fc84 	bl	80063a2 <USB_ReadDevInEPInterrupt>
 8002a9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d020      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f005 fb4f 	bl	8008186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afe:	461a      	mov	r2, r3
 8002b00:	2308      	movs	r3, #8
 8002b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	2340      	movs	r3, #64	; 0x40
 8002b3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f002 fd2b 	bl	80055a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	3338      	adds	r3, #56	; 0x38
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	78db      	ldrb	r3, [r3, #3]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f005 fb92 	bl	80082a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fc96 	bl	80034cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f47f af65 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fb91 	bl	80062e0 <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc8:	d114      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 fb3e 	bl	8008260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fb71 	bl	80062e0 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c08:	d112      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fafa 	bl	8008214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c2e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fb53 	bl	80062e0 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	f040 80b5 	bne.w	8002db2 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2110      	movs	r1, #16
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fc9e 	bl	80055a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	e046      	b.n	8002cfc <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c92:	0151      	lsls	r1, r2, #5
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	440a      	add	r2, r1
 8002c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3b3      	bcc.n	8002c6e <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d32:	f043 030b 	orr.w	r3, r3, #11
 8002d36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d48:	f043 030b 	orr.w	r3, r3, #11
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	e015      	b.n	8002d7c <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d76:	f043 030b 	orr.w	r3, r3, #11
 8002d7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f003 fb5d 	bl	800645c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fa92 	bl	80062e0 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc6:	d124      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fb22 	bl	8006416 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fc60 	bl	800569c <USB_GetDevSpeed>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681c      	ldr	r4, [r3, #0]
 8002de8:	f001 f98c 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8002dec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4620      	mov	r0, r4
 8002df8:	f002 f9aa 	bl	8005150 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f005 f9ea 	bl	80081d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fa62 	bl	80062e0 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f005 f9c7 	bl	80081ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 0208 	and.w	r2, r2, #8
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fa4d 	bl	80062e0 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d122      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	e014      	b.n	8002e8c <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 faf2 	bl	800346a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	3301      	adds	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3e5      	bcc.n	8002e62 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fa20 	bl	80062e0 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d13b      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eac:	2301      	movs	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	e02b      	b.n	8002f0a <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d115      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da12      	bge.n	8002f04 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	333f      	adds	r3, #63	; 0x3f
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fab3 	bl	800346a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	3301      	adds	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3ce      	bcc.n	8002eb2 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 f9d9 	bl	80062e0 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f38:	d155      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e045      	b.n	8002fcc <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d12e      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da2b      	bge.n	8002fc6 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d121      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc2:	6053      	str	r3, [r2, #4]
            break;
 8002fc4:	e007      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3301      	adds	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b4      	bcc.n	8002f40 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 f978 	bl	80062e0 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d10a      	bne.n	8003012 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 f961 	bl	80082c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f003 f962 	bl	80062e0 <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d115      	bne.n	8003052 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f005 f951 	bl	80082e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e000      	b.n	8003052 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8003050:	bf00      	nop
    }
  }
}
 8003052:	3734      	adds	r7, #52	; 0x34
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_SetAddress+0x1a>
 800306e:	2302      	movs	r3, #2
 8003070:	e013      	b.n	800309a <HAL_PCD_SetAddress+0x42>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f003 f8c3 	bl	8006216 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	4608      	mov	r0, r1
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	4603      	mov	r3, r0
 80030b2:	70fb      	strb	r3, [r7, #3]
 80030b4:	460b      	mov	r3, r1
 80030b6:	803b      	strh	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da0f      	bge.n	80030e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3338      	adds	r3, #56	; 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	705a      	strb	r2, [r3, #1]
 80030e6:	e00f      	b.n	8003108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003114:	883a      	ldrh	r2, [r7, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	78ba      	ldrb	r2, [r7, #2]
 800311e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003132:	78bb      	ldrb	r3, [r7, #2]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d102      	bne.n	800313e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_EP_Open+0xaa>
 8003148:	2302      	movs	r3, #2
 800314a:	e00e      	b.n	800316a <HAL_PCD_EP_Open+0xc8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	4618      	mov	r0, r3
 800315c:	f002 fabc 	bl	80056d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003168:	7afb      	ldrb	r3, [r7, #11]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003182:	2b00      	cmp	r3, #0
 8003184:	da0f      	bge.n	80031a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3338      	adds	r3, #56	; 0x38
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	705a      	strb	r2, [r3, #1]
 80031a4:	e00f      	b.n	80031c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_Close+0x6e>
 80031dc:	2302      	movs	r3, #2
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_Close+0x8c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 faf8 	bl	80057e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	460b      	mov	r3, r1
 8003214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	b2da      	uxtb	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	4618      	mov	r0, r3
 800325c:	f002 fb9e 	bl	800599c <USB_EPStartXfer>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800328c:	681b      	ldr	r3, [r3, #0]
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	460b      	mov	r3, r1
 80032a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3338      	adds	r3, #56	; 0x38
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2201      	movs	r2, #1
 80032d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fb56 	bl	800599c <USB_EPStartXfer>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d901      	bls.n	8003318 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e04e      	b.n	80033b6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331c:	2b00      	cmp	r3, #0
 800331e:	da0f      	bge.n	8003340 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3338      	adds	r3, #56	; 0x38
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	705a      	strb	r2, [r3, #1]
 800333e:	e00d      	b.n	800335c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_PCD_EP_SetStall+0x82>
 8003378:	2302      	movs	r3, #2
 800337a:	e01c      	b.n	80033b6 <HAL_PCD_EP_SetStall+0xbc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fe71 	bl	8006072 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f003 f858 	bl	800645c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d901      	bls.n	80033dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e042      	b.n	8003462 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da0f      	bge.n	8003404 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3338      	adds	r3, #56	; 0x38
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	705a      	strb	r2, [r3, #1]
 8003402:	e00f      	b.n	8003424 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_ClrStall+0x86>
 8003440:	2302      	movs	r3, #2
 8003442:	e00e      	b.n	8003462 <HAL_PCD_EP_ClrStall+0xa4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fe7a 	bl	800614c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	da0c      	bge.n	8003498 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 020f 	and.w	r2, r3, #15
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3338      	adds	r3, #56	; 0x38
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e00c      	b.n	80034b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 fca1 	bl	8005e00 <USB_EPStopXfer>
 80034be:	4603      	mov	r3, r0
 80034c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034c2:	7afb      	ldrb	r3, [r7, #11]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3338      	adds	r3, #56	; 0x38
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d901      	bls.n	8003504 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e067      	b.n	80035d4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	429a      	cmp	r2, r3
 8003518:	d902      	bls.n	8003520 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3303      	adds	r3, #3
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003528:	e026      	b.n	8003578 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d902      	bls.n	8003546 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3303      	adds	r3, #3
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68d9      	ldr	r1, [r3, #12]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	b29b      	uxth	r3, r3
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f002 fcf9 	bl	8005f52 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	441a      	add	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d809      	bhi.n	80035a2 <PCD_WriteEmptyTxFifo+0xd6>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003596:	429a      	cmp	r2, r3
 8003598:	d203      	bcs.n	80035a2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1c3      	bne.n	800352a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d811      	bhi.n	80035d2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2201      	movs	r2, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ce:	4013      	ands	r3, r2
 80035d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	333c      	adds	r3, #60	; 0x3c
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <PCD_EP_OutXfrComplete_int+0x98>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d124      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362e:	6093      	str	r3, [r2, #8]
 8003630:	e01a      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	2320      	movs	r3, #32
 800364c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f004 fd7b 	bl	8008150 <HAL_PCD_DataOutStageCallback>
 800365a:	e005      	b.n	8003668 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f004 fd74 	bl	8008150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	4f54310a 	.word	0x4f54310a

08003678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	333c      	adds	r3, #60	; 0x3c
 8003690:	3304      	adds	r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <PCD_EP_OutSetupPacket_int+0x64>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d90e      	bls.n	80036cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f004 fd2d 	bl	800812c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	4f54300a 	.word	0x4f54300a

080036e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	4613      	mov	r3, r2
 80036ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	0419      	lsls	r1, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	430a      	orrs	r2, r1
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e028      	b.n	8003760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e00d      	b.n	800373e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	3301      	adds	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	3b01      	subs	r3, #1
 8003744:	429a      	cmp	r2, r3
 8003746:	d3ec      	bcc.n	8003722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003748:	883b      	ldrh	r3, [r7, #0]
 800374a:	0418      	lsls	r0, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	3b01      	subs	r3, #1
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4302      	orrs	r2, r0
 8003758:	3340      	adds	r3, #64	; 0x40
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e304      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8087 	beq.w	80038ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ac:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d00c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037b8:	4b8f      	ldr	r3, [pc, #572]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d112      	bne.n	80037ea <HAL_RCC_OscConfig+0x5e>
 80037c4:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d10b      	bne.n	80037ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d06c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x12c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d168      	bne.n	80038b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e2de      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x76>
 80037f4:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e02e      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7a      	ldr	r2, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e01d      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0xbc>
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a71      	ldr	r2, [pc, #452]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fd fff8 	bl	800185c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd fff4 	bl	800185c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e292      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0xe4>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd ffe4 	bl	800185c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fd ffe0 	bl	800185c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e27e      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x10c>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d11c      	bne.n	8003918 <HAL_RCC_OscConfig+0x18c>
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x176>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e252      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4939      	ldr	r1, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e03a      	b.n	800398e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd ff99 	bl	800185c <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7fd ff95 	bl	800185c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e233      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4927      	ldr	r1, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e015      	b.n	800398e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd ff78 	bl	800185c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fd ff74 	bl	800185c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e212      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03a      	beq.n	8003a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fd ff58 	bl	800185c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fd ff54 	bl	800185c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1f2      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f000 fba2 	bl	8004118 <RCC_Delay>
 80039d4:	e01c      	b.n	8003a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fd ff3e 	bl	800185c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e2:	e00f      	b.n	8003a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd ff3a 	bl	800185c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d908      	bls.n	8003a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1d8      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	42420000 	.word	0x42420000
 8003a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b9b      	ldr	r3, [pc, #620]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e9      	bne.n	80039e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a6 	beq.w	8003b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	4b91      	ldr	r3, [pc, #580]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a90      	ldr	r2, [pc, #576]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]
 8003a3a:	4b8e      	ldr	r3, [pc, #568]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d118      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a56:	4b88      	ldr	r3, [pc, #544]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a87      	ldr	r2, [pc, #540]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a62:	f7fd fefb 	bl	800185c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6a:	f7fd fef7 	bl	800185c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b64      	cmp	r3, #100	; 0x64
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e195      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	4b7e      	ldr	r3, [pc, #504]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x312>
 8003a90:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	e02d      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003aa6:	4b73      	ldr	r3, [pc, #460]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	4b70      	ldr	r3, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	e01c      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x356>
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a69      	ldr	r2, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a66      	ldr	r2, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	e00b      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003ae2:	4b64      	ldr	r3, [pc, #400]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a63      	ldr	r2, [pc, #396]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a60      	ldr	r2, [pc, #384]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fd feab 	bl	800185c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fea7 	bl	800185c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e143      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ee      	beq.n	8003b0a <HAL_RCC_OscConfig+0x37e>
 8003b2c:	e014      	b.n	8003b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fe95 	bl	800185c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd fe91 	bl	800185c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e12d      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ee      	bne.n	8003b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5e:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b68:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 808c 	beq.w	8003c8c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d10e      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003b82:	4b3c      	ldr	r3, [pc, #240]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e103      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d14e      	bne.n	8003c46 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0ef      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_RCC_OscConfig+0x4f0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fd fe45 	bl	800185c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bd6:	f7fd fe41 	bl	800185c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b64      	cmp	r3, #100	; 0x64
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0df      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	491c      	ldr	r1, [pc, #112]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4918      	ldr	r1, [pc, #96]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCC_OscConfig+0x4f0>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fd fe1d 	bl	800185c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c26:	f7fd fe19 	bl	800185c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0b7      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x49a>
 8003c44:	e022      	b.n	8003c8c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_RCC_OscConfig+0x4e8>)
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_OscConfig+0x4f0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fd fe00 	bl	800185c <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c60:	f7fd fdfc 	bl	800185c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e09a      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e9      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8088 	beq.w	8003da6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d068      	beq.n	8003d74 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d14d      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x628>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fdd4 	bl	800185c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd fdd0 	bl	800185c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e06e      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d10f      	bne.n	8003d00 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4931      	ldr	r1, [pc, #196]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f023 020f 	bic.w	r2, r3, #15
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	492d      	ldr	r1, [pc, #180]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	430b      	orrs	r3, r1
 8003d12:	4927      	ldr	r1, [pc, #156]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_RCC_OscConfig+0x628>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fd fd9d 	bl	800185c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fd fd99 	bl	800185c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e037      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x59a>
 8003d44:	e02f      	b.n	8003da6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x628>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fd86 	bl	800185c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd fd82 	bl	800185c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e020      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5c8>
 8003d72:	e018      	b.n	8003da6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e013      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	42420060 	.word	0x42420060

08003db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	4965      	ldr	r1, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e073      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4936      	ldr	r1, [pc, #216]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fcd8 	bl	800185c <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fcd4 	bl	800185c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e053      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d210      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1cc>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fc36 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	080094ac 	.word	0x080094ac
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f90:	b08e      	sub	sp, #56	; 0x38
 8003f92:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d002      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fc4:	e089      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fca:	e089      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	0c9b      	lsrs	r3, r3, #18
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d072      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003fee:	5c9b      	ldrb	r3, [r3, r2]
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d053      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_RCC_GetSysClockFreq+0x160>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	3301      	adds	r3, #1
 800400a:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800400c:	4b37      	ldr	r3, [pc, #220]	; (80040ec <HAL_RCC_GetSysClockFreq+0x160>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3302      	adds	r3, #2
 8004018:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2200      	movs	r2, #0
 800401e:	469a      	mov	sl, r3
 8004020:	4693      	mov	fp, r2
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2200      	movs	r2, #0
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	617a      	str	r2, [r7, #20]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	fb03 f20b 	mul.w	r2, r3, fp
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fb0a f303 	mul.w	r3, sl, r3
 8004036:	4413      	add	r3, r2
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	fbaa 0102 	umull	r0, r1, sl, r2
 800403e:	440b      	add	r3, r1
 8004040:	4619      	mov	r1, r3
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004044:	fb03 f201 	mul.w	r2, r3, r1
 8004048:	2300      	movs	r3, #0
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	4413      	add	r3, r2
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004052:	fba0 4502 	umull	r4, r5, r0, r2
 8004056:	442b      	add	r3, r5
 8004058:	461d      	mov	r5, r3
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2200      	movs	r2, #0
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	60fa      	str	r2, [r7, #12]
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	2200      	movs	r2, #0
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800406e:	460b      	mov	r3, r1
 8004070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004074:	4652      	mov	r2, sl
 8004076:	fb02 f203 	mul.w	r2, r2, r3
 800407a:	465b      	mov	r3, fp
 800407c:	4684      	mov	ip, r0
 800407e:	fb0c f303 	mul.w	r3, ip, r3
 8004082:	4413      	add	r3, r2
 8004084:	4602      	mov	r2, r0
 8004086:	4651      	mov	r1, sl
 8004088:	fba2 8901 	umull	r8, r9, r2, r1
 800408c:	444b      	add	r3, r9
 800408e:	4699      	mov	r9, r3
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc f8cc 	bl	8000234 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
 80040a4:	e007      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80040b8:	7b5b      	ldrb	r3, [r3, #13]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	4293      	cmp	r3, r2
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
 80040c8:	e004      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0x170>)
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040d8:	e002      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_GetSysClockFreq+0x174>)
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3738      	adds	r7, #56	; 0x38
 80040e6:	46bd      	mov	sp, r7
 80040e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	017d7840 	.word	0x017d7840
 80040f4:	080094bc 	.word	0x080094bc
 80040f8:	080094cc 	.word	0x080094cc
 80040fc:	003d0900 	.word	0x003d0900
 8004100:	007a1200 	.word	0x007a1200

08004104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <HAL_RCC_GetHCLKFreq+0x10>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	20000000 	.word	0x20000000

08004118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <RCC_Delay+0x34>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <RCC_Delay+0x38>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a5b      	lsrs	r3, r3, #9
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004134:	bf00      	nop
  }
  while (Delay --);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e5a      	subs	r2, r3, #1
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <RCC_Delay+0x1c>
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000000 	.word	0x20000000
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d07d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004178:	4b8b      	ldr	r3, [pc, #556]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4a87      	ldr	r2, [pc, #540]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	61d3      	str	r3, [r2, #28]
 8004190:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d118      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ac:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a7e      	ldr	r2, [pc, #504]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7fd fb50 	bl	800185c <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd fb4c 	bl	800185c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0e5      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041de:	4b72      	ldr	r3, [pc, #456]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d027      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041fc:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004206:	4b6a      	ldr	r3, [pc, #424]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004212:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d014      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fd fb1b 	bl	800185c <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd fb17 	bl	800185c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0ae      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	4b56      	ldr	r3, [pc, #344]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4953      	ldr	r1, [pc, #332]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800425a:	4313      	orrs	r3, r2
 800425c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800425e:	7efb      	ldrb	r3, [r7, #27]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800427c:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4947      	ldr	r1, [pc, #284]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800429a:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4940      	ldr	r1, [pc, #256]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80042b8:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4938      	ldr	r1, [pc, #224]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80042ca:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d148      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80042ec:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d138      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80042f8:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e042      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4920      	ldr	r1, [pc, #128]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004326:	4313      	orrs	r3, r2
 8004328:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	491c      	ldr	r1, [pc, #112]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004338:	4313      	orrs	r3, r2
 800433a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fa8b 	bl	800185c <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800434a:	f7fd fa87 	bl	800185c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b64      	cmp	r3, #100	; 0x64
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e020      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004368:	e009      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	429a      	cmp	r2, r3
 8004378:	d001      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40007000 	.word	0x40007000
 80043b0:	42420440 	.word	0x42420440
 80043b4:	42420070 	.word	0x42420070

080043b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e076      	b.n	80044b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043da:	d009      	beq.n	80043f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
 80043e2:	e005      	b.n	80043f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f852 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	ea42 0103 	orr.w	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0c1a      	lsrs	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f002 0204 	and.w	r2, r2, #4
 8004496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_SPI_Transmit+0x22>
 80044de:	2302      	movs	r3, #2
 80044e0:	e12d      	b.n	800473e <HAL_SPI_Transmit+0x27e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ea:	f7fd f9b7 	bl	800185c <HAL_GetTick>
 80044ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004500:	2302      	movs	r3, #2
 8004502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004504:	e116      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_Transmit+0x52>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004516:	e10d      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2203      	movs	r2, #3
 800451c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455e:	d10f      	bne.n	8004580 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d007      	beq.n	800459e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d14f      	bne.n	8004648 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_SPI_Transmit+0xf6>
 80045b0:	8afb      	ldrh	r3, [r7, #22]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d142      	bne.n	800463c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045da:	e02f      	b.n	800463c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d112      	bne.n	8004610 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
 800460e:	e015      	b.n	800463c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004610:	f7fd f924 	bl	800185c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d803      	bhi.n	8004628 <HAL_SPI_Transmit+0x168>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d102      	bne.n	800462e <HAL_SPI_Transmit+0x16e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800463a:	e07b      	b.n	8004734 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ca      	bne.n	80045dc <HAL_SPI_Transmit+0x11c>
 8004646:	e050      	b.n	80046ea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x196>
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d144      	bne.n	80046e0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800467c:	e030      	b.n	80046e0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d113      	bne.n	80046b4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b2:	e015      	b.n	80046e0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b4:	f7fd f8d2 	bl	800185c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d803      	bhi.n	80046cc <HAL_SPI_Transmit+0x20c>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Transmit+0x212>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046de:	e029      	b.n	8004734 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1c9      	bne.n	800467e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fbcc 	bl	8004e8c <SPI_EndRxTxTransaction>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e003      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800473c:	7ffb      	ldrb	r3, [r7, #31]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af02      	add	r7, sp, #8
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d002      	beq.n	800476c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004766:	2302      	movs	r3, #2
 8004768:	75fb      	strb	r3, [r7, #23]
    goto error;
 800476a:	e0fb      	b.n	8004964 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004774:	d112      	bne.n	800479c <HAL_SPI_Receive+0x56>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10e      	bne.n	800479c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2204      	movs	r2, #4
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8ef 	bl	8004976 <HAL_SPI_TransmitReceive>
 8004798:	4603      	mov	r3, r0
 800479a:	e0e8      	b.n	800496e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_Receive+0x64>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0e1      	b.n	800496e <HAL_SPI_Receive+0x228>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b2:	f7fd f853 	bl	800185c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_Receive+0x7e>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047c8:	e0cc      	b.n	8004964 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2204      	movs	r2, #4
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d10f      	bne.n	8004832 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d16a      	bne.n	800492e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004858:	e032      	b.n	80048c0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d115      	bne.n	8004894 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f103 020c 	add.w	r2, r3, #12
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004892:	e015      	b.n	80048c0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004894:	f7fc ffe2 	bl	800185c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d803      	bhi.n	80048ac <HAL_SPI_Receive+0x166>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d102      	bne.n	80048b2 <HAL_SPI_Receive+0x16c>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048be:	e051      	b.n	8004964 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c7      	bne.n	800485a <HAL_SPI_Receive+0x114>
 80048ca:	e035      	b.n	8004938 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d113      	bne.n	8004902 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	b292      	uxth	r2, r2
 80048e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004900:	e015      	b.n	800492e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004902:	f7fc ffab 	bl	800185c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d803      	bhi.n	800491a <HAL_SPI_Receive+0x1d4>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d102      	bne.n	8004920 <HAL_SPI_Receive+0x1da>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800492c:	e01a      	b.n	8004964 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1c9      	bne.n	80048cc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fa53 	bl	8004de8 <SPI_EndRxTransaction>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
 800495a:	e003      	b.n	8004964 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08c      	sub	sp, #48	; 0x30
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004984:	2301      	movs	r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_SPI_TransmitReceive+0x26>
 8004998:	2302      	movs	r3, #2
 800499a:	e198      	b.n	8004cce <HAL_SPI_TransmitReceive+0x358>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a4:	f7fc ff5a 	bl	800185c <HAL_GetTick>
 80049a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00f      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x70>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049cc:	d107      	bne.n	80049de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_SPI_TransmitReceive+0x68>
 80049d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d003      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049de:	2302      	movs	r3, #2
 80049e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049e4:	e16d      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x82>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x82>
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049fe:	e160      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d003      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2205      	movs	r2, #5
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a70:	d17c      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x10a>
 8004a7a:	8b7b      	ldrh	r3, [r7, #26]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d16a      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa4:	e057      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d11b      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x176>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x176>
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d113      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d119      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x1b8>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d014      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b2e:	f7fc fe95 	bl	800185c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d80b      	bhi.n	8004b56 <HAL_SPI_TransmitReceive+0x1e0>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d007      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b54:	e0b5      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1a2      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x130>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d19d      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x130>
 8004b6a:	e080      	b.n	8004c6e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x204>
 8004b74:	8b7b      	ldrh	r3, [r7, #26]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d16f      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba0:	e05b      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11c      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x274>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d017      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x274>
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d114      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d119      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x2b6>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c2c:	f7fc fe16 	bl	800185c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d803      	bhi.n	8004c44 <HAL_SPI_TransmitReceive+0x2ce>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x2d4>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c58:	e033      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d19e      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x22c>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d199      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f90a 	bl	8004e8c <SPI_EndRxTxTransaction>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c8a:	e01a      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb8:	e003      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3730      	adds	r7, #48	; 0x30
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce8:	f7fc fdb8 	bl	800185c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf8:	f7fc fdb0 	bl	800185c <HAL_GetTick>
 8004cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	0d1b      	lsrs	r3, r3, #20
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0e:	e054      	b.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d050      	beq.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d18:	f7fc fda0 	bl	800185c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d902      	bls.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d13d      	bne.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d111      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	d004      	beq.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d107      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d74:	d10f      	bne.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e017      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d19b      	bne.n	8004d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000000 	.word	0x20000000

08004de8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfc:	d111      	bne.n	8004e22 <SPI_EndRxTransaction+0x3a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e06:	d004      	beq.n	8004e12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e10:	d107      	bne.n	8004e22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e20:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2a:	d117      	bne.n	8004e5c <SPI_EndRxTransaction+0x74>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d112      	bne.n	8004e5c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2101      	movs	r1, #1
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff ff49 	bl	8004cd8 <SPI_WaitFlagStateUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e013      	b.n	8004e84 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2200      	movs	r2, #0
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff ff36 	bl	8004cd8 <SPI_WaitFlagStateUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e000      	b.n	8004e84 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff ff18 	bl	8004cd8 <SPI_WaitFlagStateUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e000      	b.n	8004ec0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fc18 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 f82e 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2d      	ldr	r2, [pc, #180]	; (8005030 <TIM_Base_SetConfig+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <TIM_Base_SetConfig+0xcc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a29      	ldr	r2, [pc, #164]	; (8005038 <TIM_Base_SetConfig+0xd0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a28      	ldr	r2, [pc, #160]	; (800503c <TIM_Base_SetConfig+0xd4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <TIM_Base_SetConfig+0xc8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_Base_SetConfig+0x72>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d00b      	beq.n	8004fda <TIM_Base_SetConfig+0x72>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <TIM_Base_SetConfig+0xcc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_Base_SetConfig+0x72>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <TIM_Base_SetConfig+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_Base_SetConfig+0x72>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <TIM_Base_SetConfig+0xd4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d108      	bne.n	8004fec <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a07      	ldr	r2, [pc, #28]	; (8005030 <TIM_Base_SetConfig+0xc8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e04b      	b.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a12      	ldr	r2, [pc, #72]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00

0800510c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800510c:	b084      	sub	sp, #16
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	f107 001c 	add.w	r0, r7, #28
 800511a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 f9de 	bl	80064ec <USB_CoreReset>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800514c:	b004      	add	sp, #16
 800514e:	4770      	bx	lr

08005150 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d165      	bne.n	8005230 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a3e      	ldr	r2, [pc, #248]	; (8005260 <USB_SetTurnaroundTime+0x110>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d906      	bls.n	800517a <USB_SetTurnaroundTime+0x2a>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a3d      	ldr	r2, [pc, #244]	; (8005264 <USB_SetTurnaroundTime+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d202      	bcs.n	800517a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005174:	230f      	movs	r3, #15
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e05c      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a39      	ldr	r2, [pc, #228]	; (8005264 <USB_SetTurnaroundTime+0x114>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d306      	bcc.n	8005190 <USB_SetTurnaroundTime+0x40>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a38      	ldr	r2, [pc, #224]	; (8005268 <USB_SetTurnaroundTime+0x118>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d202      	bcs.n	8005190 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800518a:	230e      	movs	r3, #14
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e051      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a35      	ldr	r2, [pc, #212]	; (8005268 <USB_SetTurnaroundTime+0x118>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d306      	bcc.n	80051a6 <USB_SetTurnaroundTime+0x56>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a34      	ldr	r2, [pc, #208]	; (800526c <USB_SetTurnaroundTime+0x11c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d202      	bcs.n	80051a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051a0:	230d      	movs	r3, #13
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e046      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a30      	ldr	r2, [pc, #192]	; (800526c <USB_SetTurnaroundTime+0x11c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d306      	bcc.n	80051bc <USB_SetTurnaroundTime+0x6c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <USB_SetTurnaroundTime+0x120>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d802      	bhi.n	80051bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051b6:	230c      	movs	r3, #12
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e03b      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <USB_SetTurnaroundTime+0x120>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d906      	bls.n	80051d2 <USB_SetTurnaroundTime+0x82>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <USB_SetTurnaroundTime+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d802      	bhi.n	80051d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051cc:	230b      	movs	r3, #11
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e030      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <USB_SetTurnaroundTime+0x124>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d906      	bls.n	80051e8 <USB_SetTurnaroundTime+0x98>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <USB_SetTurnaroundTime+0x128>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d802      	bhi.n	80051e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051e2:	230a      	movs	r3, #10
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e025      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a23      	ldr	r2, [pc, #140]	; (8005278 <USB_SetTurnaroundTime+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d906      	bls.n	80051fe <USB_SetTurnaroundTime+0xae>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <USB_SetTurnaroundTime+0x12c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d202      	bcs.n	80051fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051f8:	2309      	movs	r3, #9
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e01a      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a1e      	ldr	r2, [pc, #120]	; (800527c <USB_SetTurnaroundTime+0x12c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d306      	bcc.n	8005214 <USB_SetTurnaroundTime+0xc4>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <USB_SetTurnaroundTime+0x130>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800520e:	2308      	movs	r3, #8
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e00f      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <USB_SetTurnaroundTime+0x130>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d906      	bls.n	800522a <USB_SetTurnaroundTime+0xda>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a19      	ldr	r2, [pc, #100]	; (8005284 <USB_SetTurnaroundTime+0x134>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d202      	bcs.n	800522a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005224:	2307      	movs	r3, #7
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e004      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800522a:	2306      	movs	r3, #6
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e001      	b.n	8005234 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005230:	2309      	movs	r3, #9
 8005232:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	00d8acbf 	.word	0x00d8acbf
 8005264:	00e4e1c0 	.word	0x00e4e1c0
 8005268:	00f42400 	.word	0x00f42400
 800526c:	01067380 	.word	0x01067380
 8005270:	011a499f 	.word	0x011a499f
 8005274:	01312cff 	.word	0x01312cff
 8005278:	014ca43f 	.word	0x014ca43f
 800527c:	016e3600 	.word	0x016e3600
 8005280:	01a6ab1f 	.word	0x01a6ab1f
 8005284:	01e84800 	.word	0x01e84800

08005288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 0201 	bic.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d115      	bne.n	8005316 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052f6:	2001      	movs	r0, #1
 80052f8:	f7fc faba 	bl	8001870 <HAL_Delay>
      ms++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 f87a 	bl	80063fc <USB_GetMode>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d01e      	beq.n	800534c <USB_SetCurrentMode+0x84>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b31      	cmp	r3, #49	; 0x31
 8005312:	d9f0      	bls.n	80052f6 <USB_SetCurrentMode+0x2e>
 8005314:	e01a      	b.n	800534c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d115      	bne.n	8005348 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005328:	2001      	movs	r0, #1
 800532a:	f7fc faa1 	bl	8001870 <HAL_Delay>
      ms++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f861 	bl	80063fc <USB_GetMode>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <USB_SetCurrentMode+0x84>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b31      	cmp	r3, #49	; 0x31
 8005344:	d9f0      	bls.n	8005328 <USB_SetCurrentMode+0x60>
 8005346:	e001      	b.n	800534c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e005      	b.n	8005358 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b32      	cmp	r3, #50	; 0x32
 8005350:	d101      	bne.n	8005356 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	e009      	b.n	8005394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3340      	adds	r3, #64	; 0x40
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	2200      	movs	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3301      	adds	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0e      	cmp	r3, #14
 8005398:	d9f2      	bls.n	8005380 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053b2:	2103      	movs	r1, #3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f959 	bl	800566c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ba:	2110      	movs	r1, #16
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8f1 	bl	80055a4 <USB_FlushTxFifo>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f91d 	bl	800560c <USB_FlushRxFifo>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	461a      	mov	r2, r3
 80053f0:	2300      	movs	r3, #0
 80053f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	461a      	mov	r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e043      	b.n	800548e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541c:	d118      	bne.n	8005450 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	461a      	mov	r2, r3
 8005432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	e013      	b.n	8005462 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	461a      	mov	r2, r3
 8005448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e008      	b.n	8005462 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	2300      	movs	r3, #0
 8005460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	3301      	adds	r3, #1
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d3b7      	bcc.n	8005406 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	e043      	b.n	8005524 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b2:	d118      	bne.n	80054e6 <USB_DevInit+0x186>
    {
      if (i == 0U)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	461a      	mov	r2, r3
 80054c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e013      	b.n	80054f8 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e008      	b.n	80054f8 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	461a      	mov	r2, r3
 8005506:	2300      	movs	r3, #0
 8005508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	d3b7      	bcc.n	800549c <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800554c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f043 0210 	orr.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <USB_DevInit+0x240>)
 8005560:	4313      	orrs	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f043 0208 	orr.w	r2, r3, #8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d107      	bne.n	800558e <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800558e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800559a:	b004      	add	sp, #16
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	803c3800 	.word	0x803c3800

080055a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <USB_FlushTxFifo+0x64>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d901      	bls.n	80055c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e01b      	b.n	80055fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	daf2      	bge.n	80055b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	019b      	lsls	r3, r3, #6
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a08      	ldr	r2, [pc, #32]	; (8005608 <USB_FlushTxFifo+0x64>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e006      	b.n	80055fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d0f0      	beq.n	80055dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	00030d40 	.word	0x00030d40

0800560c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <USB_FlushRxFifo+0x5c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e018      	b.n	800565c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	daf2      	bge.n	8005618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2210      	movs	r2, #16
 800563a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4a08      	ldr	r2, [pc, #32]	; (8005668 <USB_FlushRxFifo+0x5c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e006      	b.n	800565c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d0f0      	beq.n	800563c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	00030d40 	.word	0x00030d40

0800566c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0306 	and.w	r3, r3, #6
 80056b4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d002      	beq.n	80056c2 <USB_GetDevSpeed+0x26>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d102      	bne.n	80056c8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056c2:	2302      	movs	r3, #2
 80056c4:	75fb      	strb	r3, [r7, #23]
 80056c6:	e001      	b.n	80056cc <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80056c8:	230f      	movs	r3, #15
 80056ca:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d13a      	bne.n	800576a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d155      	bne.n	80057d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	791b      	ldrb	r3, [r3, #4]
 8005746:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	059b      	lsls	r3, r3, #22
 800574e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005750:	4313      	orrs	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e036      	b.n	80057d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005788:	4313      	orrs	r3, r2
 800578a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11a      	bne.n	80057d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	791b      	ldrb	r3, [r3, #4]
 80057bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057be:	430b      	orrs	r3, r1
 80057c0:	4313      	orrs	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d161      	bne.n	80058c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005816:	d11f      	bne.n	8005858 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005836:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005856:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	b29b      	uxth	r3, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005878:	4013      	ands	r3, r2
 800587a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	b29b      	uxth	r3, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800589c:	4013      	ands	r3, r2
 800589e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0159      	lsls	r1, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	4619      	mov	r1, r3
 80058bc:	4b35      	ldr	r3, [pc, #212]	; (8005994 <USB_DeactivateEndpoint+0x1b0>)
 80058be:	4013      	ands	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
 80058c2:	e060      	b.n	8005986 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d11f      	bne.n	800591c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	43db      	mvns	r3, r3
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4013      	ands	r3, r2
 800593e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	43db      	mvns	r3, r3
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4013      	ands	r3, r2
 8005962:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	0159      	lsls	r1, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	440b      	add	r3, r1
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	4619      	mov	r1, r3
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <USB_DeactivateEndpoint+0x1b4>)
 8005982:	4013      	ands	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	ec337800 	.word	0xec337800
 8005998:	eff37800 	.word	0xeff37800

0800599c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 8128 	bne.w	8005c0a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d132      	bne.n	8005a28 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	04db      	lsls	r3, r3, #19
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e092      	b.n	8005b4e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	0cdb      	lsrs	r3, r3, #19
 8005a44:	04db      	lsls	r3, r3, #19
 8005a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a6a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11a      	bne.n	8005aa8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d903      	bls.n	8005a86 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa4:	6113      	str	r3, [r2, #16]
 8005aa6:	e01b      	b.n	8005ae0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6919      	ldr	r1, [r3, #16]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	440b      	add	r3, r1
 8005ac0:	1e59      	subs	r1, r3, #1
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005acc:	4b8d      	ldr	r3, [pc, #564]	; (8005d04 <USB_EPStartXfer+0x368>)
 8005ace:	400b      	ands	r3, r1
 8005ad0:	6939      	ldr	r1, [r7, #16]
 8005ad2:	0148      	lsls	r0, r1, #5
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	4401      	add	r1, r0
 8005ad8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005adc:	4313      	orrs	r3, r2
 8005ade:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	0148      	lsls	r0, r1, #5
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	4401      	add	r1, r0
 8005afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	791b      	ldrb	r3, [r3, #4]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d11f      	bne.n	8005b4e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b4c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b6c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d015      	beq.n	8005ba2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8139 	beq.w	8005df2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	6979      	ldr	r1, [r7, #20]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	634b      	str	r3, [r1, #52]	; 0x34
 8005ba0:	e127      	b.n	8005df2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d110      	bne.n	8005bd4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e00f      	b.n	8005bf4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68d9      	ldr	r1, [r3, #12]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9a5 	bl	8005f52 <USB_WritePacket>
 8005c08:	e0f3      	b.n	8005df2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	0cdb      	lsrs	r3, r3, #19
 8005c26:	04db      	lsls	r3, r3, #19
 8005c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c4c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d12f      	bne.n	8005cb4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
 8005cb2:	e061      	b.n	8005d78 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d125      	bne.n	8005d08 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd2:	6939      	ldr	r1, [r7, #16]
 8005cd4:	0148      	lsls	r0, r1, #5
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	4401      	add	r1, r0
 8005cda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d00:	6113      	str	r3, [r2, #16]
 8005d02:	e039      	b.n	8005d78 <USB_EPStartXfer+0x3dc>
 8005d04:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	1e5a      	subs	r2, r3, #1
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	89fa      	ldrh	r2, [r7, #14]
 8005d24:	fb03 f202 	mul.w	r2, r3, r2
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	04d9      	lsls	r1, r3, #19
 8005d3e:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <USB_EPStartXfer+0x460>)
 8005d40:	400b      	ands	r3, r1
 8005d42:	6939      	ldr	r1, [r7, #16]
 8005d44:	0148      	lsls	r0, r1, #5
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	4401      	add	r1, r0
 8005d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	6979      	ldr	r1, [r7, #20]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	791b      	ldrb	r3, [r3, #4]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d128      	bne.n	8005dd2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d110      	bne.n	8005db2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e00f      	b.n	8005dd2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	1ff80000 	.word	0x1ff80000

08005e00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d14a      	bne.n	8005eb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e36:	f040 8086 	bne.w	8005f46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d902      	bls.n	8005e98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
          break;
 8005e96:	e056      	b.n	8005f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb0:	d0e7      	beq.n	8005e82 <USB_EPStopXfer+0x82>
 8005eb2:	e048      	b.n	8005f46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ecc:	d13b      	bne.n	8005f46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d902      	bls.n	8005f2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
          break;
 8005f2a:	e00c      	b.n	8005f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f44:	d0e7      	beq.n	8005f16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b089      	sub	sp, #36	; 0x24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	461a      	mov	r2, r3
 8005f60:	460b      	mov	r3, r1
 8005f62:	71fb      	strb	r3, [r7, #7]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005f70:	88bb      	ldrh	r3, [r7, #4]
 8005f72:	3303      	adds	r3, #3
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e018      	b.n	8005fb0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	031a      	lsls	r2, r3, #12
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3301      	adds	r3, #1
 8005f96:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	3301      	adds	r3, #1
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3e2      	bcc.n	8005f7e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3724      	adds	r7, #36	; 0x24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	; 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e014      	b.n	800601a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	3301      	adds	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	3301      	adds	r3, #1
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3e6      	bcc.n	8005ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006022:	8bfb      	ldrh	r3, [r7, #30]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	701a      	strb	r2, [r3, #0]
      i++;
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3301      	adds	r3, #1
 8006052:	623b      	str	r3, [r7, #32]
      pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800605a:	8bfb      	ldrh	r3, [r7, #30]
 800605c:	3b01      	subs	r3, #1
 800605e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ea      	bne.n	800603c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006068:	4618      	mov	r0, r3
 800606a:	372c      	adds	r7, #44	; 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d12c      	bne.n	80060e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	db12      	blt.n	80060c6 <USB_EPSetStall+0x54>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e02b      	b.n	8006140 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	db12      	blt.n	8006120 <USB_EPSetStall+0xae>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800611e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800613e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d128      	bne.n	80061ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006186:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	791b      	ldrb	r3, [r3, #4]
 800618c:	2b03      	cmp	r3, #3
 800618e:	d003      	beq.n	8006198 <USB_EPClearStall+0x4c>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	791b      	ldrb	r3, [r3, #4]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d138      	bne.n	800620a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e027      	b.n	800620a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	791b      	ldrb	r3, [r3, #4]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d003      	beq.n	80061ea <USB_EPClearStall+0x9e>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d10f      	bne.n	800620a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006208:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006234:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006238:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006250:	4313      	orrs	r3, r2
 8006252:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628e:	f023 0302 	bic.w	r3, r3, #2
 8006292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ce:	f043 0302 	orr.w	r3, r3, #2
 80062d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4013      	ands	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	0c1b      	lsrs	r3, r3, #16
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	b29b      	uxth	r3, r3
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006396:	68bb      	ldr	r3, [r7, #8]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0301 	and.w	r3, r3, #1
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006434:	f023 0307 	bic.w	r3, r3, #7
 8006438:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
	...

0800645c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	333c      	adds	r3, #60	; 0x3c
 800646e:	3304      	adds	r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <USB_EP0_OutStart+0x8c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d90a      	bls.n	8006492 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800648c:	d101      	bne.n	8006492 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e024      	b.n	80064dc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	f043 0318 	orr.w	r3, r3, #24
 80064c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064d8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	4f54300a 	.word	0x4f54300a

080064ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a12      	ldr	r2, [pc, #72]	; (800654c <USB_CoreReset+0x60>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e01b      	b.n	8006542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	daf2      	bge.n	80064f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f043 0201 	orr.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <USB_CoreReset+0x60>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d901      	bls.n	8006534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e006      	b.n	8006542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d0f0      	beq.n	8006522 <USB_CoreReset+0x36>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	00030d40 	.word	0x00030d40

08006550 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7c1b      	ldrb	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d115      	bne.n	8006594 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656c:	2202      	movs	r2, #2
 800656e:	2181      	movs	r1, #129	; 0x81
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 ff22 	bl	80083ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800657c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006580:	2202      	movs	r2, #2
 8006582:	2101      	movs	r1, #1
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 ff18 	bl	80083ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006592:	e012      	b.n	80065ba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	2202      	movs	r2, #2
 8006598:	2181      	movs	r1, #129	; 0x81
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 ff0d 	bl	80083ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	2202      	movs	r2, #2
 80065aa:	2101      	movs	r1, #1
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 ff04 	bl	80083ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ba:	2308      	movs	r3, #8
 80065bc:	2203      	movs	r2, #3
 80065be:	2182      	movs	r1, #130	; 0x82
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fefa 	bl	80083ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d0:	f002 f81a 	bl	8008608 <USBD_static_malloc>
 80065d4:	4602      	mov	r2, r0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
 80065ea:	e026      	b.n	800663a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7c1b      	ldrb	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800661c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006620:	2101      	movs	r1, #1
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 ffb9 	bl	800859a <USBD_LL_PrepareReceive>
 8006628:	e007      	b.n	800663a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006630:	2340      	movs	r3, #64	; 0x40
 8006632:	2101      	movs	r1, #1
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 ffb0 	bl	800859a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006654:	2181      	movs	r1, #129	; 0x81
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fed5 	bl	8008406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fece 	bl	8008406 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006672:	2182      	movs	r1, #130	; 0x82
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fec6 	bl	8008406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669a:	4618      	mov	r0, r3
 800669c:	f001 ffc0 	bl	8008620 <USBD_static_free>
    pdev->pClassData = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d039      	beq.n	8006750 <USBD_CDC_Setup+0x9e>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d17f      	bne.n	80067e0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	88db      	ldrh	r3, [r3, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d029      	beq.n	800673c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da11      	bge.n	8006716 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80066fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	88d2      	ldrh	r2, [r2, #6]
 8006704:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006706:	6939      	ldr	r1, [r7, #16]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	88db      	ldrh	r3, [r3, #6]
 800670c:	461a      	mov	r2, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fa41 	bl	8007b96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006714:	e06b      	b.n	80067ee <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785a      	ldrb	r2, [r3, #1]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	88db      	ldrh	r3, [r3, #6]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88db      	ldrh	r3, [r3, #6]
 8006732:	461a      	mov	r2, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 fa5c 	bl	8007bf2 <USBD_CtlPrepareRx>
      break;
 800673a:	e058      	b.n	80067ee <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	7850      	ldrb	r0, [r2, #1]
 8006748:	2200      	movs	r2, #0
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	4798      	blx	r3
      break;
 800674e:	e04e      	b.n	80067ee <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b0b      	cmp	r3, #11
 8006756:	d02e      	beq.n	80067b6 <USBD_CDC_Setup+0x104>
 8006758:	2b0b      	cmp	r3, #11
 800675a:	dc38      	bgt.n	80067ce <USBD_CDC_Setup+0x11c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <USBD_CDC_Setup+0xb4>
 8006760:	2b0a      	cmp	r3, #10
 8006762:	d014      	beq.n	800678e <USBD_CDC_Setup+0xdc>
 8006764:	e033      	b.n	80067ce <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676c:	2b03      	cmp	r3, #3
 800676e:	d107      	bne.n	8006780 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006770:	f107 030c 	add.w	r3, r7, #12
 8006774:	2202      	movs	r2, #2
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fa0c 	bl	8007b96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800677e:	e02e      	b.n	80067de <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 f99d 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006788:	2302      	movs	r3, #2
 800678a:	75fb      	strb	r3, [r7, #23]
          break;
 800678c:	e027      	b.n	80067de <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006794:	2b03      	cmp	r3, #3
 8006796:	d107      	bne.n	80067a8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006798:	f107 030f 	add.w	r3, r7, #15
 800679c:	2201      	movs	r2, #1
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f9f8 	bl	8007b96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067a6:	e01a      	b.n	80067de <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f989 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067b0:	2302      	movs	r3, #2
 80067b2:	75fb      	strb	r3, [r7, #23]
          break;
 80067b4:	e013      	b.n	80067de <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d00d      	beq.n	80067dc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 f97d 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067c8:	2302      	movs	r3, #2
 80067ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067cc:	e006      	b.n	80067dc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f976 	bl	8007ac2 <USBD_CtlError>
          ret = USBD_FAIL;
 80067d6:	2302      	movs	r3, #2
 80067d8:	75fb      	strb	r3, [r7, #23]
          break;
 80067da:	e000      	b.n	80067de <USBD_CDC_Setup+0x12c>
          break;
 80067dc:	bf00      	nop
      }
      break;
 80067de:	e006      	b.n	80067ee <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 f96d 	bl	8007ac2 <USBD_CtlError>
      ret = USBD_FAIL;
 80067e8:	2302      	movs	r3, #2
 80067ea:	75fb      	strb	r3, [r7, #23]
      break;
 80067ec:	bf00      	nop
  }

  return ret;
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006812:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d03a      	beq.n	8006894 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	331c      	adds	r3, #28
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d029      	beq.n	8006888 <USBD_CDC_DataIn+0x90>
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	331c      	adds	r3, #28
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	78f9      	ldrb	r1, [r7, #3]
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	460b      	mov	r3, r1
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	440b      	add	r3, r1
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4403      	add	r3, r0
 8006854:	3344      	adds	r3, #68	; 0x44
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	fbb2 f1f3 	udiv	r1, r2, r3
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d110      	bne.n	8006888 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	331c      	adds	r3, #28
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800687a:	78f9      	ldrb	r1, [r7, #3]
 800687c:	2300      	movs	r3, #0
 800687e:	2200      	movs	r2, #0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fe67 	bl	8008554 <USBD_LL_Transmit>
 8006886:	e003      	b.n	8006890 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fe92 	bl	80085e0 <USBD_LL_GetRxDataSize>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068e2:	4611      	mov	r1, r2
 80068e4:	4798      	blx	r3

    return USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800690a:	2b00      	cmp	r3, #0
 800690c:	d015      	beq.n	800693a <USBD_CDC_EP0_RxReady+0x46>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006914:	2bff      	cmp	r3, #255	; 0xff
 8006916:	d010      	beq.n	800693a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006926:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800692e:	b292      	uxth	r2, r2
 8006930:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2243      	movs	r2, #67	; 0x43
 8006950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006952:	4b03      	ldr	r3, [pc, #12]	; (8006960 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000094 	.word	0x20000094

08006964 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2243      	movs	r2, #67	; 0x43
 8006970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20000050 	.word	0x20000050

08006984 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2243      	movs	r2, #67	; 0x43
 8006990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	200000d8 	.word	0x200000d8

080069a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	220a      	movs	r2, #10
 80069b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069b2:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	2000000c 	.word	0x2000000c

080069c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069ce:	2302      	movs	r3, #2
 80069d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01c      	beq.n	8006a9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d115      	bne.n	8006a98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2181      	movs	r1, #129	; 0x81
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fd60 	bl	8008554 <USBD_LL_Transmit>

      return USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e002      	b.n	8006a9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7c1b      	ldrb	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fd60 	bl	800859a <USBD_LL_PrepareReceive>
 8006ada:	e007      	b.n	8006aec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fd57 	bl	800859a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e000      	b.n	8006af2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006af0:	2302      	movs	r3, #2
  }
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	4613      	mov	r3, r2
 8006b06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e01a      	b.n	8006b48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	79fa      	ldrb	r2, [r7, #7]
 8006b3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f001 fbdb 	bl	80082fc <USBD_LL_Init>

  return USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e001      	b.n	8006b76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fbfa 	bl	8008384 <USBD_LL_Start>

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr

08006bae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	4611      	mov	r1, r2
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 ff10 	bl	8007a4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d016      	beq.n	8006c7c <USBD_LL_SetupStage+0x6a>
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d81c      	bhi.n	8006c8c <USBD_LL_SetupStage+0x7a>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USBD_LL_SetupStage+0x4a>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d008      	beq.n	8006c6c <USBD_LL_SetupStage+0x5a>
 8006c5a:	e017      	b.n	8006c8c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa03 	bl	8007070 <USBD_StdDevReq>
      break;
 8006c6a:	e01a      	b.n	8006ca2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa65 	bl	8007144 <USBD_StdItfReq>
      break;
 8006c7a:	e012      	b.n	8006ca2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 faa5 	bl	80071d4 <USBD_StdEPReq>
      break;
 8006c8a:	e00a      	b.n	8006ca2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fbd2 	bl	8008444 <USBD_LL_StallEP>
      break;
 8006ca0:	bf00      	nop
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d14b      	bne.n	8006d58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cc6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d134      	bne.n	8006d3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d919      	bls.n	8006d12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d203      	bcs.n	8006d00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	e002      	b.n	8006d06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 ff8f 	bl	8007c2e <USBD_CtlContinueRx>
 8006d10:	e038      	b.n	8006d84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d105      	bne.n	8006d34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 ff8c 	bl	8007c52 <USBD_CtlSendStatus>
 8006d3a:	e023      	b.n	8006d84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d11e      	bne.n	8006d84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d4e:	2100      	movs	r1, #0
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f001 fb77 	bl	8008444 <USBD_LL_StallEP>
 8006d56:	e015      	b.n	8006d84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d108      	bne.n	8006d80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	7afa      	ldrb	r2, [r7, #11]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	4798      	blx	r3
 8006d7e:	e001      	b.n	8006d84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	e000      	b.n	8006d86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	460b      	mov	r3, r1
 8006d98:	607a      	str	r2, [r7, #4]
 8006d9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d17f      	bne.n	8006ea2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3314      	adds	r3, #20
 8006da6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d15c      	bne.n	8006e6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d915      	bls.n	8006dea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fef9 	bl	8007bce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f001 fbd9 	bl	800859a <USBD_LL_PrepareReceive>
 8006de8:	e04e      	b.n	8006e88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6912      	ldr	r2, [r2, #16]
 8006df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006df6:	fb01 f202 	mul.w	r2, r1, r2
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11c      	bne.n	8006e3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d316      	bcc.n	8006e3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d20f      	bcs.n	8006e3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fed5 	bl	8007bce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f001 fbb1 	bl	800859a <USBD_LL_PrepareReceive>
 8006e38:	e026      	b.n	8006e88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d105      	bne.n	8006e5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f001 faf0 	bl	8008444 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 ff07 	bl	8007c78 <USBD_CtlReceiveStatus>
 8006e6a:	e00d      	b.n	8006e88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d004      	beq.n	8006e80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f001 fade 	bl	8008444 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d11d      	bne.n	8006ece <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff fe81 	bl	8006b9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ea0:	e015      	b.n	8006ece <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d108      	bne.n	8006eca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	7afa      	ldrb	r2, [r7, #11]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	4798      	blx	r3
 8006ec8:	e001      	b.n	8006ece <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e000      	b.n	8006ed0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ee0:	2340      	movs	r3, #64	; 0x40
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fa67 	bl	80083ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2240      	movs	r2, #64	; 0x40
 8006ef8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006efc:	2340      	movs	r3, #64	; 0x40
 8006efe:	2200      	movs	r2, #0
 8006f00:	2180      	movs	r1, #128	; 0x80
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fa59 	bl	80083ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2240      	movs	r2, #64	; 0x40
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6852      	ldr	r2, [r2, #4]
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d105      	bne.n	8006fbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d10b      	bne.n	8006ff4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6852      	ldr	r2, [r2, #4]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	4611      	mov	r1, r2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d005      	beq.n	8007096 <USBD_StdDevReq+0x26>
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d84f      	bhi.n	800712e <USBD_StdDevReq+0xbe>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <USBD_StdDevReq+0x36>
 8007092:	2b20      	cmp	r3, #32
 8007094:	d14b      	bne.n	800712e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
      break;
 80070a4:	e048      	b.n	8007138 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d839      	bhi.n	8007122 <USBD_StdDevReq+0xb2>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <USBD_StdDevReq+0x44>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	08007105 	.word	0x08007105
 80070b8:	08007119 	.word	0x08007119
 80070bc:	08007123 	.word	0x08007123
 80070c0:	0800710f 	.word	0x0800710f
 80070c4:	08007123 	.word	0x08007123
 80070c8:	080070e7 	.word	0x080070e7
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	08007123 	.word	0x08007123
 80070d4:	080070fb 	.word	0x080070fb
 80070d8:	080070f1 	.word	0x080070f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9dc 	bl	800749c <USBD_GetDescriptor>
          break;
 80070e4:	e022      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb3f 	bl	800776c <USBD_SetAddress>
          break;
 80070ee:	e01d      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb7e 	bl	80077f4 <USBD_SetConfig>
          break;
 80070f8:	e018      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc07 	bl	8007910 <USBD_GetConfig>
          break;
 8007102:	e013      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fc37 	bl	800797a <USBD_GetStatus>
          break;
 800710c:	e00e      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc65 	bl	80079e0 <USBD_SetFeature>
          break;
 8007116:	e009      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fc74 	bl	8007a08 <USBD_ClrFeature>
          break;
 8007120:	e004      	b.n	800712c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fccc 	bl	8007ac2 <USBD_CtlError>
          break;
 800712a:	bf00      	nop
      }
      break;
 800712c:	e004      	b.n	8007138 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcc6 	bl	8007ac2 <USBD_CtlError>
      break;
 8007136:	bf00      	nop
  }

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop

08007144 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d005      	beq.n	800716a <USBD_StdItfReq+0x26>
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d82e      	bhi.n	80071c0 <USBD_StdItfReq+0x7c>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <USBD_StdItfReq+0x26>
 8007166:	2b20      	cmp	r3, #32
 8007168:	d12a      	bne.n	80071c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	3b01      	subs	r3, #1
 8007172:	2b02      	cmp	r3, #2
 8007174:	d81d      	bhi.n	80071b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	d813      	bhi.n	80071a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d110      	bne.n	80071bc <USBD_StdItfReq+0x78>
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd56 	bl	8007c52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071a6:	e009      	b.n	80071bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fc89 	bl	8007ac2 <USBD_CtlError>
          break;
 80071b0:	e004      	b.n	80071bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc84 	bl	8007ac2 <USBD_CtlError>
          break;
 80071ba:	e000      	b.n	80071be <USBD_StdItfReq+0x7a>
          break;
 80071bc:	bf00      	nop
      }
      break;
 80071be:	e004      	b.n	80071ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc7d 	bl	8007ac2 <USBD_CtlError>
      break;
 80071c8:	bf00      	nop
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	889b      	ldrh	r3, [r3, #4]
 80071e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d007      	beq.n	8007204 <USBD_StdEPReq+0x30>
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	f200 8146 	bhi.w	8007486 <USBD_StdEPReq+0x2b2>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <USBD_StdEPReq+0x40>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	f040 8141 	bne.w	8007486 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      break;
 8007212:	e13d      	b.n	8007490 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800721c:	2b20      	cmp	r3, #32
 800721e:	d10a      	bne.n	8007236 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	e12d      	b.n	8007492 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d007      	beq.n	800724e <USBD_StdEPReq+0x7a>
 800723e:	2b03      	cmp	r3, #3
 8007240:	f300 811b 	bgt.w	800747a <USBD_StdEPReq+0x2a6>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d072      	beq.n	800732e <USBD_StdEPReq+0x15a>
 8007248:	2b01      	cmp	r3, #1
 800724a:	d03a      	beq.n	80072c2 <USBD_StdEPReq+0xee>
 800724c:	e115      	b.n	800747a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007254:	2b02      	cmp	r3, #2
 8007256:	d002      	beq.n	800725e <USBD_StdEPReq+0x8a>
 8007258:	2b03      	cmp	r3, #3
 800725a:	d015      	beq.n	8007288 <USBD_StdEPReq+0xb4>
 800725c:	e02b      	b.n	80072b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <USBD_StdEPReq+0xaa>
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d009      	beq.n	800727e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f8e8 	bl	8008444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007274:	2180      	movs	r1, #128	; 0x80
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f8e4 	bl	8008444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800727c:	e020      	b.n	80072c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc1e 	bl	8007ac2 <USBD_CtlError>
              break;
 8007286:	e01b      	b.n	80072c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	885b      	ldrh	r3, [r3, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10e      	bne.n	80072ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <USBD_StdEPReq+0xda>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d008      	beq.n	80072ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	88db      	ldrh	r3, [r3, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f8cb 	bl	8008444 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fccf 	bl	8007c52 <USBD_CtlSendStatus>

              break;
 80072b4:	e004      	b.n	80072c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc02 	bl	8007ac2 <USBD_CtlError>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e0e0      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d002      	beq.n	80072d2 <USBD_StdEPReq+0xfe>
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d015      	beq.n	80072fc <USBD_StdEPReq+0x128>
 80072d0:	e026      	b.n	8007320 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <USBD_StdEPReq+0x11e>
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b80      	cmp	r3, #128	; 0x80
 80072dc:	d009      	beq.n	80072f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f8ae 	bl	8008444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072e8:	2180      	movs	r1, #128	; 0x80
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f8aa 	bl	8008444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072f0:	e01c      	b.n	800732c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fbe4 	bl	8007ac2 <USBD_CtlError>
              break;
 80072fa:	e017      	b.n	800732c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	885b      	ldrh	r3, [r3, #2]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d112      	bne.n	800732a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 f8b5 	bl	8008482 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc9a 	bl	8007c52 <USBD_CtlSendStatus>
              }
              break;
 800731e:	e004      	b.n	800732a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbcd 	bl	8007ac2 <USBD_CtlError>
              break;
 8007328:	e000      	b.n	800732c <USBD_StdEPReq+0x158>
              break;
 800732a:	bf00      	nop
          }
          break;
 800732c:	e0aa      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007334:	2b02      	cmp	r3, #2
 8007336:	d002      	beq.n	800733e <USBD_StdEPReq+0x16a>
 8007338:	2b03      	cmp	r3, #3
 800733a:	d032      	beq.n	80073a2 <USBD_StdEPReq+0x1ce>
 800733c:	e097      	b.n	800746e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <USBD_StdEPReq+0x180>
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b80      	cmp	r3, #128	; 0x80
 8007348:	d004      	beq.n	8007354 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fbb8 	bl	8007ac2 <USBD_CtlError>
                break;
 8007352:	e091      	b.n	8007478 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da0b      	bge.n	8007374 <USBD_StdEPReq+0x1a0>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3310      	adds	r3, #16
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	3304      	adds	r3, #4
 8007372:	e00b      	b.n	800738c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	3304      	adds	r3, #4
 800738c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2202      	movs	r2, #2
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fbfb 	bl	8007b96 <USBD_CtlSendData>
              break;
 80073a0:	e06a      	b.n	8007478 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da11      	bge.n	80073ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 020f 	and.w	r2, r3, #15
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3318      	adds	r3, #24
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d117      	bne.n	80073f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb7b 	bl	8007ac2 <USBD_CtlError>
                  break;
 80073cc:	e054      	b.n	8007478 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	f003 020f 	and.w	r2, r3, #15
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb68 	bl	8007ac2 <USBD_CtlError>
                  break;
 80073f2:	e041      	b.n	8007478 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da0b      	bge.n	8007414 <USBD_StdEPReq+0x240>
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	3310      	adds	r3, #16
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	3304      	adds	r3, #4
 8007412:	e00b      	b.n	800742c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	3304      	adds	r3, #4
 800742c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <USBD_StdEPReq+0x266>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d103      	bne.n	8007442 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e00e      	b.n	8007460 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f83a 	bl	80084c0 <USBD_LL_IsStallEP>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2201      	movs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e002      	b.n	8007460 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb95 	bl	8007b96 <USBD_CtlSendData>
              break;
 800746c:	e004      	b.n	8007478 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb26 	bl	8007ac2 <USBD_CtlError>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e004      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb20 	bl	8007ac2 <USBD_CtlError>
          break;
 8007482:	bf00      	nop
      }
      break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb1a 	bl	8007ac2 <USBD_CtlError>
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	2b06      	cmp	r3, #6
 80074be:	f200 8128 	bhi.w	8007712 <USBD_GetDescriptor+0x276>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <USBD_GetDescriptor+0x2c>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	0800753d 	.word	0x0800753d
 80074d4:	08007713 	.word	0x08007713
 80074d8:	08007713 	.word	0x08007713
 80074dc:	080076b3 	.word	0x080076b3
 80074e0:	080076df 	.word	0x080076df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
      break;
 80074fa:	e112      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7c1b      	ldrb	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f107 0208 	add.w	r2, r7, #8
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800751e:	e100      	b.n	8007722 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f107 0208 	add.w	r2, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	2202      	movs	r2, #2
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e0f2      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b05      	cmp	r3, #5
 8007544:	f200 80ac 	bhi.w	80076a0 <USBD_GetDescriptor+0x204>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBD_GetDescriptor+0xb4>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007569 	.word	0x08007569
 8007554:	0800759d 	.word	0x0800759d
 8007558:	080075d1 	.word	0x080075d1
 800755c:	08007605 	.word	0x08007605
 8007560:	08007639 	.word	0x08007639
 8007564:	0800766d 	.word	0x0800766d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e091      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa97 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e089      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e077      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa7d 	bl	8007ac2 <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e06f      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e05d      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa63 	bl	8007ac2 <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e055      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e043      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa49 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e03b      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e029      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa2f 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e021      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e00f      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa15 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e007      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa0d 	bl	8007ac2 <USBD_CtlError>
          err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076ae:	e038      	b.n	8007722 <USBD_GetDescriptor+0x286>
 80076b0:	e037      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7c1b      	ldrb	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c2:	f107 0208 	add.w	r2, r7, #8
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076cc:	e029      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9f6 	bl	8007ac2 <USBD_CtlError>
        err++;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	3301      	adds	r3, #1
 80076da:	72fb      	strb	r3, [r7, #11]
      break;
 80076dc:	e021      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10d      	bne.n	8007702 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f107 0208 	add.w	r2, r7, #8
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
 80076f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	2207      	movs	r2, #7
 80076fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007700:	e00f      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f9dc 	bl	8007ac2 <USBD_CtlError>
        err++;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	3301      	adds	r3, #1
 800770e:	72fb      	strb	r3, [r7, #11]
      break;
 8007710:	e007      	b.n	8007722 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9d4 	bl	8007ac2 <USBD_CtlError>
      err++;
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	3301      	adds	r3, #1
 800771e:	72fb      	strb	r3, [r7, #11]
      break;
 8007720:	bf00      	nop
  }

  if (err != 0U)
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11c      	bne.n	8007762 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <USBD_GetDescriptor+0x2b6>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	88db      	ldrh	r3, [r3, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88da      	ldrh	r2, [r3, #6]
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	4293      	cmp	r3, r2
 800773e:	bf28      	it	cs
 8007740:	4613      	movcs	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	461a      	mov	r2, r3
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa22 	bl	8007b96 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	88db      	ldrh	r3, [r3, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa79 	bl	8007c52 <USBD_CtlSendStatus>
 8007760:	e000      	b.n	8007764 <USBD_GetDescriptor+0x2c8>
    return;
 8007762:	bf00      	nop
    }
  }
}
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop

0800776c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	889b      	ldrh	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d130      	bne.n	80077e0 <USBD_SetAddress+0x74>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12c      	bne.n	80077e0 <USBD_SetAddress+0x74>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	2b7f      	cmp	r3, #127	; 0x7f
 800778c:	d828      	bhi.n	80077e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007798:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d104      	bne.n	80077ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f98b 	bl	8007ac2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	e01d      	b.n	80077ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7bfa      	ldrb	r2, [r7, #15]
 80077b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 feab 	bl	8008516 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa46 	bl	8007c52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d4:	e009      	b.n	80077ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	e004      	b.n	80077ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f96d 	bl	8007ac2 <USBD_CtlError>
  }
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	4b41      	ldr	r3, [pc, #260]	; (800790c <USBD_SetConfig+0x118>)
 8007806:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007808:	4b40      	ldr	r3, [pc, #256]	; (800790c <USBD_SetConfig+0x118>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d904      	bls.n	800781a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f955 	bl	8007ac2 <USBD_CtlError>
 8007818:	e075      	b.n	8007906 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007820:	2b02      	cmp	r3, #2
 8007822:	d002      	beq.n	800782a <USBD_SetConfig+0x36>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d023      	beq.n	8007870 <USBD_SetConfig+0x7c>
 8007828:	e062      	b.n	80078f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800782a:	4b38      	ldr	r3, [pc, #224]	; (800790c <USBD_SetConfig+0x118>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01a      	beq.n	8007868 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <USBD_SetConfig+0x118>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007844:	4b31      	ldr	r3, [pc, #196]	; (800790c <USBD_SetConfig+0x118>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff f9af 	bl	8006bae <USBD_SetClassConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b02      	cmp	r3, #2
 8007854:	d104      	bne.n	8007860 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f932 	bl	8007ac2 <USBD_CtlError>
            return;
 800785e:	e052      	b.n	8007906 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9f6 	bl	8007c52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007866:	e04e      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9f2 	bl	8007c52 <USBD_CtlSendStatus>
        break;
 800786e:	e04a      	b.n	8007906 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007870:	4b26      	ldr	r3, [pc, #152]	; (800790c <USBD_SetConfig+0x118>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d112      	bne.n	800789e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007880:	4b22      	ldr	r3, [pc, #136]	; (800790c <USBD_SetConfig+0x118>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800788a:	4b20      	ldr	r3, [pc, #128]	; (800790c <USBD_SetConfig+0x118>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff f9ab 	bl	8006bec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9db 	bl	8007c52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800789c:	e033      	b.n	8007906 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800789e:	4b1b      	ldr	r3, [pc, #108]	; (800790c <USBD_SetConfig+0x118>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d01d      	beq.n	80078e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff f999 	bl	8006bec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <USBD_SetConfig+0x118>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078c4:	4b11      	ldr	r3, [pc, #68]	; (800790c <USBD_SetConfig+0x118>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f96f 	bl	8006bae <USBD_SetClassConfig>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d104      	bne.n	80078e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8f2 	bl	8007ac2 <USBD_CtlError>
            return;
 80078de:	e012      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9b6 	bl	8007c52 <USBD_CtlSendStatus>
        break;
 80078e6:	e00e      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f9b2 	bl	8007c52 <USBD_CtlSendStatus>
        break;
 80078ee:	e00a      	b.n	8007906 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8e5 	bl	8007ac2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <USBD_SetConfig+0x118>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff f974 	bl	8006bec <USBD_ClrClassConfig>
        break;
 8007904:	bf00      	nop
    }
  }
}
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000340 	.word	0x20000340

08007910 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d004      	beq.n	800792c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8cc 	bl	8007ac2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800792a:	e022      	b.n	8007972 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	2b02      	cmp	r3, #2
 8007934:	dc02      	bgt.n	800793c <USBD_GetConfig+0x2c>
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc03      	bgt.n	8007942 <USBD_GetConfig+0x32>
 800793a:	e015      	b.n	8007968 <USBD_GetConfig+0x58>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d00b      	beq.n	8007958 <USBD_GetConfig+0x48>
 8007940:	e012      	b.n	8007968 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3308      	adds	r3, #8
 800794c:	2201      	movs	r2, #1
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f920 	bl	8007b96 <USBD_CtlSendData>
        break;
 8007956:	e00c      	b.n	8007972 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	2201      	movs	r2, #1
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f918 	bl	8007b96 <USBD_CtlSendData>
        break;
 8007966:	e004      	b.n	8007972 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8a9 	bl	8007ac2 <USBD_CtlError>
        break;
 8007970:	bf00      	nop
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798a:	3b01      	subs	r3, #1
 800798c:	2b02      	cmp	r3, #2
 800798e:	d81e      	bhi.n	80079ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d004      	beq.n	80079a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f891 	bl	8007ac2 <USBD_CtlError>
        break;
 80079a0:	e01a      	b.n	80079d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f043 0202 	orr.w	r2, r3, #2
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	330c      	adds	r3, #12
 80079c2:	2202      	movs	r2, #2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8e5 	bl	8007b96 <USBD_CtlSendData>
      break;
 80079cc:	e004      	b.n	80079d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f876 	bl	8007ac2 <USBD_CtlError>
      break;
 80079d6:	bf00      	nop
  }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d106      	bne.n	8007a00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f929 	bl	8007c52 <USBD_CtlSendStatus>
  }
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d80b      	bhi.n	8007a36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d10c      	bne.n	8007a40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f90f 	bl	8007c52 <USBD_CtlSendStatus>
      }
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f842 	bl	8007ac2 <USBD_CtlError>
      break;
 8007a3e:	e000      	b.n	8007a42 <USBD_ClrFeature+0x3a>
      break;
 8007a40:	bf00      	nop
  }
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785a      	ldrb	r2, [r3, #1]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3302      	adds	r3, #2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	3303      	adds	r3, #3
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	4413      	add	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	3304      	adds	r3, #4
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	3305      	adds	r3, #5
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	3306      	adds	r3, #6
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	3307      	adds	r3, #7
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	80da      	strh	r2, [r3, #6]

}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007acc:	2180      	movs	r1, #128	; 0x80
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fcb8 	bl	8008444 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fcb4 	bl	8008444 <USBD_LL_StallEP>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d032      	beq.n	8007b60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f834 	bl	8007b68 <USBD_GetLen>
 8007b00:	4603      	mov	r3, r0
 8007b02:	3301      	adds	r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	75fa      	strb	r2, [r7, #23]
 8007b14:	461a      	mov	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4413      	add	r3, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	75fa      	strb	r2, [r7, #23]
 8007b26:	461a      	mov	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b30:	e012      	b.n	8007b58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	60fa      	str	r2, [r7, #12]
 8007b38:	7dfa      	ldrb	r2, [r7, #23]
 8007b3a:	1c51      	adds	r1, r2, #1
 8007b3c:	75f9      	strb	r1, [r7, #23]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	440a      	add	r2, r1
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	75fa      	strb	r2, [r7, #23]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4413      	add	r3, r2
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e8      	bne.n	8007b32 <USBD_GetString+0x4e>
    }
  }
}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b74:	e005      	b.n	8007b82 <USBD_GetLen+0x1a>
  {
    len++;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f5      	bne.n	8007b76 <USBD_GetLen+0xe>
  }

  return len;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fcc8 	bl	8008554 <USBD_LL_Transmit>

  return USBD_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	2100      	movs	r1, #0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fcb6 	bl	8008554 <USBD_LL_Transmit>

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2203      	movs	r2, #3
 8007c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c08:	88fa      	ldrh	r2, [r7, #6]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fcbb 	bl	800859a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	2100      	movs	r1, #0
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fca9 	bl	800859a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c62:	2300      	movs	r3, #0
 8007c64:	2200      	movs	r2, #0
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc73 	bl	8008554 <USBD_LL_Transmit>

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2205      	movs	r2, #5
 8007c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fc83 	bl	800859a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8c2 	bl	8007e38 <CDC_Transmit_FS>
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4912      	ldr	r1, [pc, #72]	; (8007d0c <MX_USB_DEVICE_Init+0x50>)
 8007cc4:	4812      	ldr	r0, [pc, #72]	; (8007d10 <MX_USB_DEVICE_Init+0x54>)
 8007cc6:	f7fe ff18 	bl	8006afa <USBD_Init>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cd0:	f7f9 fb3a 	bl	8001348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cd4:	490f      	ldr	r1, [pc, #60]	; (8007d14 <MX_USB_DEVICE_Init+0x58>)
 8007cd6:	480e      	ldr	r0, [pc, #56]	; (8007d10 <MX_USB_DEVICE_Init+0x54>)
 8007cd8:	f7fe ff3a 	bl	8006b50 <USBD_RegisterClass>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ce2:	f7f9 fb31 	bl	8001348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ce6:	490c      	ldr	r1, [pc, #48]	; (8007d18 <MX_USB_DEVICE_Init+0x5c>)
 8007ce8:	4809      	ldr	r0, [pc, #36]	; (8007d10 <MX_USB_DEVICE_Init+0x54>)
 8007cea:	f7fe fe6b 	bl	80069c4 <USBD_CDC_RegisterInterface>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cf4:	f7f9 fb28 	bl	8001348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <MX_USB_DEVICE_Init+0x54>)
 8007cfa:	f7fe ff42 	bl	8006b82 <USBD_Start>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d04:	f7f9 fb20 	bl	8001348 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d08:	bf00      	nop
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	2000012c 	.word	0x2000012c
 8007d10:	20000344 	.word	0x20000344
 8007d14:	20000018 	.word	0x20000018
 8007d18:	2000011c 	.word	0x2000011c

08007d1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d20:	2200      	movs	r2, #0
 8007d22:	4905      	ldr	r1, [pc, #20]	; (8007d38 <CDC_Init_FS+0x1c>)
 8007d24:	4805      	ldr	r0, [pc, #20]	; (8007d3c <CDC_Init_FS+0x20>)
 8007d26:	f7fe fe63 	bl	80069f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d2a:	4905      	ldr	r1, [pc, #20]	; (8007d40 <CDC_Init_FS+0x24>)
 8007d2c:	4803      	ldr	r0, [pc, #12]	; (8007d3c <CDC_Init_FS+0x20>)
 8007d2e:	f7fe fe78 	bl	8006a22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000a08 	.word	0x20000a08
 8007d3c:	20000344 	.word	0x20000344
 8007d40:	20000608 	.word	0x20000608

08007d44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
	...

08007d54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
 8007d60:	4613      	mov	r3, r2
 8007d62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	2b23      	cmp	r3, #35	; 0x23
 8007d68:	d84a      	bhi.n	8007e00 <CDC_Control_FS+0xac>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <CDC_Control_FS+0x1c>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007e01 	.word	0x08007e01
 8007d74:	08007e01 	.word	0x08007e01
 8007d78:	08007e01 	.word	0x08007e01
 8007d7c:	08007e01 	.word	0x08007e01
 8007d80:	08007e01 	.word	0x08007e01
 8007d84:	08007e01 	.word	0x08007e01
 8007d88:	08007e01 	.word	0x08007e01
 8007d8c:	08007e01 	.word	0x08007e01
 8007d90:	08007e01 	.word	0x08007e01
 8007d94:	08007e01 	.word	0x08007e01
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007e01 	.word	0x08007e01
 8007da0:	08007e01 	.word	0x08007e01
 8007da4:	08007e01 	.word	0x08007e01
 8007da8:	08007e01 	.word	0x08007e01
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007e01 	.word	0x08007e01
 8007db4:	08007e01 	.word	0x08007e01
 8007db8:	08007e01 	.word	0x08007e01
 8007dbc:	08007e01 	.word	0x08007e01
 8007dc0:	08007e01 	.word	0x08007e01
 8007dc4:	08007e01 	.word	0x08007e01
 8007dc8:	08007e01 	.word	0x08007e01
 8007dcc:	08007e01 	.word	0x08007e01
 8007dd0:	08007e01 	.word	0x08007e01
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	08007e01 	.word	0x08007e01
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e01 	.word	0x08007e01
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e01 	.word	0x08007e01
 8007df8:	08007e01 	.word	0x08007e01
 8007dfc:	08007e01 	.word	0x08007e01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e00:	bf00      	nop
  }

  return (USBD_OK);
 8007e02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4805      	ldr	r0, [pc, #20]	; (8007e34 <CDC_Receive_FS+0x24>)
 8007e1e:	f7fe fe00 	bl	8006a22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e22:	4804      	ldr	r0, [pc, #16]	; (8007e34 <CDC_Receive_FS+0x24>)
 8007e24:	f7fe fe3f 	bl	8006aa6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000344 	.word	0x20000344

08007e38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e48:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <CDC_Transmit_FS+0x48>)
 8007e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e00b      	b.n	8007e76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e5e:	887b      	ldrh	r3, [r7, #2]
 8007e60:	461a      	mov	r2, r3
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4806      	ldr	r0, [pc, #24]	; (8007e80 <CDC_Transmit_FS+0x48>)
 8007e66:	f7fe fdc3 	bl	80069f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e6a:	4805      	ldr	r0, [pc, #20]	; (8007e80 <CDC_Transmit_FS+0x48>)
 8007e6c:	f7fe fdec 	bl	8006a48 <USBD_CDC_TransmitPacket>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000344 	.word	0x20000344

08007e84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2212      	movs	r2, #18
 8007e94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e96:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000148 	.word	0x20000148

08007ea8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eba:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	2000015c 	.word	0x2000015c

08007ecc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4907      	ldr	r1, [pc, #28]	; (8007f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee2:	4808      	ldr	r0, [pc, #32]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee4:	f7ff fdfe 	bl	8007ae4 <USBD_GetString>
 8007ee8:	e004      	b.n	8007ef4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4904      	ldr	r1, [pc, #16]	; (8007f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eee:	4805      	ldr	r0, [pc, #20]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef0:	f7ff fdf8 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef4:	4b02      	ldr	r3, [pc, #8]	; (8007f00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000e08 	.word	0x20000e08
 8007f04:	08009060 	.word	0x08009060

08007f08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	4904      	ldr	r1, [pc, #16]	; (8007f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f18:	4804      	ldr	r0, [pc, #16]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f1a:	f7ff fde3 	bl	8007ae4 <USBD_GetString>
  return USBD_StrDesc;
 8007f1e:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000e08 	.word	0x20000e08
 8007f2c:	08009078 	.word	0x08009078

08007f30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	6039      	str	r1, [r7, #0]
 8007f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	221a      	movs	r2, #26
 8007f40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f42:	f000 f843 	bl	8007fcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f46:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000160 	.word	0x20000160

08007f54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4907      	ldr	r1, [pc, #28]	; (8007f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6a:	4808      	ldr	r0, [pc, #32]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f6c:	f7ff fdba 	bl	8007ae4 <USBD_GetString>
 8007f70:	e004      	b.n	8007f7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4904      	ldr	r1, [pc, #16]	; (8007f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f76:	4805      	ldr	r0, [pc, #20]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f78:	f7ff fdb4 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000e08 	.word	0x20000e08
 8007f8c:	0800908c 	.word	0x0800908c

08007f90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4907      	ldr	r1, [pc, #28]	; (8007fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fa6:	4808      	ldr	r0, [pc, #32]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa8:	f7ff fd9c 	bl	8007ae4 <USBD_GetString>
 8007fac:	e004      	b.n	8007fb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fb2:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fb4:	f7ff fd96 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000e08 	.word	0x20000e08
 8007fc8:	08009098 	.word	0x08009098

08007fcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <Get_SerialNum+0x44>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fd8:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <Get_SerialNum+0x48>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <Get_SerialNum+0x4c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	4909      	ldr	r1, [pc, #36]	; (800801c <Get_SerialNum+0x50>)
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f814 	bl	8008024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	4908      	ldr	r1, [pc, #32]	; (8008020 <Get_SerialNum+0x54>)
 8008000:	68b8      	ldr	r0, [r7, #8]
 8008002:	f000 f80f 	bl	8008024 <IntToUnicode>
  }
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	1ffff7e8 	.word	0x1ffff7e8
 8008014:	1ffff7ec 	.word	0x1ffff7ec
 8008018:	1ffff7f0 	.word	0x1ffff7f0
 800801c:	20000162 	.word	0x20000162
 8008020:	20000172 	.word	0x20000172

08008024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
 800803a:	e027      	b.n	800808c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	2b09      	cmp	r3, #9
 8008042:	d80b      	bhi.n	800805c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	0f1b      	lsrs	r3, r3, #28
 8008048:	b2da      	uxtb	r2, r3
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4619      	mov	r1, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	440b      	add	r3, r1
 8008054:	3230      	adds	r2, #48	; 0x30
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e00a      	b.n	8008072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	0f1b      	lsrs	r3, r3, #28
 8008060:	b2da      	uxtb	r2, r3
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	4619      	mov	r1, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	440b      	add	r3, r1
 800806c:	3237      	adds	r2, #55	; 0x37
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	3301      	adds	r3, #1
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	3301      	adds	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
 800808c:	7dfa      	ldrb	r2, [r7, #23]
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	429a      	cmp	r2, r3
 8008092:	d3d3      	bcc.n	800803c <IntToUnicode+0x18>
  }
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr

080080a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a8:	f107 0310 	add.w	r3, r7, #16
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080be:	d12c      	bne.n	800811a <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c0:	4b18      	ldr	r3, [pc, #96]	; (8008124 <HAL_PCD_MspInit+0x84>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	4a17      	ldr	r2, [pc, #92]	; (8008124 <HAL_PCD_MspInit+0x84>)
 80080c6:	f043 0304 	orr.w	r3, r3, #4
 80080ca:	6193      	str	r3, [r2, #24]
 80080cc:	4b15      	ldr	r3, [pc, #84]	; (8008124 <HAL_PCD_MspInit+0x84>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e6:	f107 0310 	add.w	r3, r7, #16
 80080ea:	4619      	mov	r1, r3
 80080ec:	480e      	ldr	r0, [pc, #56]	; (8008128 <HAL_PCD_MspInit+0x88>)
 80080ee:	f7fa f867 	bl	80021c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <HAL_PCD_MspInit+0x84>)
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	4a0b      	ldr	r2, [pc, #44]	; (8008124 <HAL_PCD_MspInit+0x84>)
 80080f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080fc:	6153      	str	r3, [r2, #20]
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <HAL_PCD_MspInit+0x84>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	2043      	movs	r0, #67	; 0x43
 8008110:	f7fa f81f 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008114:	2043      	movs	r0, #67	; 0x43
 8008116:	f7fa f838 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800811a:	bf00      	nop
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	40010800 	.word	0x40010800

0800812c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fd65 	bl	8006c12 <USBD_LL_SetupStage>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	4619      	mov	r1, r3
 800817a:	f7fe fd97 	bl	8006cac <USBD_LL_DataOutStage>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	3348      	adds	r3, #72	; 0x48
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe fdee 	bl	8006d8e <USBD_LL_DataInStage>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fefe 	bl	8006fca <USBD_LL_SOF>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d001      	beq.n	80081ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ea:	f7f9 f8ad 	bl	8001348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe feae 	bl	8006f5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fe67 	bl	8006ed8 <USBD_LL_Reset>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fea8 	bl	8006f78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <HAL_PCD_SuspendCallback+0x48>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	4a03      	ldr	r2, [pc, #12]	; (800825c <HAL_PCD_SuspendCallback+0x48>)
 800824e:	f043 0306 	orr.w	r3, r3, #6
 8008252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fe96 	bl	8006fa0 <USBD_LL_Resume>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe febf 	bl	8007016 <USBD_LL_IsoOUTIncomplete>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fea1 	bl	8006ffe <USBD_LL_IsoINIncomplete>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe feab 	bl	800702e <USBD_LL_DevConnected>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fea7 	bl	8007042 <USBD_LL_DevDisconnected>
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d133      	bne.n	8008374 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800830c:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <USBD_LL_Init+0x84>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <USBD_LL_Init+0x84>)
 8008318:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800831c:	4b18      	ldr	r3, [pc, #96]	; (8008380 <USBD_LL_Init+0x84>)
 800831e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008322:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008324:	4b16      	ldr	r3, [pc, #88]	; (8008380 <USBD_LL_Init+0x84>)
 8008326:	2204      	movs	r2, #4
 8008328:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <USBD_LL_Init+0x84>)
 800832c:	2202      	movs	r2, #2
 800832e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008330:	4b13      	ldr	r3, [pc, #76]	; (8008380 <USBD_LL_Init+0x84>)
 8008332:	2202      	movs	r2, #2
 8008334:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <USBD_LL_Init+0x84>)
 8008338:	2200      	movs	r2, #0
 800833a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <USBD_LL_Init+0x84>)
 800833e:	2200      	movs	r2, #0
 8008340:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008342:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <USBD_LL_Init+0x84>)
 8008344:	2201      	movs	r2, #1
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008348:	480d      	ldr	r0, [pc, #52]	; (8008380 <USBD_LL_Init+0x84>)
 800834a:	f7fa f8ee 	bl	800252a <HAL_PCD_Init>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008354:	f7f8 fff8 	bl	8001348 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	4809      	ldr	r0, [pc, #36]	; (8008380 <USBD_LL_Init+0x84>)
 800835c:	f7fb fa06 	bl	800376c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008360:	2240      	movs	r2, #64	; 0x40
 8008362:	2100      	movs	r1, #0
 8008364:	4806      	ldr	r0, [pc, #24]	; (8008380 <USBD_LL_Init+0x84>)
 8008366:	f7fb f9bb 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800836a:	2280      	movs	r2, #128	; 0x80
 800836c:	2101      	movs	r1, #1
 800836e:	4804      	ldr	r0, [pc, #16]	; (8008380 <USBD_LL_Init+0x84>)
 8008370:	f7fb f9b6 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20001008 	.word	0x20001008

08008384 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa f9e2 	bl	8002764 <HAL_PCD_Start>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f944 	bl	8008634 <USBD_Get_USB_Status>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	461a      	mov	r2, r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	70fb      	strb	r3, [r7, #3]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70bb      	strb	r3, [r7, #2]
 80083d0:	4613      	mov	r3, r2
 80083d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083e2:	78bb      	ldrb	r3, [r7, #2]
 80083e4:	883a      	ldrh	r2, [r7, #0]
 80083e6:	78f9      	ldrb	r1, [r7, #3]
 80083e8:	f7fa fe5b 	bl	80030a2 <HAL_PCD_EP_Open>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f91e 	bl	8008634 <USBD_Get_USB_Status>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f7fa fea4 	bl	8003172 <HAL_PCD_EP_Close>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f8ff 	bl	8008634 <USBD_Get_USB_Status>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800843a:	7bbb      	ldrb	r3, [r7, #14]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7fa ff49 	bl	80032fa <HAL_PCD_EP_SetStall>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f8e0 	bl	8008634 <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fa ff8c 	bl	80033be <HAL_PCD_EP_ClrStall>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f8c1 	bl	8008634 <USBD_Get_USB_Status>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da0b      	bge.n	80084f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	333e      	adds	r3, #62	; 0x3e
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	e00b      	b.n	800850c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084fa:	68f9      	ldr	r1, [r7, #12]
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800850a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7fa fd8f 	bl	8003058 <HAL_PCD_SetAddress>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f877 	bl	8008634 <USBD_Get_USB_Status>
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854a:	7bbb      	ldrb	r3, [r7, #14]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	461a      	mov	r2, r3
 8008560:	460b      	mov	r3, r1
 8008562:	72fb      	strb	r3, [r7, #11]
 8008564:	4613      	mov	r3, r2
 8008566:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008576:	893b      	ldrh	r3, [r7, #8]
 8008578:	7af9      	ldrb	r1, [r7, #11]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	f7fa fe8c 	bl	8003298 <HAL_PCD_EP_Transmit>
 8008580:	4603      	mov	r3, r0
 8008582:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f854 	bl	8008634 <USBD_Get_USB_Status>
 800858c:	4603      	mov	r3, r0
 800858e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008590:	7dbb      	ldrb	r3, [r7, #22]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	461a      	mov	r2, r3
 80085a6:	460b      	mov	r3, r1
 80085a8:	72fb      	strb	r3, [r7, #11]
 80085aa:	4613      	mov	r3, r2
 80085ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	7af9      	ldrb	r1, [r7, #11]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f7fa fe20 	bl	8003206 <HAL_PCD_EP_Receive>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f831 	bl	8008634 <USBD_Get_USB_Status>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fa fe37 	bl	800326a <HAL_PCD_EP_GetRxCount>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <USBD_static_malloc+0x14>)
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr
 800861c:	2000150c 	.word	0x2000150c

08008620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr
	...

08008634 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d817      	bhi.n	8008678 <USBD_Get_USB_Status+0x44>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <USBD_Get_USB_Status+0x1c>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008661 	.word	0x08008661
 8008654:	08008667 	.word	0x08008667
 8008658:	0800866d 	.word	0x0800866d
 800865c:	08008673 	.word	0x08008673
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	e00b      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008666:	2302      	movs	r3, #2
 8008668:	73fb      	strb	r3, [r7, #15]
    break;
 800866a:	e008      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
    break;
 8008670:	e005      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008672:	2302      	movs	r3, #2
 8008674:	73fb      	strb	r3, [r7, #15]
    break;
 8008676:	e002      	b.n	800867e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008678:	2302      	movs	r3, #2
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	bf00      	nop
  }
  return usb_status;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop

0800868c <malloc>:
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <malloc+0xc>)
 800868e:	4601      	mov	r1, r0
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f000 b82b 	b.w	80086ec <_malloc_r>
 8008696:	bf00      	nop
 8008698:	200001c8 	.word	0x200001c8

0800869c <free>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <free+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 b935 	b.w	8008910 <_free_r>
 80086a6:	bf00      	nop
 80086a8:	200001c8 	.word	0x200001c8

080086ac <sbrk_aligned>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0e      	ldr	r6, [pc, #56]	; (80086e8 <sbrk_aligned+0x3c>)
 80086b0:	460c      	mov	r4, r1
 80086b2:	6831      	ldr	r1, [r6, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	b911      	cbnz	r1, 80086be <sbrk_aligned+0x12>
 80086b8:	f000 f8e0 	bl	800887c <_sbrk_r>
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 f8db 	bl	800887c <_sbrk_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d00a      	beq.n	80086e0 <sbrk_aligned+0x34>
 80086ca:	1cc4      	adds	r4, r0, #3
 80086cc:	f024 0403 	bic.w	r4, r4, #3
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d007      	beq.n	80086e4 <sbrk_aligned+0x38>
 80086d4:	1a21      	subs	r1, r4, r0
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 f8d0 	bl	800887c <_sbrk_r>
 80086dc:	3001      	adds	r0, #1
 80086de:	d101      	bne.n	80086e4 <sbrk_aligned+0x38>
 80086e0:	f04f 34ff 	mov.w	r4, #4294967295
 80086e4:	4620      	mov	r0, r4
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	20001730 	.word	0x20001730

080086ec <_malloc_r>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	1ccd      	adds	r5, r1, #3
 80086f2:	f025 0503 	bic.w	r5, r5, #3
 80086f6:	3508      	adds	r5, #8
 80086f8:	2d0c      	cmp	r5, #12
 80086fa:	bf38      	it	cc
 80086fc:	250c      	movcc	r5, #12
 80086fe:	2d00      	cmp	r5, #0
 8008700:	4607      	mov	r7, r0
 8008702:	db01      	blt.n	8008708 <_malloc_r+0x1c>
 8008704:	42a9      	cmp	r1, r5
 8008706:	d905      	bls.n	8008714 <_malloc_r+0x28>
 8008708:	230c      	movs	r3, #12
 800870a:	2600      	movs	r6, #0
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4630      	mov	r0, r6
 8008710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087e8 <_malloc_r+0xfc>
 8008718:	f000 f868 	bl	80087ec <__malloc_lock>
 800871c:	f8d8 3000 	ldr.w	r3, [r8]
 8008720:	461c      	mov	r4, r3
 8008722:	bb5c      	cbnz	r4, 800877c <_malloc_r+0x90>
 8008724:	4629      	mov	r1, r5
 8008726:	4638      	mov	r0, r7
 8008728:	f7ff ffc0 	bl	80086ac <sbrk_aligned>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	4604      	mov	r4, r0
 8008730:	d155      	bne.n	80087de <_malloc_r+0xf2>
 8008732:	f8d8 4000 	ldr.w	r4, [r8]
 8008736:	4626      	mov	r6, r4
 8008738:	2e00      	cmp	r6, #0
 800873a:	d145      	bne.n	80087c8 <_malloc_r+0xdc>
 800873c:	2c00      	cmp	r4, #0
 800873e:	d048      	beq.n	80087d2 <_malloc_r+0xe6>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	4631      	mov	r1, r6
 8008744:	4638      	mov	r0, r7
 8008746:	eb04 0903 	add.w	r9, r4, r3
 800874a:	f000 f897 	bl	800887c <_sbrk_r>
 800874e:	4581      	cmp	r9, r0
 8008750:	d13f      	bne.n	80087d2 <_malloc_r+0xe6>
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	4638      	mov	r0, r7
 8008756:	1a6d      	subs	r5, r5, r1
 8008758:	4629      	mov	r1, r5
 800875a:	f7ff ffa7 	bl	80086ac <sbrk_aligned>
 800875e:	3001      	adds	r0, #1
 8008760:	d037      	beq.n	80087d2 <_malloc_r+0xe6>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	442b      	add	r3, r5
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	f8d8 3000 	ldr.w	r3, [r8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d038      	beq.n	80087e2 <_malloc_r+0xf6>
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	42a2      	cmp	r2, r4
 8008774:	d12b      	bne.n	80087ce <_malloc_r+0xe2>
 8008776:	2200      	movs	r2, #0
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	e00f      	b.n	800879c <_malloc_r+0xb0>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	1b52      	subs	r2, r2, r5
 8008780:	d41f      	bmi.n	80087c2 <_malloc_r+0xd6>
 8008782:	2a0b      	cmp	r2, #11
 8008784:	d917      	bls.n	80087b6 <_malloc_r+0xca>
 8008786:	1961      	adds	r1, r4, r5
 8008788:	42a3      	cmp	r3, r4
 800878a:	6025      	str	r5, [r4, #0]
 800878c:	bf18      	it	ne
 800878e:	6059      	strne	r1, [r3, #4]
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	bf08      	it	eq
 8008794:	f8c8 1000 	streq.w	r1, [r8]
 8008798:	5162      	str	r2, [r4, r5]
 800879a:	604b      	str	r3, [r1, #4]
 800879c:	4638      	mov	r0, r7
 800879e:	f104 060b 	add.w	r6, r4, #11
 80087a2:	f000 f829 	bl	80087f8 <__malloc_unlock>
 80087a6:	f026 0607 	bic.w	r6, r6, #7
 80087aa:	1d23      	adds	r3, r4, #4
 80087ac:	1af2      	subs	r2, r6, r3
 80087ae:	d0ae      	beq.n	800870e <_malloc_r+0x22>
 80087b0:	1b9b      	subs	r3, r3, r6
 80087b2:	50a3      	str	r3, [r4, r2]
 80087b4:	e7ab      	b.n	800870e <_malloc_r+0x22>
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	6862      	ldr	r2, [r4, #4]
 80087ba:	d1dd      	bne.n	8008778 <_malloc_r+0x8c>
 80087bc:	f8c8 2000 	str.w	r2, [r8]
 80087c0:	e7ec      	b.n	800879c <_malloc_r+0xb0>
 80087c2:	4623      	mov	r3, r4
 80087c4:	6864      	ldr	r4, [r4, #4]
 80087c6:	e7ac      	b.n	8008722 <_malloc_r+0x36>
 80087c8:	4634      	mov	r4, r6
 80087ca:	6876      	ldr	r6, [r6, #4]
 80087cc:	e7b4      	b.n	8008738 <_malloc_r+0x4c>
 80087ce:	4613      	mov	r3, r2
 80087d0:	e7cc      	b.n	800876c <_malloc_r+0x80>
 80087d2:	230c      	movs	r3, #12
 80087d4:	4638      	mov	r0, r7
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	f000 f80e 	bl	80087f8 <__malloc_unlock>
 80087dc:	e797      	b.n	800870e <_malloc_r+0x22>
 80087de:	6025      	str	r5, [r4, #0]
 80087e0:	e7dc      	b.n	800879c <_malloc_r+0xb0>
 80087e2:	605b      	str	r3, [r3, #4]
 80087e4:	deff      	udf	#255	; 0xff
 80087e6:	bf00      	nop
 80087e8:	2000172c 	.word	0x2000172c

080087ec <__malloc_lock>:
 80087ec:	4801      	ldr	r0, [pc, #4]	; (80087f4 <__malloc_lock+0x8>)
 80087ee:	f000 b87f 	b.w	80088f0 <__retarget_lock_acquire_recursive>
 80087f2:	bf00      	nop
 80087f4:	20001870 	.word	0x20001870

080087f8 <__malloc_unlock>:
 80087f8:	4801      	ldr	r0, [pc, #4]	; (8008800 <__malloc_unlock+0x8>)
 80087fa:	f000 b87a 	b.w	80088f2 <__retarget_lock_release_recursive>
 80087fe:	bf00      	nop
 8008800:	20001870 	.word	0x20001870

08008804 <siprintf>:
 8008804:	b40e      	push	{r1, r2, r3}
 8008806:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800880a:	b500      	push	{lr}
 800880c:	b09c      	sub	sp, #112	; 0x70
 800880e:	ab1d      	add	r3, sp, #116	; 0x74
 8008810:	9002      	str	r0, [sp, #8]
 8008812:	9006      	str	r0, [sp, #24]
 8008814:	9107      	str	r1, [sp, #28]
 8008816:	9104      	str	r1, [sp, #16]
 8008818:	4808      	ldr	r0, [pc, #32]	; (800883c <siprintf+0x38>)
 800881a:	4909      	ldr	r1, [pc, #36]	; (8008840 <siprintf+0x3c>)
 800881c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008820:	9105      	str	r1, [sp, #20]
 8008822:	6800      	ldr	r0, [r0, #0]
 8008824:	a902      	add	r1, sp, #8
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	f000 f914 	bl	8008a54 <_svfiprintf_r>
 800882c:	2200      	movs	r2, #0
 800882e:	9b02      	ldr	r3, [sp, #8]
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	b01c      	add	sp, #112	; 0x70
 8008834:	f85d eb04 	ldr.w	lr, [sp], #4
 8008838:	b003      	add	sp, #12
 800883a:	4770      	bx	lr
 800883c:	200001c8 	.word	0x200001c8
 8008840:	ffff0208 	.word	0xffff0208

08008844 <memset>:
 8008844:	4603      	mov	r3, r0
 8008846:	4402      	add	r2, r0
 8008848:	4293      	cmp	r3, r2
 800884a:	d100      	bne.n	800884e <memset+0xa>
 800884c:	4770      	bx	lr
 800884e:	f803 1b01 	strb.w	r1, [r3], #1
 8008852:	e7f9      	b.n	8008848 <memset+0x4>

08008854 <strncat>:
 8008854:	b530      	push	{r4, r5, lr}
 8008856:	4604      	mov	r4, r0
 8008858:	7825      	ldrb	r5, [r4, #0]
 800885a:	4623      	mov	r3, r4
 800885c:	3401      	adds	r4, #1
 800885e:	2d00      	cmp	r5, #0
 8008860:	d1fa      	bne.n	8008858 <strncat+0x4>
 8008862:	3a01      	subs	r2, #1
 8008864:	d304      	bcc.n	8008870 <strncat+0x1c>
 8008866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886a:	f803 4b01 	strb.w	r4, [r3], #1
 800886e:	b904      	cbnz	r4, 8008872 <strncat+0x1e>
 8008870:	bd30      	pop	{r4, r5, pc}
 8008872:	2a00      	cmp	r2, #0
 8008874:	d1f5      	bne.n	8008862 <strncat+0xe>
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e7f3      	b.n	8008862 <strncat+0xe>
	...

0800887c <_sbrk_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	2300      	movs	r3, #0
 8008880:	4d05      	ldr	r5, [pc, #20]	; (8008898 <_sbrk_r+0x1c>)
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f8 feda 	bl	8001640 <_sbrk>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_sbrk_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_sbrk_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	2000186c 	.word	0x2000186c

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200001c8 	.word	0x200001c8

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	2600      	movs	r6, #0
 80088ac:	4d0c      	ldr	r5, [pc, #48]	; (80088e0 <__libc_init_array+0x38>)
 80088ae:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	f000 fbbe 	bl	8009038 <_init>
 80088bc:	2600      	movs	r6, #0
 80088be:	4d0a      	ldr	r5, [pc, #40]	; (80088e8 <__libc_init_array+0x40>)
 80088c0:	4c0a      	ldr	r4, [pc, #40]	; (80088ec <__libc_init_array+0x44>)
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	08009518 	.word	0x08009518
 80088e4:	08009518 	.word	0x08009518
 80088e8:	08009518 	.word	0x08009518
 80088ec:	0800951c 	.word	0x0800951c

080088f0 <__retarget_lock_acquire_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__retarget_lock_release_recursive>:
 80088f2:	4770      	bx	lr

080088f4 <memcpy>:
 80088f4:	440a      	add	r2, r1
 80088f6:	4291      	cmp	r1, r2
 80088f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088fc:	d100      	bne.n	8008900 <memcpy+0xc>
 80088fe:	4770      	bx	lr
 8008900:	b510      	push	{r4, lr}
 8008902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008906:	4291      	cmp	r1, r2
 8008908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890c:	d1f9      	bne.n	8008902 <memcpy+0xe>
 800890e:	bd10      	pop	{r4, pc}

08008910 <_free_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4605      	mov	r5, r0
 8008914:	2900      	cmp	r1, #0
 8008916:	d040      	beq.n	800899a <_free_r+0x8a>
 8008918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800891c:	1f0c      	subs	r4, r1, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb8      	it	lt
 8008922:	18e4      	addlt	r4, r4, r3
 8008924:	f7ff ff62 	bl	80087ec <__malloc_lock>
 8008928:	4a1c      	ldr	r2, [pc, #112]	; (800899c <_free_r+0x8c>)
 800892a:	6813      	ldr	r3, [r2, #0]
 800892c:	b933      	cbnz	r3, 800893c <_free_r+0x2c>
 800892e:	6063      	str	r3, [r4, #4]
 8008930:	6014      	str	r4, [r2, #0]
 8008932:	4628      	mov	r0, r5
 8008934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008938:	f7ff bf5e 	b.w	80087f8 <__malloc_unlock>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d908      	bls.n	8008952 <_free_r+0x42>
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	1821      	adds	r1, r4, r0
 8008944:	428b      	cmp	r3, r1
 8008946:	bf01      	itttt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	1809      	addeq	r1, r1, r0
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	e7ed      	b.n	800892e <_free_r+0x1e>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x4c>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x42>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1850      	adds	r0, r2, r1
 8008960:	42a0      	cmp	r0, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x6c>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	4401      	add	r1, r0
 8008968:	1850      	adds	r0, r2, r1
 800896a:	4283      	cmp	r3, r0
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1e0      	bne.n	8008932 <_free_r+0x22>
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	4408      	add	r0, r1
 8008976:	6010      	str	r0, [r2, #0]
 8008978:	6053      	str	r3, [r2, #4]
 800897a:	e7da      	b.n	8008932 <_free_r+0x22>
 800897c:	d902      	bls.n	8008984 <_free_r+0x74>
 800897e:	230c      	movs	r3, #12
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	e7d6      	b.n	8008932 <_free_r+0x22>
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	1821      	adds	r1, r4, r0
 8008988:	428b      	cmp	r3, r1
 800898a:	bf01      	itttt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	6054      	str	r4, [r2, #4]
 8008998:	e7cb      	b.n	8008932 <_free_r+0x22>
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	2000172c 	.word	0x2000172c

080089a0 <__ssputs_r>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	461f      	mov	r7, r3
 80089a6:	688e      	ldr	r6, [r1, #8]
 80089a8:	4682      	mov	sl, r0
 80089aa:	42be      	cmp	r6, r7
 80089ac:	460c      	mov	r4, r1
 80089ae:	4690      	mov	r8, r2
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	d82c      	bhi.n	8008a0e <__ssputs_r+0x6e>
 80089b4:	898a      	ldrh	r2, [r1, #12]
 80089b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089ba:	d026      	beq.n	8008a0a <__ssputs_r+0x6a>
 80089bc:	6965      	ldr	r5, [r4, #20]
 80089be:	6909      	ldr	r1, [r1, #16]
 80089c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c4:	eba3 0901 	sub.w	r9, r3, r1
 80089c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089cc:	1c7b      	adds	r3, r7, #1
 80089ce:	444b      	add	r3, r9
 80089d0:	106d      	asrs	r5, r5, #1
 80089d2:	429d      	cmp	r5, r3
 80089d4:	bf38      	it	cc
 80089d6:	461d      	movcc	r5, r3
 80089d8:	0553      	lsls	r3, r2, #21
 80089da:	d527      	bpl.n	8008a2c <__ssputs_r+0x8c>
 80089dc:	4629      	mov	r1, r5
 80089de:	f7ff fe85 	bl	80086ec <_malloc_r>
 80089e2:	4606      	mov	r6, r0
 80089e4:	b360      	cbz	r0, 8008a40 <__ssputs_r+0xa0>
 80089e6:	464a      	mov	r2, r9
 80089e8:	6921      	ldr	r1, [r4, #16]
 80089ea:	f7ff ff83 	bl	80088f4 <memcpy>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	6126      	str	r6, [r4, #16]
 80089fc:	444e      	add	r6, r9
 80089fe:	6026      	str	r6, [r4, #0]
 8008a00:	463e      	mov	r6, r7
 8008a02:	6165      	str	r5, [r4, #20]
 8008a04:	eba5 0509 	sub.w	r5, r5, r9
 8008a08:	60a5      	str	r5, [r4, #8]
 8008a0a:	42be      	cmp	r6, r7
 8008a0c:	d900      	bls.n	8008a10 <__ssputs_r+0x70>
 8008a0e:	463e      	mov	r6, r7
 8008a10:	4632      	mov	r2, r6
 8008a12:	4641      	mov	r1, r8
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	f000 faaf 	bl	8008f78 <memmove>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	1b9b      	subs	r3, r3, r6
 8008a20:	60a3      	str	r3, [r4, #8]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	4433      	add	r3, r6
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	f000 facb 	bl	8008fc8 <_realloc_r>
 8008a32:	4606      	mov	r6, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e0      	bne.n	80089fa <__ssputs_r+0x5a>
 8008a38:	4650      	mov	r0, sl
 8008a3a:	6921      	ldr	r1, [r4, #16]
 8008a3c:	f7ff ff68 	bl	8008910 <_free_r>
 8008a40:	230c      	movs	r3, #12
 8008a42:	f8ca 3000 	str.w	r3, [sl]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	e7e9      	b.n	8008a28 <__ssputs_r+0x88>

08008a54 <_svfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4698      	mov	r8, r3
 8008a5a:	898b      	ldrh	r3, [r1, #12]
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	460d      	mov	r5, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	b09d      	sub	sp, #116	; 0x74
 8008a66:	d50e      	bpl.n	8008a86 <_svfiprintf_r+0x32>
 8008a68:	690b      	ldr	r3, [r1, #16]
 8008a6a:	b963      	cbnz	r3, 8008a86 <_svfiprintf_r+0x32>
 8008a6c:	2140      	movs	r1, #64	; 0x40
 8008a6e:	f7ff fe3d 	bl	80086ec <_malloc_r>
 8008a72:	6028      	str	r0, [r5, #0]
 8008a74:	6128      	str	r0, [r5, #16]
 8008a76:	b920      	cbnz	r0, 8008a82 <_svfiprintf_r+0x2e>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e0d0      	b.n	8008c24 <_svfiprintf_r+0x1d0>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	616b      	str	r3, [r5, #20]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8a:	2320      	movs	r3, #32
 8008a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a90:	2330      	movs	r3, #48	; 0x30
 8008a92:	f04f 0901 	mov.w	r9, #1
 8008a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008c3c <_svfiprintf_r+0x1e8>
 8008a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	469a      	mov	sl, r3
 8008aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aaa:	b10a      	cbz	r2, 8008ab0 <_svfiprintf_r+0x5c>
 8008aac:	2a25      	cmp	r2, #37	; 0x25
 8008aae:	d1f9      	bne.n	8008aa4 <_svfiprintf_r+0x50>
 8008ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab4:	d00b      	beq.n	8008ace <_svfiprintf_r+0x7a>
 8008ab6:	465b      	mov	r3, fp
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4629      	mov	r1, r5
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ff6f 	bl	80089a0 <__ssputs_r>
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f000 80a9 	beq.w	8008c1a <_svfiprintf_r+0x1c6>
 8008ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aca:	445a      	add	r2, fp
 8008acc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ace:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80a1 	beq.w	8008c1a <_svfiprintf_r+0x1c6>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae2:	f10a 0a01 	add.w	sl, sl, #1
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aee:	931a      	str	r3, [sp, #104]	; 0x68
 8008af0:	4654      	mov	r4, sl
 8008af2:	2205      	movs	r2, #5
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	4850      	ldr	r0, [pc, #320]	; (8008c3c <_svfiprintf_r+0x1e8>)
 8008afa:	f000 fa57 	bl	8008fac <memchr>
 8008afe:	9a04      	ldr	r2, [sp, #16]
 8008b00:	b9d8      	cbnz	r0, 8008b3a <_svfiprintf_r+0xe6>
 8008b02:	06d0      	lsls	r0, r2, #27
 8008b04:	bf44      	itt	mi
 8008b06:	2320      	movmi	r3, #32
 8008b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0c:	0711      	lsls	r1, r2, #28
 8008b0e:	bf44      	itt	mi
 8008b10:	232b      	movmi	r3, #43	; 0x2b
 8008b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b16:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1c:	d015      	beq.n	8008b4a <_svfiprintf_r+0xf6>
 8008b1e:	4654      	mov	r4, sl
 8008b20:	2000      	movs	r0, #0
 8008b22:	f04f 0c0a 	mov.w	ip, #10
 8008b26:	9a07      	ldr	r2, [sp, #28]
 8008b28:	4621      	mov	r1, r4
 8008b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b2e:	3b30      	subs	r3, #48	; 0x30
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d94d      	bls.n	8008bd0 <_svfiprintf_r+0x17c>
 8008b34:	b1b0      	cbz	r0, 8008b64 <_svfiprintf_r+0x110>
 8008b36:	9207      	str	r2, [sp, #28]
 8008b38:	e014      	b.n	8008b64 <_svfiprintf_r+0x110>
 8008b3a:	eba0 0308 	sub.w	r3, r0, r8
 8008b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	46a2      	mov	sl, r4
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	e7d2      	b.n	8008af0 <_svfiprintf_r+0x9c>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	1d19      	adds	r1, r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	9103      	str	r1, [sp, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bfbb      	ittet	lt
 8008b56:	425b      	neglt	r3, r3
 8008b58:	f042 0202 	orrlt.w	r2, r2, #2
 8008b5c:	9307      	strge	r3, [sp, #28]
 8008b5e:	9307      	strlt	r3, [sp, #28]
 8008b60:	bfb8      	it	lt
 8008b62:	9204      	strlt	r2, [sp, #16]
 8008b64:	7823      	ldrb	r3, [r4, #0]
 8008b66:	2b2e      	cmp	r3, #46	; 0x2e
 8008b68:	d10c      	bne.n	8008b84 <_svfiprintf_r+0x130>
 8008b6a:	7863      	ldrb	r3, [r4, #1]
 8008b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6e:	d134      	bne.n	8008bda <_svfiprintf_r+0x186>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	3402      	adds	r4, #2
 8008b74:	1d1a      	adds	r2, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9203      	str	r2, [sp, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfb8      	it	lt
 8008b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008c40 <_svfiprintf_r+0x1ec>
 8008b88:	2203      	movs	r2, #3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	7821      	ldrb	r1, [r4, #0]
 8008b8e:	f000 fa0d 	bl	8008fac <memchr>
 8008b92:	b138      	cbz	r0, 8008ba4 <_svfiprintf_r+0x150>
 8008b94:	2240      	movs	r2, #64	; 0x40
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	eba0 000a 	sub.w	r0, r0, sl
 8008b9c:	4082      	lsls	r2, r0
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba8:	2206      	movs	r2, #6
 8008baa:	4826      	ldr	r0, [pc, #152]	; (8008c44 <_svfiprintf_r+0x1f0>)
 8008bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb0:	f000 f9fc 	bl	8008fac <memchr>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d038      	beq.n	8008c2a <_svfiprintf_r+0x1d6>
 8008bb8:	4b23      	ldr	r3, [pc, #140]	; (8008c48 <_svfiprintf_r+0x1f4>)
 8008bba:	bb1b      	cbnz	r3, 8008c04 <_svfiprintf_r+0x1b0>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	3307      	adds	r3, #7
 8008bc0:	f023 0307 	bic.w	r3, r3, #7
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	9303      	str	r3, [sp, #12]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bca:	4433      	add	r3, r6
 8008bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bce:	e768      	b.n	8008aa2 <_svfiprintf_r+0x4e>
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd8:	e7a6      	b.n	8008b28 <_svfiprintf_r+0xd4>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f04f 0c0a 	mov.w	ip, #10
 8008be0:	4619      	mov	r1, r3
 8008be2:	3401      	adds	r4, #1
 8008be4:	9305      	str	r3, [sp, #20]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bec:	3a30      	subs	r2, #48	; 0x30
 8008bee:	2a09      	cmp	r2, #9
 8008bf0:	d903      	bls.n	8008bfa <_svfiprintf_r+0x1a6>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0c6      	beq.n	8008b84 <_svfiprintf_r+0x130>
 8008bf6:	9105      	str	r1, [sp, #20]
 8008bf8:	e7c4      	b.n	8008b84 <_svfiprintf_r+0x130>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c02:	e7f0      	b.n	8008be6 <_svfiprintf_r+0x192>
 8008c04:	ab03      	add	r3, sp, #12
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	462a      	mov	r2, r5
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <_svfiprintf_r+0x1f8>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	f3af 8000 	nop.w
 8008c14:	1c42      	adds	r2, r0, #1
 8008c16:	4606      	mov	r6, r0
 8008c18:	d1d6      	bne.n	8008bc8 <_svfiprintf_r+0x174>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	065b      	lsls	r3, r3, #25
 8008c1e:	f53f af2d 	bmi.w	8008a7c <_svfiprintf_r+0x28>
 8008c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c24:	b01d      	add	sp, #116	; 0x74
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	ab03      	add	r3, sp, #12
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4638      	mov	r0, r7
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <_svfiprintf_r+0x1f8>)
 8008c34:	a904      	add	r1, sp, #16
 8008c36:	f000 f87d 	bl	8008d34 <_printf_i>
 8008c3a:	e7eb      	b.n	8008c14 <_svfiprintf_r+0x1c0>
 8008c3c:	080094dc 	.word	0x080094dc
 8008c40:	080094e2 	.word	0x080094e2
 8008c44:	080094e6 	.word	0x080094e6
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	080089a1 	.word	0x080089a1

08008c50 <_printf_common>:
 8008c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	4616      	mov	r6, r2
 8008c56:	4699      	mov	r9, r3
 8008c58:	688a      	ldr	r2, [r1, #8]
 8008c5a:	690b      	ldr	r3, [r1, #16]
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	bfb8      	it	lt
 8008c62:	4613      	movlt	r3, r2
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c70:	b10a      	cbz	r2, 8008c76 <_printf_common+0x26>
 8008c72:	3301      	adds	r3, #1
 8008c74:	6033      	str	r3, [r6, #0]
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	0699      	lsls	r1, r3, #26
 8008c7a:	bf42      	ittt	mi
 8008c7c:	6833      	ldrmi	r3, [r6, #0]
 8008c7e:	3302      	addmi	r3, #2
 8008c80:	6033      	strmi	r3, [r6, #0]
 8008c82:	6825      	ldr	r5, [r4, #0]
 8008c84:	f015 0506 	ands.w	r5, r5, #6
 8008c88:	d106      	bne.n	8008c98 <_printf_common+0x48>
 8008c8a:	f104 0a19 	add.w	sl, r4, #25
 8008c8e:	68e3      	ldr	r3, [r4, #12]
 8008c90:	6832      	ldr	r2, [r6, #0]
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	dc2b      	bgt.n	8008cf0 <_printf_common+0xa0>
 8008c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c9c:	1e13      	subs	r3, r2, #0
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	bf18      	it	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	0692      	lsls	r2, r2, #26
 8008ca6:	d430      	bmi.n	8008d0a <_printf_common+0xba>
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4638      	mov	r0, r7
 8008cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb0:	47c0      	blx	r8
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d023      	beq.n	8008cfe <_printf_common+0xae>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	6922      	ldr	r2, [r4, #16]
 8008cba:	f003 0306 	and.w	r3, r3, #6
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	bf14      	ite	ne
 8008cc2:	2500      	movne	r5, #0
 8008cc4:	6833      	ldreq	r3, [r6, #0]
 8008cc6:	f04f 0600 	mov.w	r6, #0
 8008cca:	bf08      	it	eq
 8008ccc:	68e5      	ldreq	r5, [r4, #12]
 8008cce:	f104 041a 	add.w	r4, r4, #26
 8008cd2:	bf08      	it	eq
 8008cd4:	1aed      	subeq	r5, r5, r3
 8008cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cda:	bf08      	it	eq
 8008cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	bfc4      	itt	gt
 8008ce4:	1a9b      	subgt	r3, r3, r2
 8008ce6:	18ed      	addgt	r5, r5, r3
 8008ce8:	42b5      	cmp	r5, r6
 8008cea:	d11a      	bne.n	8008d22 <_printf_common+0xd2>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e008      	b.n	8008d02 <_printf_common+0xb2>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c0      	blx	r8
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d103      	bne.n	8008d06 <_printf_common+0xb6>
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	3501      	adds	r5, #1
 8008d08:	e7c1      	b.n	8008c8e <_printf_common+0x3e>
 8008d0a:	2030      	movs	r0, #48	; 0x30
 8008d0c:	18e1      	adds	r1, r4, r3
 8008d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d18:	4422      	add	r2, r4
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d20:	e7c2      	b.n	8008ca8 <_printf_common+0x58>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4622      	mov	r2, r4
 8008d26:	4649      	mov	r1, r9
 8008d28:	4638      	mov	r0, r7
 8008d2a:	47c0      	blx	r8
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d0e6      	beq.n	8008cfe <_printf_common+0xae>
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7d9      	b.n	8008ce8 <_printf_common+0x98>

08008d34 <_printf_i>:
 8008d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	7e0f      	ldrb	r7, [r1, #24]
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	2f78      	cmp	r7, #120	; 0x78
 8008d3e:	4680      	mov	r8, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	469a      	mov	sl, r3
 8008d44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d4a:	d807      	bhi.n	8008d5c <_printf_i+0x28>
 8008d4c:	2f62      	cmp	r7, #98	; 0x62
 8008d4e:	d80a      	bhi.n	8008d66 <_printf_i+0x32>
 8008d50:	2f00      	cmp	r7, #0
 8008d52:	f000 80d5 	beq.w	8008f00 <_printf_i+0x1cc>
 8008d56:	2f58      	cmp	r7, #88	; 0x58
 8008d58:	f000 80c1 	beq.w	8008ede <_printf_i+0x1aa>
 8008d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d64:	e03a      	b.n	8008ddc <_printf_i+0xa8>
 8008d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d6a:	2b15      	cmp	r3, #21
 8008d6c:	d8f6      	bhi.n	8008d5c <_printf_i+0x28>
 8008d6e:	a101      	add	r1, pc, #4	; (adr r1, 8008d74 <_printf_i+0x40>)
 8008d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d74:	08008dcd 	.word	0x08008dcd
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008d5d 	.word	0x08008d5d
 8008d80:	08008d5d 	.word	0x08008d5d
 8008d84:	08008d5d 	.word	0x08008d5d
 8008d88:	08008d5d 	.word	0x08008d5d
 8008d8c:	08008de1 	.word	0x08008de1
 8008d90:	08008d5d 	.word	0x08008d5d
 8008d94:	08008d5d 	.word	0x08008d5d
 8008d98:	08008d5d 	.word	0x08008d5d
 8008d9c:	08008d5d 	.word	0x08008d5d
 8008da0:	08008ee7 	.word	0x08008ee7
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008ea1 	.word	0x08008ea1
 8008dac:	08008d5d 	.word	0x08008d5d
 8008db0:	08008d5d 	.word	0x08008d5d
 8008db4:	08008f09 	.word	0x08008f09
 8008db8:	08008d5d 	.word	0x08008d5d
 8008dbc:	08008e0d 	.word	0x08008e0d
 8008dc0:	08008d5d 	.word	0x08008d5d
 8008dc4:	08008d5d 	.word	0x08008d5d
 8008dc8:	08008ea9 	.word	0x08008ea9
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	602a      	str	r2, [r5, #0]
 8008dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0a0      	b.n	8008f22 <_printf_i+0x1ee>
 8008de0:	6820      	ldr	r0, [r4, #0]
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	0607      	lsls	r7, r0, #24
 8008de6:	f103 0104 	add.w	r1, r3, #4
 8008dea:	6029      	str	r1, [r5, #0]
 8008dec:	d501      	bpl.n	8008df2 <_printf_i+0xbe>
 8008dee:	681e      	ldr	r6, [r3, #0]
 8008df0:	e003      	b.n	8008dfa <_printf_i+0xc6>
 8008df2:	0646      	lsls	r6, r0, #25
 8008df4:	d5fb      	bpl.n	8008dee <_printf_i+0xba>
 8008df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dfa:	2e00      	cmp	r6, #0
 8008dfc:	da03      	bge.n	8008e06 <_printf_i+0xd2>
 8008dfe:	232d      	movs	r3, #45	; 0x2d
 8008e00:	4276      	negs	r6, r6
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	230a      	movs	r3, #10
 8008e08:	4859      	ldr	r0, [pc, #356]	; (8008f70 <_printf_i+0x23c>)
 8008e0a:	e012      	b.n	8008e32 <_printf_i+0xfe>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	6029      	str	r1, [r5, #0]
 8008e14:	0605      	lsls	r5, r0, #24
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0xe8>
 8008e18:	681e      	ldr	r6, [r3, #0]
 8008e1a:	e002      	b.n	8008e22 <_printf_i+0xee>
 8008e1c:	0641      	lsls	r1, r0, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0xe4>
 8008e20:	881e      	ldrh	r6, [r3, #0]
 8008e22:	2f6f      	cmp	r7, #111	; 0x6f
 8008e24:	bf0c      	ite	eq
 8008e26:	2308      	moveq	r3, #8
 8008e28:	230a      	movne	r3, #10
 8008e2a:	4851      	ldr	r0, [pc, #324]	; (8008f70 <_printf_i+0x23c>)
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e32:	6865      	ldr	r5, [r4, #4]
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	bfa8      	it	ge
 8008e38:	6821      	ldrge	r1, [r4, #0]
 8008e3a:	60a5      	str	r5, [r4, #8]
 8008e3c:	bfa4      	itt	ge
 8008e3e:	f021 0104 	bicge.w	r1, r1, #4
 8008e42:	6021      	strge	r1, [r4, #0]
 8008e44:	b90e      	cbnz	r6, 8008e4a <_printf_i+0x116>
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	d04b      	beq.n	8008ee2 <_printf_i+0x1ae>
 8008e4a:	4615      	mov	r5, r2
 8008e4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e50:	fb03 6711 	mls	r7, r3, r1, r6
 8008e54:	5dc7      	ldrb	r7, [r0, r7]
 8008e56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e5a:	4637      	mov	r7, r6
 8008e5c:	42bb      	cmp	r3, r7
 8008e5e:	460e      	mov	r6, r1
 8008e60:	d9f4      	bls.n	8008e4c <_printf_i+0x118>
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d10b      	bne.n	8008e7e <_printf_i+0x14a>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	07de      	lsls	r6, r3, #31
 8008e6a:	d508      	bpl.n	8008e7e <_printf_i+0x14a>
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	6861      	ldr	r1, [r4, #4]
 8008e70:	4299      	cmp	r1, r3
 8008e72:	bfde      	ittt	le
 8008e74:	2330      	movle	r3, #48	; 0x30
 8008e76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e7e:	1b52      	subs	r2, r2, r5
 8008e80:	6122      	str	r2, [r4, #16]
 8008e82:	464b      	mov	r3, r9
 8008e84:	4621      	mov	r1, r4
 8008e86:	4640      	mov	r0, r8
 8008e88:	f8cd a000 	str.w	sl, [sp]
 8008e8c:	aa03      	add	r2, sp, #12
 8008e8e:	f7ff fedf 	bl	8008c50 <_printf_common>
 8008e92:	3001      	adds	r0, #1
 8008e94:	d14a      	bne.n	8008f2c <_printf_i+0x1f8>
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	b004      	add	sp, #16
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	f043 0320 	orr.w	r3, r3, #32
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	2778      	movs	r7, #120	; 0x78
 8008eaa:	4832      	ldr	r0, [pc, #200]	; (8008f74 <_printf_i+0x240>)
 8008eac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	6829      	ldr	r1, [r5, #0]
 8008eb4:	061f      	lsls	r7, r3, #24
 8008eb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008eba:	d402      	bmi.n	8008ec2 <_printf_i+0x18e>
 8008ebc:	065f      	lsls	r7, r3, #25
 8008ebe:	bf48      	it	mi
 8008ec0:	b2b6      	uxthmi	r6, r6
 8008ec2:	07df      	lsls	r7, r3, #31
 8008ec4:	bf48      	it	mi
 8008ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eca:	6029      	str	r1, [r5, #0]
 8008ecc:	bf48      	it	mi
 8008ece:	6023      	strmi	r3, [r4, #0]
 8008ed0:	b91e      	cbnz	r6, 8008eda <_printf_i+0x1a6>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	f023 0320 	bic.w	r3, r3, #32
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	2310      	movs	r3, #16
 8008edc:	e7a6      	b.n	8008e2c <_printf_i+0xf8>
 8008ede:	4824      	ldr	r0, [pc, #144]	; (8008f70 <_printf_i+0x23c>)
 8008ee0:	e7e4      	b.n	8008eac <_printf_i+0x178>
 8008ee2:	4615      	mov	r5, r2
 8008ee4:	e7bd      	b.n	8008e62 <_printf_i+0x12e>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	6826      	ldr	r6, [r4, #0]
 8008eea:	1d18      	adds	r0, r3, #4
 8008eec:	6961      	ldr	r1, [r4, #20]
 8008eee:	6028      	str	r0, [r5, #0]
 8008ef0:	0635      	lsls	r5, r6, #24
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	d501      	bpl.n	8008efa <_printf_i+0x1c6>
 8008ef6:	6019      	str	r1, [r3, #0]
 8008ef8:	e002      	b.n	8008f00 <_printf_i+0x1cc>
 8008efa:	0670      	lsls	r0, r6, #25
 8008efc:	d5fb      	bpl.n	8008ef6 <_printf_i+0x1c2>
 8008efe:	8019      	strh	r1, [r3, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	4615      	mov	r5, r2
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	e7bc      	b.n	8008e82 <_printf_i+0x14e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	602a      	str	r2, [r5, #0]
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	6862      	ldr	r2, [r4, #4]
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 f849 	bl	8008fac <memchr>
 8008f1a:	b108      	cbz	r0, 8008f20 <_printf_i+0x1ec>
 8008f1c:	1b40      	subs	r0, r0, r5
 8008f1e:	6060      	str	r0, [r4, #4]
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	6123      	str	r3, [r4, #16]
 8008f24:	2300      	movs	r3, #0
 8008f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2a:	e7aa      	b.n	8008e82 <_printf_i+0x14e>
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4640      	mov	r0, r8
 8008f32:	6923      	ldr	r3, [r4, #16]
 8008f34:	47d0      	blx	sl
 8008f36:	3001      	adds	r0, #1
 8008f38:	d0ad      	beq.n	8008e96 <_printf_i+0x162>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	079b      	lsls	r3, r3, #30
 8008f3e:	d413      	bmi.n	8008f68 <_printf_i+0x234>
 8008f40:	68e0      	ldr	r0, [r4, #12]
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	4298      	cmp	r0, r3
 8008f46:	bfb8      	it	lt
 8008f48:	4618      	movlt	r0, r3
 8008f4a:	e7a6      	b.n	8008e9a <_printf_i+0x166>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4632      	mov	r2, r6
 8008f50:	4649      	mov	r1, r9
 8008f52:	4640      	mov	r0, r8
 8008f54:	47d0      	blx	sl
 8008f56:	3001      	adds	r0, #1
 8008f58:	d09d      	beq.n	8008e96 <_printf_i+0x162>
 8008f5a:	3501      	adds	r5, #1
 8008f5c:	68e3      	ldr	r3, [r4, #12]
 8008f5e:	9903      	ldr	r1, [sp, #12]
 8008f60:	1a5b      	subs	r3, r3, r1
 8008f62:	42ab      	cmp	r3, r5
 8008f64:	dcf2      	bgt.n	8008f4c <_printf_i+0x218>
 8008f66:	e7eb      	b.n	8008f40 <_printf_i+0x20c>
 8008f68:	2500      	movs	r5, #0
 8008f6a:	f104 0619 	add.w	r6, r4, #25
 8008f6e:	e7f5      	b.n	8008f5c <_printf_i+0x228>
 8008f70:	080094ed 	.word	0x080094ed
 8008f74:	080094fe 	.word	0x080094fe

08008f78 <memmove>:
 8008f78:	4288      	cmp	r0, r1
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	eb01 0402 	add.w	r4, r1, r2
 8008f80:	d902      	bls.n	8008f88 <memmove+0x10>
 8008f82:	4284      	cmp	r4, r0
 8008f84:	4623      	mov	r3, r4
 8008f86:	d807      	bhi.n	8008f98 <memmove+0x20>
 8008f88:	1e43      	subs	r3, r0, #1
 8008f8a:	42a1      	cmp	r1, r4
 8008f8c:	d008      	beq.n	8008fa0 <memmove+0x28>
 8008f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f96:	e7f8      	b.n	8008f8a <memmove+0x12>
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4402      	add	r2, r0
 8008f9c:	428a      	cmp	r2, r1
 8008f9e:	d100      	bne.n	8008fa2 <memmove+0x2a>
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008faa:	e7f7      	b.n	8008f9c <memmove+0x24>

08008fac <memchr>:
 8008fac:	4603      	mov	r3, r0
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	4402      	add	r2, r0
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	d101      	bne.n	8008fbe <memchr+0x12>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e003      	b.n	8008fc6 <memchr+0x1a>
 8008fbe:	7804      	ldrb	r4, [r0, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	428c      	cmp	r4, r1
 8008fc4:	d1f6      	bne.n	8008fb4 <memchr+0x8>
 8008fc6:	bd10      	pop	{r4, pc}

08008fc8 <_realloc_r>:
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	4680      	mov	r8, r0
 8008fce:	4614      	mov	r4, r2
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	b921      	cbnz	r1, 8008fde <_realloc_r+0x16>
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f7ff bb87 	b.w	80086ec <_malloc_r>
 8008fde:	b92a      	cbnz	r2, 8008fec <_realloc_r+0x24>
 8008fe0:	f7ff fc96 	bl	8008910 <_free_r>
 8008fe4:	4625      	mov	r5, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fec:	f000 f81b 	bl	8009026 <_malloc_usable_size_r>
 8008ff0:	4284      	cmp	r4, r0
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	d802      	bhi.n	8008ffc <_realloc_r+0x34>
 8008ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ffa:	d812      	bhi.n	8009022 <_realloc_r+0x5a>
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4640      	mov	r0, r8
 8009000:	f7ff fb74 	bl	80086ec <_malloc_r>
 8009004:	4605      	mov	r5, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	d0ed      	beq.n	8008fe6 <_realloc_r+0x1e>
 800900a:	42bc      	cmp	r4, r7
 800900c:	4622      	mov	r2, r4
 800900e:	4631      	mov	r1, r6
 8009010:	bf28      	it	cs
 8009012:	463a      	movcs	r2, r7
 8009014:	f7ff fc6e 	bl	80088f4 <memcpy>
 8009018:	4631      	mov	r1, r6
 800901a:	4640      	mov	r0, r8
 800901c:	f7ff fc78 	bl	8008910 <_free_r>
 8009020:	e7e1      	b.n	8008fe6 <_realloc_r+0x1e>
 8009022:	4635      	mov	r5, r6
 8009024:	e7df      	b.n	8008fe6 <_realloc_r+0x1e>

08009026 <_malloc_usable_size_r>:
 8009026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902a:	1f18      	subs	r0, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfbc      	itt	lt
 8009030:	580b      	ldrlt	r3, [r1, r0]
 8009032:	18c0      	addlt	r0, r0, r3
 8009034:	4770      	bx	lr
	...

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
