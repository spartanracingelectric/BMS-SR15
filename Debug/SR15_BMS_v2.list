
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009380  08009380  00019380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009840  08009840  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009848  08009848  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  200001cc  08009a1c  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  08009a1c  00021874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016936  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004516  00000000  00000000  00036b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f0  00000000  00000000  0003c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234e8  00000000  00000000  0003d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c81c  00000000  00000000  00060cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee33  00000000  00000000  0007d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061c0  00000000  00000000  0013c308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001424c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08009368 	.word	0x08009368

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08009368 	.word	0x08009368

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_Set_Num_Devices>:
static const uint8_t num_aux_series_groups = 6; //Number of series groups
static uint8_t num_devices; //Keep visibility within this file
static uint8_t num_series_groups; //Number of series groups

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if (num)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <LTC_Set_Num_Devices+0x20>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7013      	strb	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	200001e8 	.word	0x200001e8

08000558 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	return num_devices;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <LTC_Get_Num_Devices+0x10>)
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	200001e8 	.word	0x200001e8

0800056c <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d802      	bhi.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <LTC_Set_Num_Series_Groups+0x28>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	7013      	strb	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200001e9 	.word	0x200001e9

08000598 <LTC_Wakeup_Idle>:
uint8_t LTC_Get_Num_Series_Groups(void) {
	return num_series_groups;
}

/* Wake LTC up from IDLE state into READY state */
void LTC_Wakeup_Idle(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 1; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e00c      	b.n	80005c2 <LTC_Wakeup_Idle+0x2a>
		LTC_nCS_Low(); //Pull CS low
 80005a8:	f001 f8a4 	bl	80016f4 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 80005ac:	1cf9      	adds	r1, r7, #3
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <LTC_Wakeup_Idle+0x3c>)
 80005b4:	f004 f91c 	bl	80047f0 <HAL_SPI_Transmit>
		LTC_nCS_High(); //Pull CS high
 80005b8:	f001 f890 	bl	80016dc <LTC_nCS_High>
	for (int i = 0; i < 1; i++) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	ddef      	ble.n	80005a8 <LTC_Wakeup_Idle+0x10>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000298 	.word	0x20000298

080005d8 <LTC_Wakeup_Sleep>:

//wake up sleep
void LTC_Wakeup_Sleep(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1; i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e00e      	b.n	8000602 <LTC_Wakeup_Sleep+0x2a>
		LTC_nCS_Low();
 80005e4:	f001 f886 	bl	80016f4 <LTC_nCS_Low>
		HAL_Delay(300);
 80005e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ec:	f001 fa0a 	bl	8001a04 <HAL_Delay>
		LTC_nCS_High();
 80005f0:	f001 f874 	bl	80016dc <LTC_nCS_High>
		HAL_Delay(300);
 80005f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f8:	f001 fa04 	bl	8001a04 <HAL_Delay>
	for (int i = 0; i < 1; i++) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	dded      	ble.n	80005e4 <LTC_Wakeup_Sleep+0xc>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <ltc6811_wrcomm>:
	return ret;
}

void ltc6811_wrcomm(uint8_t total_ic, //The number of ICs being written to
		uint8_t comm[6] //A two dimensional array of the comm data that will be written
		) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8000620:	2306      	movs	r3, #6
 8000622:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3304      	adds	r3, #4
 800062c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800062e:	7cfb      	ldrb	r3, [r7, #19]
 8000630:	4618      	mov	r0, r3
 8000632:	f008 f9c3 	bl	80089bc <malloc>
 8000636:	4603      	mov	r3, r0
 8000638:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2207      	movs	r2, #7
 800063e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	2221      	movs	r2, #33	; 0x21
 8000646:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000648:	68f9      	ldr	r1, [r7, #12]
 800064a:	2002      	movs	r0, #2
 800064c:	f000 f9e8 	bl	8000a20 <LTC_PEC15_Calc>
 8000650:	4603      	mov	r3, r0
 8000652:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000654:	897b      	ldrh	r3, [r7, #10]
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	b29a      	uxth	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3302      	adds	r3, #2
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3303      	adds	r3, #3
 8000666:	897a      	ldrh	r2, [r7, #10]
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	75bb      	strb	r3, [r7, #22]
 8000674:	e030      	b.n	80006d8 <ltc6811_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000676:	2300      	movs	r3, #0
 8000678:	757b      	strb	r3, [r7, #21]
 800067a:	e00d      	b.n	8000698 <ltc6811_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; //adding the config data to the array to be sent
 800067c:	7d7b      	ldrb	r3, [r7, #21]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	441a      	add	r2, r3
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	440b      	add	r3, r1
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	3301      	adds	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	3301      	adds	r3, #1
 8000696:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000698:	7d7a      	ldrb	r2, [r7, #21]
 800069a:	7d3b      	ldrb	r3, [r7, #20]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3ed      	bcc.n	800067c <ltc6811_wrcomm+0x68>
		}
		comm_pec = (uint16_t) LTC_PEC15_Calc(BYTES_IN_REG,
 80006a0:	7d3b      	ldrb	r3, [r7, #20]
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f9bb 	bl	8000a20 <LTC_PEC15_Calc>
 80006aa:	4603      	mov	r3, r0
 80006ac:	813b      	strh	r3, [r7, #8]
				&comm[0]); // calculating the PEC for each ICs configuration register data
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80006ae:	893b      	ldrh	r3, [r7, #8]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b299      	uxth	r1, r3
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	3301      	adds	r3, #1
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	893a      	ldrh	r2, [r7, #8]
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	3302      	adds	r3, #2
 80006d0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80006d2:	7dbb      	ldrb	r3, [r7, #22]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	75bb      	strb	r3, [r7, #22]
 80006d8:	7dbb      	ldrb	r3, [r7, #22]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1cb      	bne.n	8000676 <ltc6811_wrcomm+0x62>
	}

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80006de:	f7ff ff5b 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80006e2:	f001 f807 	bl	80016f4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80006e6:	7cfb      	ldrb	r3, [r7, #19]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <ltc6811_wrcomm+0xf4>)
 80006f0:	f004 f87e 	bl	80047f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80006f4:	f000 fff2 	bl	80016dc <LTC_nCS_High>
	free(cmd);
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f008 f967 	bl	80089cc <free>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000298 	.word	0x20000298

0800070c <ltc6811_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc6811_stcomm() {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000712:	2307      	movs	r3, #7
 8000714:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x23;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	2002      	movs	r0, #2
 8000720:	f000 f97e 	bl	8000a20 <LTC_PEC15_Calc>
 8000724:	4603      	mov	r3, r0
 8000726:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000728:	897b      	ldrh	r3, [r7, #10]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000732:	897b      	ldrh	r3, [r7, #10]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000738:	f7ff ff2e 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 800073c:	f000 ffda 	bl	80016f4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2204      	movs	r2, #4
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <ltc6811_stcomm+0x6c>)
 8000748:	f004 f852 	bl	80047f0 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e008      	b.n	8000764 <ltc6811_stcomm+0x58>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <ltc6811_stcomm+0x6c>)
 800075a:	f004 f849 	bl	80047f0 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b08      	cmp	r3, #8
 8000768:	ddf3      	ble.n	8000752 <ltc6811_stcomm+0x46>
	}
	LTC_nCS_High();
 800076a:	f000 ffb7 	bl	80016dc <LTC_nCS_High>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000298 	.word	0x20000298

0800077c <LTC_ReadRawCellTemps>:

		actual_temp[i] = steinhart;
	}
}

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 800077c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000780:	b089      	sub	sp, #36	; 0x24
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	466b      	mov	r3, sp
 8000788:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 800078e:	f7ff fee3 	bl	8000558 <LTC_Get_Num_Devices>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	2308      	movs	r3, #8
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800079e:	7f3b      	ldrb	r3, [r7, #28]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	7f3b      	ldrb	r3, [r7, #28]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4698      	mov	r8, r3
 80007aa:	4691      	mov	r9, r2
 80007ac:	f04f 0200 	mov.w	r2, #0
 80007b0:	f04f 0300 	mov.w	r3, #0
 80007b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c0:	7f3b      	ldrb	r3, [r7, #28]
 80007c2:	2200      	movs	r2, #0
 80007c4:	461c      	mov	r4, r3
 80007c6:	4615      	mov	r5, r2
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	00eb      	lsls	r3, r5, #3
 80007d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007d6:	00e2      	lsls	r2, r4, #3
 80007d8:	7f3b      	ldrb	r3, [r7, #28]
 80007da:	3307      	adds	r3, #7
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	ebad 0d03 	sub.w	sp, sp, r3
 80007e4:	466b      	mov	r3, sp
 80007e6:	3300      	adds	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	77bb      	strb	r3, [r7, #30]
 80007ee:	e07c      	b.n	80008ea <LTC_ReadRawCellTemps+0x16e>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 80007f0:	7fbb      	ldrb	r3, [r7, #30]
 80007f2:	4a46      	ldr	r2, [pc, #280]	; (800090c <LTC_ReadRawCellTemps+0x190>)
 80007f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 8000800:	7fbb      	ldrb	r3, [r7, #30]
 8000802:	4a42      	ldr	r2, [pc, #264]	; (800090c <LTC_ReadRawCellTemps+0x190>)
 8000804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	2002      	movs	r0, #2
 8000814:	f000 f904 	bl	8000a20 <LTC_PEC15_Calc>
 8000818:	4603      	mov	r3, r0
 800081a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800081c:	8a7b      	ldrh	r3, [r7, #18]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8000826:	8a7b      	ldrh	r3, [r7, #18]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 800082c:	f7ff feb4 	bl	8000598 <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 8000830:	f000 ff60 	bl	80016f4 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2204      	movs	r2, #4
 800083c:	4834      	ldr	r0, [pc, #208]	; (8000910 <LTC_ReadRawCellTemps+0x194>)
 800083e:	f003 ffd7 	bl	80047f0 <HAL_SPI_Transmit>
 8000842:	4603      	mov	r3, r0
 8000844:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8000846:	7c7b      	ldrb	r3, [r7, #17]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <LTC_ReadRawCellTemps+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 800084c:	7c7b      	ldrb	r3, [r7, #17]
 800084e:	2200      	movs	r2, #0
 8000850:	4413      	add	r3, r2
 8000852:	2201      	movs	r2, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	b25a      	sxtb	r2, r3
 800085a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800085e:	4313      	orrs	r3, r2
 8000860:	b25b      	sxtb	r3, r3
 8000862:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000864:	7f3b      	ldrb	r3, [r7, #28]
 8000866:	b29a      	uxth	r2, r3
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	4828      	ldr	r0, [pc, #160]	; (8000910 <LTC_ReadRawCellTemps+0x194>)
 800086e:	f004 f902 	bl	8004a76 <HAL_SPI_Receive>
 8000872:	4603      	mov	r3, r0
 8000874:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00b      	beq.n	8000894 <LTC_ReadRawCellTemps+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 800087c:	7c7b      	ldrb	r3, [r7, #17]
 800087e:	2204      	movs	r2, #4
 8000880:	4413      	add	r3, r2
 8000882:	2201      	movs	r2, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	b25a      	sxtb	r2, r3
 800088a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800088e:	4313      	orrs	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000894:	2300      	movs	r3, #0
 8000896:	777b      	strb	r3, [r7, #29]
 8000898:	e01b      	b.n	80008d2 <LTC_ReadRawCellTemps+0x156>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 800089a:	7f7b      	ldrb	r3, [r7, #29]
 800089c:	2208      	movs	r2, #8
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4413      	add	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008a8:	7f7b      	ldrb	r3, [r7, #29]
 80008aa:	2206      	movs	r2, #6
 80008ac:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80008b0:	7fbb      	ldrb	r3, [r7, #30]
 80008b2:	2103      	movs	r1, #3
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
					REG_LEN - 2);
 80008c0:	2208      	movs	r2, #8
 80008c2:	3a02      	subs	r2, #2
			memcpy(
 80008c4:	68f9      	ldr	r1, [r7, #12]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 f9ac 	bl	8008c24 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80008cc:	7f7b      	ldrb	r3, [r7, #29]
 80008ce:	3301      	adds	r3, #1
 80008d0:	777b      	strb	r3, [r7, #29]
 80008d2:	f7ff fe41 	bl	8000558 <LTC_Get_Num_Devices>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	7f7b      	ldrb	r3, [r7, #29]
 80008dc:	4293      	cmp	r3, r2
 80008de:	d3dc      	bcc.n	800089a <LTC_ReadRawCellTemps+0x11e>
		}

		LTC_nCS_High(); //Pull CS high
 80008e0:	f000 fefc 	bl	80016dc <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 80008e4:	7fbb      	ldrb	r3, [r7, #30]
 80008e6:	3301      	adds	r3, #1
 80008e8:	77bb      	strb	r3, [r7, #30]
 80008ea:	2206      	movs	r2, #6
 80008ec:	2303      	movs	r3, #3
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	7fba      	ldrb	r2, [r7, #30]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	f4ff af7a 	bcc.w	80007f0 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
 80008fe:	46b5      	mov	sp, r6
}
 8000900:	4618      	mov	r0, r3
 8000902:	3724      	adds	r7, #36	; 0x24
 8000904:	46bd      	mov	sp, r7
 8000906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800090a:	bf00      	nop
 800090c:	080093d8 	.word	0x080093d8
 8000910:	20000298 	.word	0x20000298

08000914 <LTC_ADAX>:
	LTC_nCS_High();
}

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	105b      	asrs	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3304      	adds	r3, #4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 800093e:	7bfa      	ldrb	r2, [r7, #15]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3360      	adds	r3, #96	; 0x60
 8000948:	b2db      	uxtb	r3, r3
 800094a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	2002      	movs	r0, #2
 8000954:	f000 f864 	bl	8000a20 <LTC_PEC15_Calc>
 8000958:	4603      	mov	r3, r0
 800095a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	b29b      	uxth	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000966:	89bb      	ldrh	r3, [r7, #12]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800096c:	f7ff fe14 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000970:	f000 fec0 	bl	80016f4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	2204      	movs	r2, #4
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <LTC_ADAX+0x7c>)
 800097e:	f003 ff37 	bl	80047f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000982:	f000 feab 	bl	80016dc <LTC_nCS_High>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000298 	.word	0x20000298

08000994 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80009a6:	2307      	movs	r3, #7
 80009a8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80009aa:	2314      	movs	r3, #20
 80009ac:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	2002      	movs	r0, #2
 80009b4:	f000 f834 	bl	8000a20 <LTC_PEC15_Calc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80009bc:	893b      	ldrh	r3, [r7, #8]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 80009c6:	893b      	ldrh	r3, [r7, #8]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80009cc:	f7ff fde4 	bl	8000598 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 80009d0:	f000 fe90 	bl	80016f4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80009d4:	1d39      	adds	r1, r7, #4
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2204      	movs	r2, #4
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <LTC_PollAdc+0x84>)
 80009dc:	f003 ff08 	bl	80047f0 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 80009e0:	e00c      	b.n	80009fc <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 80009e2:	f001 f805 	bl	80019f0 <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 80009ea:	7abb      	ldrb	r3, [r7, #10]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <LTC_PollAdc+0x62>
			finished = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	e002      	b.n	80009fc <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	330a      	adds	r3, #10
 80009fa:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <LTC_PollAdc+0x88>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d802      	bhi.n	8000a0a <LTC_PollAdc+0x76>
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0eb      	beq.n	80009e2 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8000a0a:	f000 fe67 	bl	80016dc <LTC_nCS_High>
	return (counter);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000298 	.word	0x20000298
 8000a1c:	00030d3f 	.word	0x00030d3f

08000a20 <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a30:	2300      	movs	r3, #0
 8000a32:	737b      	strb	r3, [r7, #13]
 8000a34:	e018      	b.n	8000a68 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	09db      	lsrs	r3, r3, #7
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	7b7b      	ldrb	r3, [r7, #13]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	440b      	add	r3, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4053      	eors	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	897b      	ldrh	r3, [r7, #10]
 8000a56:	490a      	ldr	r1, [pc, #40]	; (8000a80 <LTC_PEC15_Calc+0x60>)
 8000a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4053      	eors	r3, r2
 8000a60:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	3301      	adds	r3, #1
 8000a66:	737b      	strb	r3, [r7, #13]
 8000a68:	7b7a      	ldrb	r2, [r7, #13]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3e2      	bcc.n	8000a36 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	b29b      	uxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	080093dc 	.word	0x080093dc

08000a84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_ADC1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ab2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ac2:	f000 ffc3 	bl	8001a4c <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fd80 	bl	80015d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ad0:	230e      	movs	r3, #14
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ae2:	f001 f88b 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000aec:	f000 fd70 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	40012400 	.word	0x40012400

08000b00 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b12:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <MX_ADC2_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b2e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b3e:	f000 ff85 	bl	8001a4c <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fd42 	bl	80015d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b5e:	f001 f84d 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b68:	f000 fd32 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000021c 	.word	0x2000021c
 8000b78:	40012800 	.word	0x40012800

08000b7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_ADC_MspInit+0xbc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d122      	bne.n	8000be2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bcc:	2330      	movs	r3, #48	; 0x30
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4819      	ldr	r0, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0xc4>)
 8000bdc:	f001 fc88 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000be0:	e026      	b.n	8000c30 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_ADC_MspInit+0xc8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d121      	bne.n	8000c30 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_ADC_MspInit+0xc4>)
 8000c2c:	f001 fc60 	bl	80024f0 <HAL_GPIO_Init>
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40012400 	.word	0x40012400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40012800 	.word	0x40012800

08000c48 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_CAN1_Init+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c54:	2209      	movs	r2, #9
 8000c56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c6e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000c72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c9a:	f001 f8e8 	bl	8001e6e <HAL_CAN_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f000 fc94 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000270 	.word	0x20000270
 8000cb0:	40006400 	.word	0x40006400

08000cb4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <HAL_CAN_MspInit+0xb0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d143      	bne.n	8000d5c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	61d3      	str	r3, [r2, #28]
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <HAL_CAN_MspInit+0xb8>)
 8000d1a:	f001 fbe9 	bl	80024f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <HAL_CAN_MspInit+0xb8>)
 8000d34:	f001 fbdc 	bl	80024f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_CAN_MspInit+0xbc>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_CAN_MspInit+0xbc>)
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40006400 	.word	0x40006400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40010000 	.word	0x40010000

08000d74 <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <CAN1_Start+0x10>)
 8000d7a:	f001 f973 	bl	8002064 <HAL_CAN_Start>
 8000d7e:	4603      	mov	r3, r0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000270 	.word	0x20000270

08000d88 <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <CAN1_Activate+0x14>)
 8000d90:	f001 fa7b 	bl	800228a <HAL_CAN_ActivateNotification>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000270 	.word	0x20000270

08000da0 <CAN1_Send>:


HAL_StatusTypeDef CAN1_Send(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	return HAL_CAN_AddTxMessage(&hcan1, &msg.TxHeader, msg.data, &msg.TxMailbox);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <CAN1_Send+0x18>)
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <CAN1_Send+0x1c>)
 8000da8:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <CAN1_Send+0x20>)
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <CAN1_Send+0x24>)
 8000dac:	f001 f99e 	bl	80020ec <HAL_CAN_AddTxMessage>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000264 	.word	0x20000264
 8000dbc:	20000268 	.word	0x20000268
 8000dc0:	2000024c 	.word	0x2000024c
 8000dc4:	20000270 	.word	0x20000270

08000dc8 <CAN1_SettingsInit>:

void CAN1_SettingsInit(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	CAN1_Start();
 8000dcc:	f7ff ffd2 	bl	8000d74 <CAN1_Start>
	CAN1_Activate();
 8000dd0:	f7ff ffda 	bl	8000d88 <CAN1_Activate>
	msg.TxHeader.IDE= CAN_ID_STD;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
	msg.TxHeader.StdId = 0x00;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
	msg.TxHeader.RTR = CAN_RTR_DATA;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	msg.TxHeader.DLC = 8;
 8000de6:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	611a      	str	r2, [r3, #16]
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000024c 	.word	0x2000024c

08000df4 <setCANId>:

void setCANId(uint32_t id){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	msg.TxHeader.StdId = id;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <setCANId+0x18>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	2000024c 	.word	0x2000024c

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000e8a:	f001 fcb5 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0xec>)
 8000e94:	f001 fcb0 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000eb0:	f001 fb1e 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ecc:	f001 fb10 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ee6:	f001 fb03 	bl	80024f0 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40011000 	.word	0x40011000

08000f00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	f6ad 0da8 	subw	sp, sp, #2216	; 0x8a8
 8000f06:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;
	TimerPacket timerpacket_can1;

	uint16_t *read_volt;
	read_volt = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000f08:	2018      	movs	r0, #24
 8000f0a:	f007 fd57 	bl	80089bc <malloc>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f8c7 3898 	str.w	r3, [r7, #2200]	; 0x898
	uint16_t *read_temp;
	read_temp = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000f14:	2018      	movs	r0, #24
 8000f16:	f007 fd51 	bl	80089bc <malloc>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
	uint16_t *read_auxreg = (uint16_t*) malloc(6 * sizeof(uint16_t));
 8000f20:	200c      	movs	r0, #12
 8000f22:	f007 fd4b 	bl	80089bc <malloc>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f8c7 3890 	str.w	r3, [r7, #2192]	; 0x890
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2c:	f000 fd08 	bl	8001940 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f30:	f000 fa72 	bl	8001418 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f34:	f7ff ff6c 	bl	8000e10 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f38:	f7ff fda4 	bl	8000a84 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f3c:	f7ff fde0 	bl	8000b00 <MX_ADC2_Init>
	MX_CAN1_Init();
 8000f40:	f7ff fe82 	bl	8000c48 <MX_CAN1_Init>
	MX_TIM7_Init();
 8000f44:	f000 fc82 	bl	800184c <MX_TIM7_Init>
	MX_SPI1_Init();
 8000f48:	f000 fb48 	bl	80015dc <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000f4c:	f007 f84e 	bl	8007fec <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	CAN1_SettingsInit(); // Start CAN at 0x00
 8000f50:	f7ff ff3a 	bl	8000dc8 <CAN1_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8000f54:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	49e1      	ldr	r1, [pc, #900]	; (80012e0 <main+0x3e0>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fac7 	bl	80014f0 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000f62:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000f66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb00 	bl	8001570 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can1, CAN1_DELAY);
 8000f70:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8000f74:	210a      	movs	r1, #10
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fafa 	bl	8001570 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8000f7c:	f000 fbae 	bl	80016dc <LTC_nCS_High>
	LTC_Set_Num_Devices(NUM_DEVICES);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fad7 	bl	8000534 <LTC_Set_Num_Devices>
	LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8000f86:	200c      	movs	r0, #12
 8000f88:	f7ff faf0 	bl	800056c <LTC_Set_Num_Series_Groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t BMS_IC[12][6] = { };
 8000f8c:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000f90:	2248      	movs	r2, #72	; 0x48
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fded 	bl	8008b74 <memset>
	BMS_IC[0][0] = 0x69; // Icom Start(6) + I2C_address D0 (0x90)
 8000f9a:	2369      	movs	r3, #105	; 0x69
 8000f9c:	f887 381c 	strb.w	r3, [r7, #2076]	; 0x81c
	BMS_IC[0][1] = 0x28; // Fcom master NACK(8)
 8000fa0:	2328      	movs	r3, #40	; 0x28
 8000fa2:	f887 381d 	strb.w	r3, [r7, #2077]	; 0x81d
	BMS_IC[0][2] = 0x0F; // Icom Blank (0) + eeprom address D1 (0xF8)
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	f887 381e 	strb.w	r3, [r7, #2078]	; 0x81e
	BMS_IC[0][3] = 0xF9; // Fcom master NACK + Stop(9)
 8000fac:	23f9      	movs	r3, #249	; 0xf9
 8000fae:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	BMS_IC[0][4] = 0x7F; // NO TRANSMIT
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
	BMS_IC[0][5] = 0xF9; // Fcom master NACK + Stop(9)
 8000fb8:	23f9      	movs	r3, #249	; 0xf9
 8000fba:	f887 3821 	strb.w	r3, [r7, #2081]	; 0x821

	BMS_IC[1][0] = 0x69;
 8000fbe:	2369      	movs	r3, #105	; 0x69
 8000fc0:	f887 3822 	strb.w	r3, [r7, #2082]	; 0x822
	BMS_IC[1][1] = 0x28;
 8000fc4:	2328      	movs	r3, #40	; 0x28
 8000fc6:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
	BMS_IC[1][2] = 0x0F;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	f887 3824 	strb.w	r3, [r7, #2084]	; 0x824
	BMS_IC[1][3] = 0xE9;
 8000fd0:	23e9      	movs	r3, #233	; 0xe9
 8000fd2:	f887 3825 	strb.w	r3, [r7, #2085]	; 0x825
	BMS_IC[1][4] = 0x7F;
 8000fd6:	237f      	movs	r3, #127	; 0x7f
 8000fd8:	f887 3826 	strb.w	r3, [r7, #2086]	; 0x826
	BMS_IC[1][5] = 0xF9;
 8000fdc:	23f9      	movs	r3, #249	; 0xf9
 8000fde:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827

	BMS_IC[2][0] = 0x69;
 8000fe2:	2369      	movs	r3, #105	; 0x69
 8000fe4:	f887 3828 	strb.w	r3, [r7, #2088]	; 0x828
	BMS_IC[2][1] = 0x28;
 8000fe8:	2328      	movs	r3, #40	; 0x28
 8000fea:	f887 3829 	strb.w	r3, [r7, #2089]	; 0x829
	BMS_IC[2][2] = 0x0F;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	f887 382a 	strb.w	r3, [r7, #2090]	; 0x82a
	BMS_IC[2][3] = 0xD9;
 8000ff4:	23d9      	movs	r3, #217	; 0xd9
 8000ff6:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	BMS_IC[2][4] = 0x7F;
 8000ffa:	237f      	movs	r3, #127	; 0x7f
 8000ffc:	f887 382c 	strb.w	r3, [r7, #2092]	; 0x82c
	BMS_IC[2][5] = 0xF9;
 8001000:	23f9      	movs	r3, #249	; 0xf9
 8001002:	f887 382d 	strb.w	r3, [r7, #2093]	; 0x82d

	BMS_IC[3][0] = 0x69;
 8001006:	2369      	movs	r3, #105	; 0x69
 8001008:	f887 382e 	strb.w	r3, [r7, #2094]	; 0x82e
	BMS_IC[3][1] = 0x28;
 800100c:	2328      	movs	r3, #40	; 0x28
 800100e:	f887 382f 	strb.w	r3, [r7, #2095]	; 0x82f
	BMS_IC[3][2] = 0x0F;
 8001012:	230f      	movs	r3, #15
 8001014:	f887 3830 	strb.w	r3, [r7, #2096]	; 0x830
	BMS_IC[3][3] = 0xC9;
 8001018:	23c9      	movs	r3, #201	; 0xc9
 800101a:	f887 3831 	strb.w	r3, [r7, #2097]	; 0x831
	BMS_IC[3][4] = 0x7F;
 800101e:	237f      	movs	r3, #127	; 0x7f
 8001020:	f887 3832 	strb.w	r3, [r7, #2098]	; 0x832
	BMS_IC[3][5] = 0xF9;
 8001024:	23f9      	movs	r3, #249	; 0xf9
 8001026:	f887 3833 	strb.w	r3, [r7, #2099]	; 0x833

	BMS_IC[4][0] = 0x69;
 800102a:	2369      	movs	r3, #105	; 0x69
 800102c:	f887 3834 	strb.w	r3, [r7, #2100]	; 0x834
	BMS_IC[4][1] = 0x28;
 8001030:	2328      	movs	r3, #40	; 0x28
 8001032:	f887 3835 	strb.w	r3, [r7, #2101]	; 0x835
	BMS_IC[4][2] = 0x0F;
 8001036:	230f      	movs	r3, #15
 8001038:	f887 3836 	strb.w	r3, [r7, #2102]	; 0x836
	BMS_IC[4][3] = 0xB9;
 800103c:	23b9      	movs	r3, #185	; 0xb9
 800103e:	f887 3837 	strb.w	r3, [r7, #2103]	; 0x837
	BMS_IC[4][4] = 0x7F;
 8001042:	237f      	movs	r3, #127	; 0x7f
 8001044:	f887 3838 	strb.w	r3, [r7, #2104]	; 0x838
	BMS_IC[4][5] = 0xF9;
 8001048:	23f9      	movs	r3, #249	; 0xf9
 800104a:	f887 3839 	strb.w	r3, [r7, #2105]	; 0x839

	BMS_IC[5][0] = 0x69;
 800104e:	2369      	movs	r3, #105	; 0x69
 8001050:	f887 383a 	strb.w	r3, [r7, #2106]	; 0x83a
	BMS_IC[5][1] = 0x28;
 8001054:	2328      	movs	r3, #40	; 0x28
 8001056:	f887 383b 	strb.w	r3, [r7, #2107]	; 0x83b
	BMS_IC[5][2] = 0x0F;
 800105a:	230f      	movs	r3, #15
 800105c:	f887 383c 	strb.w	r3, [r7, #2108]	; 0x83c
	BMS_IC[5][3] = 0xA9;
 8001060:	23a9      	movs	r3, #169	; 0xa9
 8001062:	f887 383d 	strb.w	r3, [r7, #2109]	; 0x83d
	BMS_IC[5][4] = 0x7F;
 8001066:	237f      	movs	r3, #127	; 0x7f
 8001068:	f887 383e 	strb.w	r3, [r7, #2110]	; 0x83e
	BMS_IC[5][5] = 0xF9;
 800106c:	23f9      	movs	r3, #249	; 0xf9
 800106e:	f887 383f 	strb.w	r3, [r7, #2111]	; 0x83f

	BMS_IC[6][0] = 0x69;
 8001072:	2369      	movs	r3, #105	; 0x69
 8001074:	f887 3840 	strb.w	r3, [r7, #2112]	; 0x840
	BMS_IC[6][1] = 0x28;
 8001078:	2328      	movs	r3, #40	; 0x28
 800107a:	f887 3841 	strb.w	r3, [r7, #2113]	; 0x841
	BMS_IC[6][2] = 0x0F;
 800107e:	230f      	movs	r3, #15
 8001080:	f887 3842 	strb.w	r3, [r7, #2114]	; 0x842
	BMS_IC[6][3] = 0x99;
 8001084:	2399      	movs	r3, #153	; 0x99
 8001086:	f887 3843 	strb.w	r3, [r7, #2115]	; 0x843
	BMS_IC[6][4] = 0x7F;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	f887 3844 	strb.w	r3, [r7, #2116]	; 0x844
	BMS_IC[6][5] = 0xF9;
 8001090:	23f9      	movs	r3, #249	; 0xf9
 8001092:	f887 3845 	strb.w	r3, [r7, #2117]	; 0x845

	BMS_IC[7][0] = 0x69;
 8001096:	2369      	movs	r3, #105	; 0x69
 8001098:	f887 3846 	strb.w	r3, [r7, #2118]	; 0x846
	BMS_IC[7][1] = 0x28;
 800109c:	2328      	movs	r3, #40	; 0x28
 800109e:	f887 3847 	strb.w	r3, [r7, #2119]	; 0x847
	BMS_IC[7][2] = 0x0F;
 80010a2:	230f      	movs	r3, #15
 80010a4:	f887 3848 	strb.w	r3, [r7, #2120]	; 0x848
	BMS_IC[7][3] = 0x89;
 80010a8:	2389      	movs	r3, #137	; 0x89
 80010aa:	f887 3849 	strb.w	r3, [r7, #2121]	; 0x849
	BMS_IC[7][4] = 0x7F;
 80010ae:	237f      	movs	r3, #127	; 0x7f
 80010b0:	f887 384a 	strb.w	r3, [r7, #2122]	; 0x84a
	BMS_IC[7][5] = 0xF9;
 80010b4:	23f9      	movs	r3, #249	; 0xf9
 80010b6:	f887 384b 	strb.w	r3, [r7, #2123]	; 0x84b

	BMS_IC[8][0] = 0x69;
 80010ba:	2369      	movs	r3, #105	; 0x69
 80010bc:	f887 384c 	strb.w	r3, [r7, #2124]	; 0x84c
	BMS_IC[8][1] = 0x08;
 80010c0:	2308      	movs	r3, #8
 80010c2:	f887 384d 	strb.w	r3, [r7, #2125]	; 0x84d
	BMS_IC[8][2] = 0x0F;
 80010c6:	230f      	movs	r3, #15
 80010c8:	f887 384e 	strb.w	r3, [r7, #2126]	; 0x84e
	BMS_IC[8][3] = 0xF9;
 80010cc:	23f9      	movs	r3, #249	; 0xf9
 80010ce:	f887 384f 	strb.w	r3, [r7, #2127]	; 0x84f
	BMS_IC[8][4] = 0x7F;
 80010d2:	237f      	movs	r3, #127	; 0x7f
 80010d4:	f887 3850 	strb.w	r3, [r7, #2128]	; 0x850
	BMS_IC[8][5] = 0xF9;
 80010d8:	23f9      	movs	r3, #249	; 0xf9
 80010da:	f887 3851 	strb.w	r3, [r7, #2129]	; 0x851

	BMS_IC[9][0] = 0x69;
 80010de:	2369      	movs	r3, #105	; 0x69
 80010e0:	f887 3852 	strb.w	r3, [r7, #2130]	; 0x852
	BMS_IC[9][1] = 0x08;
 80010e4:	2308      	movs	r3, #8
 80010e6:	f887 3853 	strb.w	r3, [r7, #2131]	; 0x853
	BMS_IC[9][2] = 0x0F;
 80010ea:	230f      	movs	r3, #15
 80010ec:	f887 3854 	strb.w	r3, [r7, #2132]	; 0x854
	BMS_IC[9][3] = 0xE9;
 80010f0:	23e9      	movs	r3, #233	; 0xe9
 80010f2:	f887 3855 	strb.w	r3, [r7, #2133]	; 0x855
	BMS_IC[9][4] = 0x7F;
 80010f6:	237f      	movs	r3, #127	; 0x7f
 80010f8:	f887 3856 	strb.w	r3, [r7, #2134]	; 0x856
	BMS_IC[9][5] = 0xF9;
 80010fc:	23f9      	movs	r3, #249	; 0xf9
 80010fe:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857

	BMS_IC[10][0] = 0x69;
 8001102:	2369      	movs	r3, #105	; 0x69
 8001104:	f887 3858 	strb.w	r3, [r7, #2136]	; 0x858
	BMS_IC[10][1] = 0x08;
 8001108:	2308      	movs	r3, #8
 800110a:	f887 3859 	strb.w	r3, [r7, #2137]	; 0x859
	BMS_IC[10][2] = 0x0F;
 800110e:	230f      	movs	r3, #15
 8001110:	f887 385a 	strb.w	r3, [r7, #2138]	; 0x85a
	BMS_IC[10][3] = 0xD9;
 8001114:	23d9      	movs	r3, #217	; 0xd9
 8001116:	f887 385b 	strb.w	r3, [r7, #2139]	; 0x85b
	BMS_IC[10][4] = 0x7F;
 800111a:	237f      	movs	r3, #127	; 0x7f
 800111c:	f887 385c 	strb.w	r3, [r7, #2140]	; 0x85c
	BMS_IC[10][5] = 0xF9;
 8001120:	23f9      	movs	r3, #249	; 0xf9
 8001122:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d

	BMS_IC[11][0] = 0x69;
 8001126:	2369      	movs	r3, #105	; 0x69
 8001128:	f887 385e 	strb.w	r3, [r7, #2142]	; 0x85e
	BMS_IC[11][1] = 0x08;
 800112c:	2308      	movs	r3, #8
 800112e:	f887 385f 	strb.w	r3, [r7, #2143]	; 0x85f
	BMS_IC[11][2] = 0x0F;
 8001132:	230f      	movs	r3, #15
 8001134:	f887 3860 	strb.w	r3, [r7, #2144]	; 0x860
	BMS_IC[11][3] = 0xC9;
 8001138:	23c9      	movs	r3, #201	; 0xc9
 800113a:	f887 3861 	strb.w	r3, [r7, #2145]	; 0x861
	BMS_IC[11][4] = 0x7F;
 800113e:	237f      	movs	r3, #127	; 0x7f
 8001140:	f887 3862 	strb.w	r3, [r7, #2146]	; 0x862
	BMS_IC[11][5] = 0xF9;
 8001144:	23f9      	movs	r3, #249	; 0xf9
 8001146:	f887 3863 	strb.w	r3, [r7, #2147]	; 0x863
	uint8_t tempindex = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
	uint8_t increment = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 38a6 	strb.w	r3, [r7, #2214]	; 0x8a6
	uint16_t data = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800115c:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001160:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f9e0 	bl	800152a <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800116a:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fa11 	bl	8001596 <TimerPacket_FixedPulse>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 809b 	beq.w	80012b2 <main+0x3b2>
//			int packvoltage = 0;

			//starting for printing over serial
//			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 800117c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8001180:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fcef 	bl	8008b74 <memset>
			char char_to_str[2];
			char_to_str[0] = '\n';
 8001196:	230a      	movs	r3, #10
 8001198:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
			char_to_str[1] = '\0';
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
//			LTC_ReadRawCellVoltages((uint16_t*) read_volt);
//			packvoltage = LTC_CalcPackVoltage((uint16_t*) read_volt);
			//stop reading voltages

			//start sending to mux to read temperatures
			LTC_Wakeup_Sleep();
 80011a2:	f7ff fa19 	bl	80005d8 <LTC_Wakeup_Sleep>
			ltc6811_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 80011a6:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80011aa:	f607 011c 	addw	r1, r7, #2076	; 0x81c
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	440b      	add	r3, r1
 80011b8:	4619      	mov	r1, r3
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fa2a 	bl	8000614 <ltc6811_wrcomm>
			LTC_Wakeup_Idle();
 80011c0:	f7ff f9ea 	bl	8000598 <LTC_Wakeup_Idle>
			ltc6811_stcomm();
 80011c4:	f7ff faa2 	bl	800070c <ltc6811_stcomm>
			//end sending to mux to read temperatures

			HAL_Delay(1000);
 80011c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011cc:	f000 fc1a 	bl	8001a04 <HAL_Delay>
//			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
//			strncat(out_buf, packV, 30);
//			strncat(out_buf, char_to_str, 2);
			//end for printing over serial for pack voltage

			LTC_Wakeup_Idle();
 80011d0:	f7ff f9e2 	bl	8000598 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, 0); //doing GPIO all conversion
 80011d4:	2302      	movs	r3, #2
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fb9b 	bl	8000914 <LTC_ADAX>
			LTC_PollAdc();
 80011de:	f7ff fbd9 	bl	8000994 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t*) read_auxreg); // Set to read back all aux registers
 80011e2:	f8d7 0890 	ldr.w	r0, [r7, #2192]	; 0x890
 80011e6:	f7ff fac9 	bl	800077c <LTC_ReadRawCellTemps>
			data = read_auxreg[0];
 80011ea:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
			memcpy((void*) &read_temp[tempindex], (void*) &data, (size_t) 2);
 80011f4:	f897 38a7 	ldrb.w	r3, [r7, #2215]	; 0x8a7
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 80011fe:	4413      	add	r3, r2
 8001200:	f8b7 281a 	ldrh.w	r2, [r7, #2074]	; 0x81a
 8001204:	801a      	strh	r2, [r3, #0]
			//read_temp[tempindex] = (uint16_t) read_auxreg[0];

			//start for printing over serial for voltages
			for (uint8_t i = 0; i < 12; i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
 800120c:	e022      	b.n	8001254 <main+0x354>
				sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 800120e:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 800121e:	4413      	add	r3, r2
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	f607 0004 	addw	r0, r7, #2052	; 0x804
 8001226:	460a      	mov	r2, r1
 8001228:	492e      	ldr	r1, [pc, #184]	; (80012e4 <main+0x3e4>)
 800122a:	f007 fc83 	bl	8008b34 <siprintf>
				strncat(out_buf, buf, 20);
 800122e:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8001232:	463b      	mov	r3, r7
 8001234:	2214      	movs	r2, #20
 8001236:	4618      	mov	r0, r3
 8001238:	f007 fca4 	bl	8008b84 <strncat>
				strncat(out_buf, char_to_str, 2);
 800123c:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001240:	463b      	mov	r3, r7
 8001242:	2202      	movs	r2, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f007 fc9d 	bl	8008b84 <strncat>
			for (uint8_t i = 0; i < 12; i++) {
 800124a:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 800124e:	3301      	adds	r3, #1
 8001250:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
 8001254:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d9d8      	bls.n	800120e <main+0x30e>
			}
			strncat(out_buf, char_to_str, 2);
 800125c:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001260:	463b      	mov	r3, r7
 8001262:	2202      	movs	r2, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f007 fc8d 	bl	8008b84 <strncat>
			HAL_Delay(400);
 800126a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800126e:	f000 fbc9 	bl	8001a04 <HAL_Delay>
			USB_Transmit(out_buf, strlen(out_buf));
 8001272:	463b      	mov	r3, r7
 8001274:	4618      	mov	r0, r3
 8001276:	f7fe ffd5 	bl	8000224 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	463b      	mov	r3, r7
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fea3 	bl	8007fce <USB_Transmit>
			//end for printing over serial for voltages

			if (increment != 0) {
 8001288:	f897 38a6 	ldrb.w	r3, [r7, #2214]	; 0x8a6
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <main+0x39a>
				tempindex++; //incrementing the index
 8001290:	f897 38a7 	ldrb.w	r3, [r7, #2215]	; 0x8a7
 8001294:	3301      	adds	r3, #1
 8001296:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
			}

			if (tempindex == 12) {
 800129a:	f897 38a7 	ldrb.w	r3, [r7, #2215]	; 0x8a7
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	d102      	bne.n	80012a8 <main+0x3a8>
				tempindex = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
			}
			increment++;
 80012a8:	f897 38a6 	ldrb.w	r3, [r7, #2214]	; 0x8a6
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 38a6 	strb.w	r3, [r7, #2214]	; 0x8a6

		}

		if (TimerPacket_FixedPulse(&timerpacket_can1)) {
 80012b2:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f96d 	bl	8001596 <TimerPacket_FixedPulse>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f43f af4c 	beq.w	800115c <main+0x25c>

			uint16_t CAN_ID = 0x630;
 80012c4:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80012c8:	f8a7 38a2 	strh.w	r3, [r7, #2210]	; 0x8a2
			setCANId(CAN_ID);
 80012cc:	f8b7 38a2 	ldrh.w	r3, [r7, #2210]	; 0x8a2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fd8f 	bl	8000df4 <setCANId>
			for (int i = 0; i < NUM_CELLS; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 80012dc:	e093      	b.n	8001406 <main+0x506>
 80012de:	bf00      	nop
 80012e0:	40011000 	.word	0x40011000
 80012e4:	08009380 	.word	0x08009380
				if (i % 4 == 0) {
 80012e8:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d16e      	bne.n	80013d2 <main+0x4d2>
					uint8_t temp_volt = i;
 80012f4:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 80012f8:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
					msg.data[0] = read_volt[temp_volt];
 80012fc:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 8001306:	4413      	add	r3, r2
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b41      	ldr	r3, [pc, #260]	; (8001414 <main+0x514>)
 800130e:	771a      	strb	r2, [r3, #28]
					msg.data[1] = read_volt[temp_volt] >> 8;
 8001310:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 800131a:	4413      	add	r3, r2
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <main+0x514>)
 8001326:	775a      	strb	r2, [r3, #29]
					temp_volt += 1;
 8001328:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800132c:	3301      	adds	r3, #1
 800132e:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
					msg.data[2] = read_volt[temp_volt];
 8001332:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 800133c:	4413      	add	r3, r2
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <main+0x514>)
 8001344:	779a      	strb	r2, [r3, #30]
					msg.data[3] = read_volt[temp_volt] >> 8;
 8001346:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 8001350:	4413      	add	r3, r2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <main+0x514>)
 800135c:	77da      	strb	r2, [r3, #31]
					temp_volt += 1;
 800135e:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001362:	3301      	adds	r3, #1
 8001364:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
					msg.data[4] = read_volt[temp_volt];
 8001368:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 8001372:	4413      	add	r3, r2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <main+0x514>)
 800137a:	f883 2020 	strb.w	r2, [r3, #32]
					msg.data[5] = read_volt[temp_volt] >> 8;
 800137e:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 8001388:	4413      	add	r3, r2
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <main+0x514>)
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					temp_volt += 1;
 8001398:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800139c:	3301      	adds	r3, #1
 800139e:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
					msg.data[6] = read_volt[temp_volt];
 80013a2:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 80013ac:	4413      	add	r3, r2
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <main+0x514>)
 80013b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					msg.data[7] = read_volt[temp_volt] >> 8;
 80013b8:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	f8d7 2898 	ldr.w	r2, [r7, #2200]	; 0x898
 80013c2:	4413      	add	r3, r2
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <main+0x514>)
 80013ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				}
				if (i % 4 == 0) {
 80013d2:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <main+0x4f2>
					CAN_ID = CAN_ID + 0x01;
 80013de:	f8b7 38a2 	ldrh.w	r3, [r7, #2210]	; 0x8a2
 80013e2:	3301      	adds	r3, #1
 80013e4:	f8a7 38a2 	strh.w	r3, [r7, #2210]	; 0x8a2
					setCANId(CAN_ID);
 80013e8:	f8b7 38a2 	ldrh.w	r3, [r7, #2210]	; 0x8a2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd01 	bl	8000df4 <setCANId>
				}
				HAL_Delay(10);
 80013f2:	200a      	movs	r0, #10
 80013f4:	f000 fb06 	bl	8001a04 <HAL_Delay>
				CAN1_Send();
 80013f8:	f7ff fcd2 	bl	8000da0 <CAN1_Send>
			for (int i = 0; i < NUM_CELLS; i++) {
 80013fc:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8001406:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 800140a:	2b0b      	cmp	r3, #11
 800140c:	f77f af6c 	ble.w	80012e8 <main+0x3e8>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001410:	e6a4      	b.n	800115c <main+0x25c>
 8001412:	bf00      	nop
 8001414:	2000024c 	.word	0x2000024c

08001418 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b09c      	sub	sp, #112	; 0x70
 800141c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800141e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001422:	2238      	movs	r2, #56	; 0x38
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f007 fba4 	bl	8008b74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2220      	movs	r2, #32
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f007 fb96 	bl	8008b74 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001452:	2304      	movs	r3, #4
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001468:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800146a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800146e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001474:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001478:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800147e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fb1a 	bl	8003abc <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x7a>
		Error_Handler();
 800148e:	f000 f89f 	bl	80015d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fe1a 	bl	80040e8 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xa6>
		Error_Handler();
 80014ba:	f000 f889 	bl	80015d0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80014be:	2312      	movs	r3, #18
 80014c0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c6:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 ffd8 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xc6>
		Error_Handler();
 80014da:	f000 f879 	bl	80015d0 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <SystemClock_Config+0xd4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3770      	adds	r7, #112	; 0x70
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	42420070 	.word	0x42420070

080014f0 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f001 f977 	bl	80027f8 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001536:	f000 fa5b 	bl	80019f0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	429a      	cmp	r2, r3
 800154e:	d90b      	bls.n	8001568 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f001 f964 	bl	8002828 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
	}
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800159e:	f000 fa27 	bl	80019f0 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1ad2      	subs	r2, r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d905      	bls.n	80015c6 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI1_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x64>)
 8001610:	2228      	movs	r2, #40	; 0x28
 8001612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI1_Init+0x64>)
 800162e:	f003 f85b 	bl	80046e8 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001638:	f7ff ffca 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000298 	.word	0x20000298
 8001644:	40013000 	.word	0x40013000

08001648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d12f      	bne.n	80016c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800166e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001698:	23a0      	movs	r3, #160	; 0xa0
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	480b      	ldr	r0, [pc, #44]	; (80016d8 <HAL_SPI_MspInit+0x90>)
 80016ac:	f000 ff20 	bl	80024f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b0:	2340      	movs	r3, #64	; 0x40
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_SPI_MspInit+0x90>)
 80016c4:	f000 ff14 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40013000 	.word	0x40013000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800

080016dc <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 80016e0:	2201      	movs	r2, #1
 80016e2:	2110      	movs	r1, #16
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <LTC_nCS_High+0x14>)
 80016e6:	f001 f887 	bl	80027f8 <HAL_GPIO_WritePin>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010800 	.word	0x40010800

080016f4 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80016f8:	2200      	movs	r2, #0
 80016fa:	2110      	movs	r1, #16
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <LTC_nCS_Low+0x14>)
 80016fe:	f001 f87b 	bl	80027f8 <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010800 	.word	0x40010800

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_MspInit+0x5c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <HAL_MspInit+0x5c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_MspInit+0x5c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_MspInit+0x5c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_MspInit+0x60>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_MspInit+0x60>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f909 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OTG_FS_IRQHandler+0x10>)
 80017c6:	f001 f987 	bl	8002ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20001008 	.word	0x20001008

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f007 f9e2 	bl	8008bcc <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20010000 	.word	0x20010000
 8001834:	00000400 	.word	0x00000400
 8001838:	200002f0 	.word	0x200002f0
 800183c:	20001878 	.word	0x20001878

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM7_Init+0x64>)
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_TIM7_Init+0x68>)
 800185e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_TIM7_Init+0x64>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM7_Init+0x64>)
 800187c:	f003 fcbc 	bl	80051f8 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001886:	f7ff fea3 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM7_Init+0x64>)
 8001898:	f003 fd6a 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80018a2:	f7ff fe95 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002f4 	.word	0x200002f4
 80018b4:	40001400 	.word	0x40001400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_TIM_Base_MspInit+0x34>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10b      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_TIM_Base_MspInit+0x38>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_TIM_Base_MspInit+0x38>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_TIM_Base_MspInit+0x38>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40001400 	.word	0x40001400
 80018f0:	40021000 	.word	0x40021000

080018f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f4:	f7ff ffa4 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018fa:	490c      	ldr	r1, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001910:	4c09      	ldr	r4, [pc, #36]	; (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800191e:	f007 f95b 	bl	8008bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001922:	f7ff faed 	bl	8000f00 <main>
  bx lr
 8001926:	4770      	bx	lr
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001930:	08009850 	.word	0x08009850
  ldr r2, =_sbss
 8001934:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001938:	20001874 	.word	0x20001874

0800193c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x28>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 fd8b 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fed6 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fda3 	bl	80024d6 <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 fd6b 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_IncTick+0x20>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000008 	.word	0x20000008
 80019ec:	2000033c 	.word	0x2000033c

080019f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_GetTick+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	2000033c 	.word	0x2000033c

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffe0 	bl	80019f0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0be      	b.n	8001bec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f876 	bl	8000b7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f9ab 	bl	8001dec <ADC_ConversionStop_Disable>
 8001a96:	4603      	mov	r3, r0
 8001a98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8099 	bne.w	8001bda <HAL_ADC_Init+0x18e>
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 8095 	bne.w	8001bda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab8:	f023 0302 	bic.w	r3, r3, #2
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001acc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ad4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae4:	d003      	beq.n	8001aee <HAL_ADC_Init+0xa2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_ADC_Init+0xa8>
 8001aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_Init+0xaa>
 8001af4:	2300      	movs	r3, #0
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7d1b      	ldrb	r3, [r3, #20]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d119      	bne.n	8001b38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7b1b      	ldrb	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	035a      	lsls	r2, r3, #13
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e00b      	b.n	8001b38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_ADC_Init+0x1a8>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b68:	d003      	beq.n	8001b72 <HAL_ADC_Init+0x126>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d104      	bne.n	8001b7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	051b      	lsls	r3, r3, #20
 8001b7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_ADC_Init+0x1ac>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb6:	e018      	b.n	8001bea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	f023 0312 	bic.w	r3, r3, #18
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd8:	e007      	b.n	8001bea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f043 0210 	orr.w	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bf8:	ff1f0efe 	.word	0xff1f0efe

08001bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x20>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0dc      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x1da>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d81c      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b05      	subs	r3, #5
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4019      	ands	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b05      	subs	r3, #5
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
 8001c64:	e03c      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d81c      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	; 0x23
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4019      	ands	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b23      	subs	r3, #35	; 0x23
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca6:	e01b      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b41      	subs	r3, #65	; 0x41
 8001cba:	221f      	movs	r2, #31
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b41      	subs	r3, #65	; 0x41
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d91c      	bls.n	8001d22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	3b1e      	subs	r3, #30
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	e019      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6919      	ldr	r1, [r3, #16]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	2207      	movs	r2, #7
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6898      	ldr	r0, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d003      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d132      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d125      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d126      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d11a      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9a      	lsrs	r2, r3, #18
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x1b2>
 8001dba:	e007      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012400 	.word	0x40012400
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12e      	bne.n	8001e64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e16:	f7ff fdeb 	bl	80019f0 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e1c:	e01b      	b.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1e:	f7ff fde7 	bl	80019f0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d914      	bls.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10d      	bne.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e007      	b.n	8001e66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d0dc      	beq.n	8001e1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0ed      	b.n	800205c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe ff11 	bl	8000cb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea2:	f7ff fda5 	bl	80019f0 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea8:	e012      	b.n	8001ed0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eaa:	f7ff fda1 	bl	80019f0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b0a      	cmp	r3, #10
 8001eb6:	d90b      	bls.n	8001ed0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0c5      	b.n	800205c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0e5      	beq.n	8001eaa <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0202 	bic.w	r2, r2, #2
 8001eec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eee:	f7ff fd7f 	bl	80019f0 <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef4:	e012      	b.n	8001f1c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef6:	f7ff fd7b 	bl	80019f0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b0a      	cmp	r3, #10
 8001f02:	d90b      	bls.n	8001f1c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2205      	movs	r2, #5
 8001f14:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e09f      	b.n	800205c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e5      	bne.n	8001ef6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e1b      	ldrb	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e5b      	ldrb	r3, [r3, #25]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7e9b      	ldrb	r3, [r3, #26]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0220 	bic.w	r2, r2, #32
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7edb      	ldrb	r3, [r3, #27]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0210 	bic.w	r2, r2, #16
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0210 	orr.w	r2, r2, #16
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0208 	orr.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7f5b      	ldrb	r3, [r3, #29]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0204 	orr.w	r2, r2, #4
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e007      	b.n	8002026 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0204 	bic.w	r2, r2, #4
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	ea42 0103 	orr.w	r1, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d12e      	bne.n	80020d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff fcae 	bl	80019f0 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002096:	e012      	b.n	80020be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002098:	f7ff fcaa 	bl	80019f0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d90b      	bls.n	80020be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2205      	movs	r2, #5
 80020b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e012      	b.n	80020e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e5      	bne.n	8002098 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d003      	beq.n	8002118 <HAL_CAN_AddTxMessage+0x2c>
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	2b02      	cmp	r3, #2
 8002114:	f040 80ad 	bne.w	8002272 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8095 	beq.w	8002262 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	0e1b      	lsrs	r3, r3, #24
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002142:	2201      	movs	r2, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	6809      	ldr	r1, [r1, #0]
 8002162:	431a      	orrs	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3318      	adds	r3, #24
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	440b      	add	r3, r1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e00f      	b.n	8002190 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800217a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002184:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	440b      	add	r3, r1
 800218e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3318      	adds	r3, #24
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	440b      	add	r3, r1
 80021a0:	3304      	adds	r3, #4
 80021a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	7d1b      	ldrb	r3, [r3, #20]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d111      	bne.n	80021d0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3318      	adds	r3, #24
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3318      	adds	r3, #24
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	440b      	add	r3, r1
 80021cc:	3304      	adds	r3, #4
 80021ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3307      	adds	r3, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	061a      	lsls	r2, r3, #24
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3306      	adds	r3, #6
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3305      	adds	r3, #5
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	4313      	orrs	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	3204      	adds	r2, #4
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	4610      	mov	r0, r2
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	ea43 0200 	orr.w	r2, r3, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	440b      	add	r3, r1
 8002202:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002206:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3303      	adds	r3, #3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	061a      	lsls	r2, r3, #24
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3302      	adds	r3, #2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3301      	adds	r3, #1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	4313      	orrs	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	4610      	mov	r0, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6811      	ldr	r1, [r2, #0]
 800222e:	ea43 0200 	orr.w	r2, r3, r0
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	440b      	add	r3, r1
 8002238:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800223c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3318      	adds	r3, #24
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3318      	adds	r3, #24
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	440b      	add	r3, r1
 800225c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e00e      	b.n	8002280 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e006      	b.n	8002280 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3724      	adds	r7, #36	; 0x24
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d002      	beq.n	80022a8 <HAL_CAN_ActivateNotification+0x1e>
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d109      	bne.n	80022bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6959      	ldr	r1, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e006      	b.n	80022ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <__NVIC_EnableIRQ+0x34>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff90 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff2d 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff42 	bl	800231c <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff90 	bl	80023c4 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5f 	bl	8002370 <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff35 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002502:	e169      	b.n	80027d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002504:	2201      	movs	r2, #1
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 8158 	bne.w	80027d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a9a      	ldr	r2, [pc, #616]	; (8002790 <HAL_GPIO_Init+0x2a0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d05e      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
 800252c:	4a98      	ldr	r2, [pc, #608]	; (8002790 <HAL_GPIO_Init+0x2a0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d875      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 8002532:	4a98      	ldr	r2, [pc, #608]	; (8002794 <HAL_GPIO_Init+0x2a4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d058      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
 8002538:	4a96      	ldr	r2, [pc, #600]	; (8002794 <HAL_GPIO_Init+0x2a4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d86f      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 800253e:	4a96      	ldr	r2, [pc, #600]	; (8002798 <HAL_GPIO_Init+0x2a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d052      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
 8002544:	4a94      	ldr	r2, [pc, #592]	; (8002798 <HAL_GPIO_Init+0x2a8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d869      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 800254a:	4a94      	ldr	r2, [pc, #592]	; (800279c <HAL_GPIO_Init+0x2ac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d04c      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
 8002550:	4a92      	ldr	r2, [pc, #584]	; (800279c <HAL_GPIO_Init+0x2ac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d863      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 8002556:	4a92      	ldr	r2, [pc, #584]	; (80027a0 <HAL_GPIO_Init+0x2b0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d046      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
 800255c:	4a90      	ldr	r2, [pc, #576]	; (80027a0 <HAL_GPIO_Init+0x2b0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d85d      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 8002562:	2b12      	cmp	r3, #18
 8002564:	d82a      	bhi.n	80025bc <HAL_GPIO_Init+0xcc>
 8002566:	2b12      	cmp	r3, #18
 8002568:	d859      	bhi.n	800261e <HAL_GPIO_Init+0x12e>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <HAL_GPIO_Init+0x80>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	080025eb 	.word	0x080025eb
 8002574:	080025c5 	.word	0x080025c5
 8002578:	080025d7 	.word	0x080025d7
 800257c:	08002619 	.word	0x08002619
 8002580:	0800261f 	.word	0x0800261f
 8002584:	0800261f 	.word	0x0800261f
 8002588:	0800261f 	.word	0x0800261f
 800258c:	0800261f 	.word	0x0800261f
 8002590:	0800261f 	.word	0x0800261f
 8002594:	0800261f 	.word	0x0800261f
 8002598:	0800261f 	.word	0x0800261f
 800259c:	0800261f 	.word	0x0800261f
 80025a0:	0800261f 	.word	0x0800261f
 80025a4:	0800261f 	.word	0x0800261f
 80025a8:	0800261f 	.word	0x0800261f
 80025ac:	0800261f 	.word	0x0800261f
 80025b0:	0800261f 	.word	0x0800261f
 80025b4:	080025cd 	.word	0x080025cd
 80025b8:	080025e1 	.word	0x080025e1
 80025bc:	4a79      	ldr	r2, [pc, #484]	; (80027a4 <HAL_GPIO_Init+0x2b4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025c2:	e02c      	b.n	800261e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	623b      	str	r3, [r7, #32]
          break;
 80025ca:	e029      	b.n	8002620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	3304      	adds	r3, #4
 80025d2:	623b      	str	r3, [r7, #32]
          break;
 80025d4:	e024      	b.n	8002620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	3308      	adds	r3, #8
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e01f      	b.n	8002620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	330c      	adds	r3, #12
 80025e6:	623b      	str	r3, [r7, #32]
          break;
 80025e8:	e01a      	b.n	8002620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025f2:	2304      	movs	r3, #4
 80025f4:	623b      	str	r3, [r7, #32]
          break;
 80025f6:	e013      	b.n	8002620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002600:	2308      	movs	r3, #8
 8002602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	611a      	str	r2, [r3, #16]
          break;
 800260a:	e009      	b.n	8002620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800260c:	2308      	movs	r3, #8
 800260e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	615a      	str	r2, [r3, #20]
          break;
 8002616:	e003      	b.n	8002620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
          break;
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x130>
          break;
 800261e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d801      	bhi.n	800262a <HAL_GPIO_Init+0x13a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	e001      	b.n	800262e <HAL_GPIO_Init+0x13e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d802      	bhi.n	800263c <HAL_GPIO_Init+0x14c>
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x152>
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	3b08      	subs	r3, #8
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	210f      	movs	r1, #15
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	401a      	ands	r2, r3
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	431a      	orrs	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80b1 	beq.w	80027d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002670:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x2b8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x2b8>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_GPIO_Init+0x2b8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002688:	4a48      	ldr	r2, [pc, #288]	; (80027ac <HAL_GPIO_Init+0x2bc>)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <HAL_GPIO_Init+0x2c0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_GPIO_Init+0x1ec>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_GPIO_Init+0x2c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00d      	beq.n	80026d8 <HAL_GPIO_Init+0x1e8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <HAL_GPIO_Init+0x2c8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <HAL_GPIO_Init+0x1e4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3d      	ldr	r2, [pc, #244]	; (80027bc <HAL_GPIO_Init+0x2cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_GPIO_Init+0x1e0>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e006      	b.n	80026de <HAL_GPIO_Init+0x1ee>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e004      	b.n	80026de <HAL_GPIO_Init+0x1ee>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e002      	b.n	80026de <HAL_GPIO_Init+0x1ee>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_GPIO_Init+0x1ee>
 80026dc:	2300      	movs	r3, #0
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	f002 0203 	and.w	r2, r2, #3
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	4093      	lsls	r3, r2
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ee:	492f      	ldr	r1, [pc, #188]	; (80027ac <HAL_GPIO_Init+0x2bc>)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	492c      	ldr	r1, [pc, #176]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	4928      	ldr	r1, [pc, #160]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	43db      	mvns	r3, r3
 8002746:	491e      	ldr	r1, [pc, #120]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002748:	4013      	ands	r3, r2
 800274a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4918      	ldr	r1, [pc, #96]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	43db      	mvns	r3, r3
 800276e:	4914      	ldr	r1, [pc, #80]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002770:	4013      	ands	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d021      	beq.n	80027c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e021      	b.n	80027d2 <HAL_GPIO_Init+0x2e2>
 800278e:	bf00      	nop
 8002790:	10320000 	.word	0x10320000
 8002794:	10310000 	.word	0x10310000
 8002798:	10220000 	.word	0x10220000
 800279c:	10210000 	.word	0x10210000
 80027a0:	10120000 	.word	0x10120000
 80027a4:	10110000 	.word	0x10110000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40010800 	.word	0x40010800
 80027b4:	40010c00 	.word	0x40010c00
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40011400 	.word	0x40011400
 80027c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_GPIO_Init+0x304>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	4909      	ldr	r1, [pc, #36]	; (80027f4 <HAL_GPIO_Init+0x304>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f47f ae8e 	bne.w	8002504 <HAL_GPIO_Init+0x14>
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	372c      	adds	r7, #44	; 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43d9      	mvns	r1, r3
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	400b      	ands	r3, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800285a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285c:	b08f      	sub	sp, #60	; 0x3c
 800285e:	af0a      	add	r7, sp, #40	; 0x28
 8002860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e10f      	b.n	8002a8c <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 fda2 	bl	80083d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2203      	movs	r2, #3
 8002890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fe94 	bl	80055d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	687e      	ldr	r6, [r7, #4]
 80028b8:	466d      	mov	r5, sp
 80028ba:	f106 0410 	add.w	r4, r6, #16
 80028be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ce:	1d33      	adds	r3, r6, #4
 80028d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f002 fdb2 	bl	800543c <USB_CoreInit>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0d0      	b.n	8002a8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fe81 	bl	80055f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e04a      	b.n	8002992 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	333d      	adds	r3, #61	; 0x3d
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	333c      	adds	r3, #60	; 0x3c
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	b298      	uxth	r0, r3
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	3356      	adds	r3, #86	; 0x56
 8002938:	4602      	mov	r2, r0
 800293a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3340      	adds	r3, #64	; 0x40
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3344      	adds	r3, #68	; 0x44
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3348      	adds	r3, #72	; 0x48
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	3301      	adds	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d3af      	bcc.n	80028fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e044      	b.n	8002a2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d3b5      	bcc.n	80029a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	687e      	ldr	r6, [r7, #4]
 8002a3e:	466d      	mov	r5, sp
 8002a40:	f106 0410 	add.w	r4, r6, #16
 8002a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a54:	1d33      	adds	r3, r6, #4
 8002a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	f002 fe19 	bl	8005690 <USB_DevInit>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e00d      	b.n	8002a8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fda3 	bl	80065d0 <USB_DevDisconnect>

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_Start+0x16>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e012      	b.n	8002ad0 <HAL_PCD_Start+0x3c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fd7e 	bl	80055b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 fd65 	bl	8006590 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b08d      	sub	sp, #52	; 0x34
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fe1c 	bl	800672c <USB_GetMode>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 8443 	bne.w	8003382 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fd85 	bl	8006610 <USB_ReadInterrupts>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8439 	beq.w	8003380 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fd72 	bl	8006610 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d107      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f002 0202 	and.w	r2, r2, #2
 8002b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fd60 	bl	8006610 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d161      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	0c5b      	lsrs	r3, r3, #17
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d124      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d035      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a38      	ldr	r0, [r7, #32]
 8002bb6:	f003 fb9d 	bl	80062f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc6:	441a      	add	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd8:	441a      	add	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	615a      	str	r2, [r3, #20]
 8002bde:	e016      	b.n	8002c0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d110      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6a38      	ldr	r0, [r7, #32]
 8002bf8:	f003 fb7c 	bl	80062f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c08:	441a      	add	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0210 	orr.w	r2, r2, #16
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fcf4 	bl	8006610 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c32:	f040 80a7 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fcf8 	bl	8006634 <USB_ReadDevAllOutEpInterrupt>
 8002c44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c46:	e099      	b.n	8002d7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 808e 	beq.w	8002d70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fd1a 	bl	8006698 <USB_ReadDevOutEPInterrupt>
 8002c64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2301      	movs	r3, #1
 8002c80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fe41 	bl	800390c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fe7d 	bl	80039a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d030      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d109      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	78db      	ldrb	r3, [r3, #3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f005 fc44 	bl	80085ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	2302      	movs	r3, #2
 8002d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2320      	movs	r3, #32
 8002d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f af62 	bne.w	8002c48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fc41 	bl	8006610 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d98:	f040 80a4 	bne.w	8002ee4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fc60 	bl	8006666 <USB_ReadDevAllInEpInterrupt>
 8002da6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dac:	e096      	b.n	8002edc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 808b 	beq.w	8002ed0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fc84 	bl	80066d2 <USB_ReadDevInEPInterrupt>
 8002dca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d020      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	2201      	movs	r2, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69f9      	ldr	r1, [r7, #28]
 8002df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002df6:	4013      	ands	r3, r2
 8002df8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f005 fb4f 	bl	80084b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2308      	movs	r3, #8
 8002e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	2340      	movs	r3, #64	; 0x40
 8002e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d023      	beq.n	8002ebe <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e78:	6a38      	ldr	r0, [r7, #32]
 8002e7a:	f002 fd2b 	bl	80058d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	3338      	adds	r3, #56	; 0x38
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f005 fb92 	bl	80085d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2302      	movs	r3, #2
 8002ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fc96 	bl	80037fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f47f af65 	bne.w	8002dae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fb91 	bl	8006610 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef8:	d114      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f005 fb3e 	bl	8008590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fb71 	bl	8006610 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f38:	d112      	bne.n	8002f60 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f005 fafa 	bl	8008544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f5e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fb53 	bl	8006610 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	f040 80b5 	bne.w	80030e2 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2110      	movs	r1, #16
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 fc9e 	bl	80058d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9c:	e046      	b.n	800302c <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002faa:	461a      	mov	r2, r3
 8002fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc2:	0151      	lsls	r1, r2, #5
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fe4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff6:	0151      	lsls	r1, r2, #5
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	440a      	add	r2, r1
 8002ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003016:	0151      	lsls	r1, r2, #5
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	440a      	add	r2, r1
 800301c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003024:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	3301      	adds	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d3b3      	bcc.n	8002f9e <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003044:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003048:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003062:	f043 030b 	orr.w	r3, r3, #11
 8003066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003078:	f043 030b 	orr.w	r3, r3, #11
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	e015      	b.n	80030ac <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003092:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003096:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f043 030b 	orr.w	r3, r3, #11
 80030aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f003 fb5d 	bl	800678c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fa92 	bl	8006610 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	d124      	bne.n	8003142 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fb22 	bl	8006746 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fc60 	bl	80059cc <USB_GetDevSpeed>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	f001 f98c 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 800311c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	4620      	mov	r0, r4
 8003128:	f002 f9aa 	bl	8005480 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 f9ea 	bl	8008506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003140:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fa62 	bl	8006610 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d10a      	bne.n	800316c <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f005 f9c7 	bl	80084ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f002 0208 	and.w	r2, r2, #8
 800316a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fa4d 	bl	8006610 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d122      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318c:	2301      	movs	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
 8003190:	e014      	b.n	80031bc <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 faf2 	bl	800379a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	3301      	adds	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3e5      	bcc.n	8003192 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fa20 	bl	8006610 <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d13b      	bne.n	8003254 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
 80031e0:	e02b      	b.n	800323a <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3340      	adds	r3, #64	; 0x40
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d115      	bne.n	8003234 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	da12      	bge.n	8003234 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	333f      	adds	r3, #63	; 0x3f
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fab3 	bl	800379a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	3301      	adds	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	429a      	cmp	r2, r3
 8003242:	d3ce      	bcc.n	80031e2 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 f9d9 	bl	8006610 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003268:	d155      	bne.n	8003316 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	e045      	b.n	80032fc <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d12e      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003298:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	da2b      	bge.n	80032f6 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d121      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	6053      	str	r3, [r2, #4]
            break;
 80032f4:	e007      	b.n	8003306 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	3301      	adds	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	429a      	cmp	r2, r3
 8003304:	d3b4      	bcc.n	8003270 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 f978 	bl	8006610 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d10a      	bne.n	8003342 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f005 f961 	bl	80085f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f003 f962 	bl	8006610 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d115      	bne.n	8003382 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f005 f951 	bl	8008610 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e000      	b.n	8003382 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8003380:	bf00      	nop
    }
  }
}
 8003382:	3734      	adds	r7, #52	; 0x34
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_SetAddress+0x1a>
 800339e:	2302      	movs	r3, #2
 80033a0:	e013      	b.n	80033ca <HAL_PCD_SetAddress+0x42>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 f8c3 	bl	8006546 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	4608      	mov	r0, r1
 80033dc:	4611      	mov	r1, r2
 80033de:	461a      	mov	r2, r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	70fb      	strb	r3, [r7, #3]
 80033e4:	460b      	mov	r3, r1
 80033e6:	803b      	strh	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da0f      	bge.n	8003418 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	3338      	adds	r3, #56	; 0x38
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	705a      	strb	r2, [r3, #1]
 8003416:	e00f      	b.n	8003438 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003444:	883a      	ldrh	r2, [r7, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	78ba      	ldrb	r2, [r7, #2]
 800344e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003462:	78bb      	ldrb	r3, [r7, #2]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d102      	bne.n	800346e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_PCD_EP_Open+0xaa>
 8003478:	2302      	movs	r3, #2
 800347a:	e00e      	b.n	800349a <HAL_PCD_EP_Open+0xc8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 fabc 	bl	8005a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003498:	7afb      	ldrb	r3, [r7, #11]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da0f      	bge.n	80034d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	3338      	adds	r3, #56	; 0x38
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	705a      	strb	r2, [r3, #1]
 80034d4:	e00f      	b.n	80034f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	3304      	adds	r3, #4
 80034ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_EP_Close+0x6e>
 800350c:	2302      	movs	r3, #2
 800350e:	e00e      	b.n	800352e <HAL_PCD_EP_Close+0x8c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 faf8 	bl	8005b14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	460b      	mov	r3, r1
 8003544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003578:	7afb      	ldrb	r3, [r7, #11]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	b2da      	uxtb	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fb9e 	bl	8005ccc <USB_EPStartXfer>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80035bc:	681b      	ldr	r3, [r3, #0]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	460b      	mov	r3, r1
 80035d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3338      	adds	r3, #56	; 0x38
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2201      	movs	r2, #1
 8003606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	b2da      	uxtb	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6979      	ldr	r1, [r7, #20]
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fb56 	bl	8005ccc <USB_EPStartXfer>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d901      	bls.n	8003648 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04e      	b.n	80036e6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da0f      	bge.n	8003670 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3338      	adds	r3, #56	; 0x38
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
 800366e:	e00d      	b.n	800368c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	3304      	adds	r3, #4
 8003684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_EP_SetStall+0x82>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e01c      	b.n	80036e6 <HAL_PCD_EP_SetStall+0xbc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 fe71 	bl	80063a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f003 f858 	bl	800678c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 020f 	and.w	r2, r3, #15
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d901      	bls.n	800370c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e042      	b.n	8003792 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800370c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da0f      	bge.n	8003734 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	3338      	adds	r3, #56	; 0x38
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	3304      	adds	r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	705a      	strb	r2, [r3, #1]
 8003732:	e00f      	b.n	8003754 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_EP_ClrStall+0x86>
 8003770:	2302      	movs	r3, #2
 8003772:	e00e      	b.n	8003792 <HAL_PCD_EP_ClrStall+0xa4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fe7a 	bl	800647c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da0c      	bge.n	80037c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3338      	adds	r3, #56	; 0x38
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e00c      	b.n	80037e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	3304      	adds	r3, #4
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 fca1 	bl	8006130 <USB_EPStopXfer>
 80037ee:	4603      	mov	r3, r0
 80037f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	3338      	adds	r3, #56	; 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d901      	bls.n	8003834 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e067      	b.n	8003904 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	429a      	cmp	r2, r3
 8003848:	d902      	bls.n	8003850 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3303      	adds	r3, #3
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003858:	e026      	b.n	80038a8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d902      	bls.n	8003876 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3303      	adds	r3, #3
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68d9      	ldr	r1, [r3, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	b29b      	uxth	r3, r3
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f002 fcf9 	bl	8006282 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d809      	bhi.n	80038d2 <PCD_WriteEmptyTxFifo+0xd6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d203      	bcs.n	80038d2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1c3      	bne.n	800385a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d811      	bhi.n	8003902 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	2201      	movs	r2, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038fe:	4013      	ands	r3, r2
 8003900:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	333c      	adds	r3, #60	; 0x3c
 8003924:	3304      	adds	r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <PCD_EP_OutXfrComplete_int+0x98>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d124      	bne.n	800398c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395e:	6093      	str	r3, [r2, #8]
 8003960:	e01a      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2320      	movs	r3, #32
 800397c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f004 fd7b 	bl	8008480 <HAL_PCD_DataOutStageCallback>
 800398a:	e005      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f004 fd74 	bl	8008480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	4f54310a 	.word	0x4f54310a

080039a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	333c      	adds	r3, #60	; 0x3c
 80039c0:	3304      	adds	r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <PCD_EP_OutSetupPacket_int+0x64>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90e      	bls.n	80039fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f004 fd2d 	bl	800845c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	4f54300a 	.word	0x4f54300a

08003a10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a2e:	883b      	ldrh	r3, [r7, #0]
 8003a30:	0419      	lsls	r1, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a3c:	e028      	b.n	8003a90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e00d      	b.n	8003a6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	3340      	adds	r3, #64	; 0x40
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d3ec      	bcc.n	8003a52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a78:	883b      	ldrh	r3, [r7, #0]
 8003a7a:	0418      	lsls	r0, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	4302      	orrs	r2, r0
 8003a88:	3340      	adds	r3, #64	; 0x40
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e304      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8087 	beq.w	8003bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003adc:	4b92      	ldr	r3, [pc, #584]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d00c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae8:	4b8f      	ldr	r3, [pc, #572]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5e>
 8003af4:	4b8c      	ldr	r3, [pc, #560]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b02:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d06c      	beq.n	8003be8 <HAL_RCC_OscConfig+0x12c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d168      	bne.n	8003be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e2de      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x76>
 8003b24:	4b80      	ldr	r3, [pc, #512]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7f      	ldr	r2, [pc, #508]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e02e      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b7b      	ldr	r3, [pc, #492]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7a      	ldr	r2, [pc, #488]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0xbc>
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a71      	ldr	r2, [pc, #452]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6e      	ldr	r2, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b78:	4b6b      	ldr	r3, [pc, #428]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6a      	ldr	r2, [pc, #424]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a67      	ldr	r2, [pc, #412]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd ff2a 	bl	80019f0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fd ff26 	bl	80019f0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e292      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xe4>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd ff16 	bl	80019f0 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd ff12 	bl	80019f0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e27e      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x10c>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf6:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c02:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x18c>
 8003c0e:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x176>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e252      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4939      	ldr	r1, [pc, #228]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e03a      	b.n	8003cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd fecb 	bl	80019f0 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fec7 	bl	80019f0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e233      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4927      	ldr	r1, [pc, #156]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fd feaa 	bl	80019f0 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fea6 	bl	80019f0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e212      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03a      	beq.n	8003d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fe8a 	bl	80019f0 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fe86 	bl	80019f0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1f2      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f000 fba2 	bl	8004448 <RCC_Delay>
 8003d04:	e01c      	b.n	8003d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_RCC_OscConfig+0x274>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fe70 	bl	80019f0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd fe6c 	bl	80019f0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d908      	bls.n	8003d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1d8      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	42420000 	.word	0x42420000
 8003d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d34:	4b9b      	ldr	r3, [pc, #620]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e9      	bne.n	8003d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a6 	beq.w	8003e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b94      	ldr	r3, [pc, #592]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a90      	ldr	r2, [pc, #576]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	61d3      	str	r3, [r2, #28]
 8003d6a:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a87      	ldr	r2, [pc, #540]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd fe2d 	bl	80019f0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd fe29 	bl	80019f0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b64      	cmp	r3, #100	; 0x64
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e195      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b7e      	ldr	r3, [pc, #504]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x312>
 8003dc0:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6213      	str	r3, [r2, #32]
 8003dcc:	e02d      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6213      	str	r3, [r2, #32]
 8003dee:	e01c      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d10c      	bne.n	8003e12 <HAL_RCC_OscConfig+0x356>
 8003df8:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a69      	ldr	r2, [pc, #420]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4a66      	ldr	r2, [pc, #408]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6213      	str	r3, [r2, #32]
 8003e10:	e00b      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003e12:	4b64      	ldr	r3, [pc, #400]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a63      	ldr	r2, [pc, #396]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a60      	ldr	r2, [pc, #384]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d015      	beq.n	8003e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fddd 	bl	80019f0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fd fdd9 	bl	80019f0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e143      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ee      	beq.n	8003e3a <HAL_RCC_OscConfig+0x37e>
 8003e5c:	e014      	b.n	8003e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fdc7 	bl	80019f0 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fd fdc3 	bl	80019f0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e12d      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4a44      	ldr	r2, [pc, #272]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808c 	beq.w	8003fbc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003eb2:	4b3c      	ldr	r3, [pc, #240]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e103      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d14e      	bne.n	8003f76 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0ef      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_RCC_OscConfig+0x4f0>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd fd77 	bl	80019f0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f06:	f7fd fd73 	bl	80019f0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0df      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	491c      	ldr	r1, [pc, #112]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4918      	ldr	r1, [pc, #96]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x4f0>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fd4f 	bl	80019f0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f56:	f7fd fd4b 	bl	80019f0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b64      	cmp	r3, #100	; 0x64
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0b7      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x49a>
 8003f74:	e022      	b.n	8003fbc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_RCC_OscConfig+0x4f0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd fd32 	bl	80019f0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003f8e:	e00f      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f90:	f7fd fd2e 	bl	80019f0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d908      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e09a      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003fb0:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e9      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8088 	beq.w	80040d6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d068      	beq.n	80040a4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d14d      	bne.n	8004076 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <HAL_RCC_OscConfig+0x628>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fd06 	bl	80019f0 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd fd02 	bl	80019f0 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e06e      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d10f      	bne.n	8004030 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4931      	ldr	r1, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 800401a:	4313      	orrs	r3, r2
 800401c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800401e:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	492d      	ldr	r1, [pc, #180]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 800402c:	4313      	orrs	r3, r2
 800402e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	430b      	orrs	r3, r1
 8004042:	4927      	ldr	r1, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004048:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <HAL_RCC_OscConfig+0x628>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fd fccf 	bl	80019f0 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd fccb 	bl	80019f0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e037      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x59a>
 8004074:	e02f      	b.n	80040d6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x628>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd fcb8 	bl	80019f0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fcb4 	bl	80019f0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e020      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c8>
 80040a2:	e018      	b.n	80040d6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e013      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x624>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	42420060 	.word	0x42420060

080040e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d0      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4965      	ldr	r1, [pc, #404]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0b8      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a58      	ldr	r2, [pc, #352]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800414e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a52      	ldr	r2, [pc, #328]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	494d      	ldr	r1, [pc, #308]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d040      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d115      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e073      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4936      	ldr	r1, [pc, #216]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fd fc0a 	bl	80019f0 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd fc06 	bl	80019f0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e053      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d210      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	4922      	ldr	r1, [pc, #136]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e032      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490e      	ldr	r1, [pc, #56]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f821 	bl	80042bc <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490a      	ldr	r1, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fb68 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	080097dc 	.word	0x080097dc
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b08e      	sub	sp, #56	; 0x38
 80042c2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c8:	2300      	movs	r3, #0
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	2300      	movs	r3, #0
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042e0:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCC_GetSysClockFreq+0x160>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d002      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d003      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x40>
 80042f4:	e089      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_GetSysClockFreq+0x164>)
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042fa:	e089      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_GetSysClockFreq+0x168>)
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d072      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004314:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_RCC_GetSysClockFreq+0x160>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCC_GetSysClockFreq+0x16c>)
 800431e:	5c9b      	ldrb	r3, [r3, r2]
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004322:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_RCC_GetSysClockFreq+0x160>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d053      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800432e:	4b3b      	ldr	r3, [pc, #236]	; (800441c <HAL_RCC_GetSysClockFreq+0x160>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	3301      	adds	r3, #1
 800433a:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800433c:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCC_GetSysClockFreq+0x160>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	3302      	adds	r3, #2
 8004348:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2200      	movs	r2, #0
 800434e:	469a      	mov	sl, r3
 8004350:	4693      	mov	fp, r2
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2200      	movs	r2, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	617a      	str	r2, [r7, #20]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	fb03 f20b 	mul.w	r2, r3, fp
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fb0a f303 	mul.w	r3, sl, r3
 8004366:	4413      	add	r3, r2
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	fbaa 0102 	umull	r0, r1, sl, r2
 800436e:	440b      	add	r3, r1
 8004370:	4619      	mov	r1, r3
 8004372:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <HAL_RCC_GetSysClockFreq+0x164>)
 8004374:	fb03 f201 	mul.w	r2, r3, r1
 8004378:	2300      	movs	r3, #0
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	4413      	add	r3, r2
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <HAL_RCC_GetSysClockFreq+0x164>)
 8004382:	fba0 4502 	umull	r4, r5, r0, r2
 8004386:	442b      	add	r3, r5
 8004388:	461d      	mov	r5, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2200      	movs	r2, #0
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	60fa      	str	r2, [r7, #12]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2200      	movs	r2, #0
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800439e:	460b      	mov	r3, r1
 80043a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a4:	4652      	mov	r2, sl
 80043a6:	fb02 f203 	mul.w	r2, r2, r3
 80043aa:	465b      	mov	r3, fp
 80043ac:	4684      	mov	ip, r0
 80043ae:	fb0c f303 	mul.w	r3, ip, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	4602      	mov	r2, r0
 80043b6:	4651      	mov	r1, sl
 80043b8:	fba2 8901 	umull	r8, r9, r2, r1
 80043bc:	444b      	add	r3, r9
 80043be:	4699      	mov	r9, r3
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	4620      	mov	r0, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7fb ff34 	bl	8000234 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
 80043d4:	e007      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_RCC_GetSysClockFreq+0x164>)
 80043da:	fb03 f202 	mul.w	r2, r3, r2
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_RCC_GetSysClockFreq+0x168>)
 80043e8:	7b5b      	ldrb	r3, [r3, #13]
 80043ea:	461a      	mov	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
 80043f8:	e004      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	4a0b      	ldr	r2, [pc, #44]	; (800442c <HAL_RCC_GetSysClockFreq+0x170>)
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8004404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004406:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_GetSysClockFreq+0x174>)
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800440e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004412:	4618      	mov	r0, r3
 8004414:	3738      	adds	r7, #56	; 0x38
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	017d7840 	.word	0x017d7840
 8004424:	080097ec 	.word	0x080097ec
 8004428:	080097fc 	.word	0x080097fc
 800442c:	003d0900 	.word	0x003d0900
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_RCC_GetHCLKFreq+0x10>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000000 	.word	0x20000000

08004448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <RCC_Delay+0x34>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <RCC_Delay+0x38>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0a5b      	lsrs	r3, r3, #9
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004464:	bf00      	nop
  }
  while (Delay --);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	60fa      	str	r2, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f9      	bne.n	8004464 <RCC_Delay+0x1c>
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000000 	.word	0x20000000
 8004480:	10624dd3 	.word	0x10624dd3

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d07d      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a8:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b4:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044be:	61d3      	str	r3, [r2, #28]
 80044c0:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b82      	ldr	r3, [pc, #520]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d118      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044dc:	4b7f      	ldr	r3, [pc, #508]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7e      	ldr	r2, [pc, #504]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e8:	f7fd fa82 	bl	80019f0 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd fa7e 	bl	80019f0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0e5      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450e:	4b72      	ldr	r3, [pc, #456]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02e      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d027      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004536:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004542:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd fa4d 	bl	80019f0 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd fa49 	bl	80019f0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0ae      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457c:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4953      	ldr	r1, [pc, #332]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800458a:	4313      	orrs	r3, r2
 800458c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800458e:	7efb      	ldrb	r3, [r7, #27]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	4a4f      	ldr	r2, [pc, #316]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4947      	ldr	r1, [pc, #284]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80045ca:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4940      	ldr	r1, [pc, #256]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	4938      	ldr	r1, [pc, #224]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004606:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d148      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800461c:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d138      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e042      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	4920      	ldr	r1, [pc, #128]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004656:	4313      	orrs	r3, r2
 8004658:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	491c      	ldr	r1, [pc, #112]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004668:	4313      	orrs	r3, r2
 800466a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd f9bd 	bl	80019f0 <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004678:	e008      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467a:	f7fd f9b9 	bl	80019f0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	; 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e020      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004698:	e009      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4904      	ldr	r1, [pc, #16]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420440 	.word	0x42420440
 80046e4:	42420070 	.word	0x42420070

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e076      	b.n	80047e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc ff84 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1a      	lsrs	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f002 0204 	and.w	r2, r2, #4
 80047c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Transmit+0x22>
 800480e:	2302      	movs	r3, #2
 8004810:	e12d      	b.n	8004a6e <HAL_SPI_Transmit+0x27e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800481a:	f7fd f8e9 	bl	80019f0 <HAL_GetTick>
 800481e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004834:	e116      	b.n	8004a64 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_SPI_Transmit+0x52>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004846:	e10d      	b.n	8004a64 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2203      	movs	r2, #3
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	88fa      	ldrh	r2, [r7, #6]
 8004866:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d10f      	bne.n	80048b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d007      	beq.n	80048ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d6:	d14f      	bne.n	8004978 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_Transmit+0xf6>
 80048e0:	8afb      	ldrh	r3, [r7, #22]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d142      	bne.n	800496c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800490a:	e02f      	b.n	800496c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d112      	bne.n	8004940 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	881a      	ldrh	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	1c9a      	adds	r2, r3, #2
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	86da      	strh	r2, [r3, #54]	; 0x36
 800493e:	e015      	b.n	800496c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004940:	f7fd f856 	bl	80019f0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d803      	bhi.n	8004958 <HAL_SPI_Transmit+0x168>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x16e>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800496a:	e07b      	b.n	8004a64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ca      	bne.n	800490c <HAL_SPI_Transmit+0x11c>
 8004976:	e050      	b.n	8004a1a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_SPI_Transmit+0x196>
 8004980:	8afb      	ldrh	r3, [r7, #22]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d144      	bne.n	8004a10 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ac:	e030      	b.n	8004a10 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d113      	bne.n	80049e4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80049e2:	e015      	b.n	8004a10 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e4:	f7fd f804 	bl	80019f0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d803      	bhi.n	80049fc <HAL_SPI_Transmit+0x20c>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d102      	bne.n	8004a02 <HAL_SPI_Transmit+0x212>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a0e:	e029      	b.n	8004a64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1c9      	bne.n	80049ae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fbcc 	bl	80051bc <SPI_EndRxTxTransaction>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e003      	b.n	8004a64 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af02      	add	r7, sp, #8
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a9a:	e0fb      	b.n	8004c94 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa4:	d112      	bne.n	8004acc <HAL_SPI_Receive+0x56>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10e      	bne.n	8004acc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8ef 	bl	8004ca6 <HAL_SPI_TransmitReceive>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	e0e8      	b.n	8004c9e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_SPI_Receive+0x64>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0e1      	b.n	8004c9e <HAL_SPI_Receive+0x228>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae2:	f7fc ff85 	bl	80019f0 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Receive+0x7e>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af8:	e0cc      	b.n	8004c94 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	d10f      	bne.n	8004b62 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d007      	beq.n	8004b80 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d16a      	bne.n	8004c5e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b88:	e032      	b.n	8004bf0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d115      	bne.n	8004bc4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 020c 	add.w	r2, r3, #12
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc2:	e015      	b.n	8004bf0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc4:	f7fc ff14 	bl	80019f0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d803      	bhi.n	8004bdc <HAL_SPI_Receive+0x166>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Receive+0x16c>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bee:	e051      	b.n	8004c94 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1c7      	bne.n	8004b8a <HAL_SPI_Receive+0x114>
 8004bfa:	e035      	b.n	8004c68 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d113      	bne.n	8004c32 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	b292      	uxth	r2, r2
 8004c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c30:	e015      	b.n	8004c5e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c32:	f7fc fedd 	bl	80019f0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d803      	bhi.n	8004c4a <HAL_SPI_Receive+0x1d4>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d102      	bne.n	8004c50 <HAL_SPI_Receive+0x1da>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c5c:	e01a      	b.n	8004c94 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1c9      	bne.n	8004bfc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa53 	bl	8005118 <SPI_EndRxTransaction>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
 8004c8a:	e003      	b.n	8004c94 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b08c      	sub	sp, #48	; 0x30
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x26>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e198      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x358>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd4:	f7fc fe8c 	bl	80019f0 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d00f      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x70>
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfc:	d107      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x68>
 8004d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d003      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d14:	e16d      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x82>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x82>
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d2e:	e160      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d003      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2205      	movs	r2, #5
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	887a      	ldrh	r2, [r7, #2]
 8004d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	887a      	ldrh	r2, [r7, #2]
 8004d66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d007      	beq.n	8004d98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da0:	d17c      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x10a>
 8004daa:	8b7b      	ldrh	r3, [r7, #26]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d16a      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd4:	e057      	b.n	8004e86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d11b      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x176>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x176>
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d113      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	881a      	ldrh	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	1c9a      	adds	r2, r3, #2
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d119      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x1b8>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d014      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	b292      	uxth	r2, r2
 8004e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e5e:	f7fc fdc7 	bl	80019f0 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d80b      	bhi.n	8004e86 <HAL_SPI_TransmitReceive+0x1e0>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d007      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e84:	e0b5      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1a2      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x130>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d19d      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x130>
 8004e9a:	e080      	b.n	8004f9e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x204>
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d16f      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed0:	e05b      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d11c      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x274>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x274>
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d114      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d119      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x2b6>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f5c:	f7fc fd48 	bl	80019f0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d803      	bhi.n	8004f74 <HAL_SPI_TransmitReceive+0x2ce>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d102      	bne.n	8004f7a <HAL_SPI_TransmitReceive+0x2d4>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f88:	e033      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d19e      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x22c>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d199      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f90a 	bl	80051bc <SPI_EndRxTxTransaction>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fba:	e01a      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe8:	e003      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005018:	f7fc fcea 	bl	80019f0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005028:	f7fc fce2 	bl	80019f0 <HAL_GetTick>
 800502c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800502e:	4b39      	ldr	r3, [pc, #228]	; (8005114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	015b      	lsls	r3, r3, #5
 8005034:	0d1b      	lsrs	r3, r3, #20
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503e:	e054      	b.n	80050ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d050      	beq.n	80050ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005048:	f7fc fcd2 	bl	80019f0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	429a      	cmp	r2, r3
 8005056:	d902      	bls.n	800505e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d13d      	bne.n	80050da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800506c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005076:	d111      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	d004      	beq.n	800508c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d107      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a4:	d10f      	bne.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e017      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d19b      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000

08005118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512c:	d111      	bne.n	8005152 <SPI_EndRxTransaction+0x3a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d004      	beq.n	8005142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d107      	bne.n	8005152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d117      	bne.n	800518c <SPI_EndRxTransaction+0x74>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d112      	bne.n	800518c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	2101      	movs	r1, #1
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ff49 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e013      	b.n	80051b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2200      	movs	r2, #0
 8005194:	2180      	movs	r1, #128	; 0x80
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff ff36 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e000      	b.n	80051b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff ff18 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e000      	b.n	80051f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fb4a 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 f82e 	bl	8005298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <TIM_Base_SetConfig+0xc8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00f      	beq.n	80052d0 <TIM_Base_SetConfig+0x38>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b6:	d00b      	beq.n	80052d0 <TIM_Base_SetConfig+0x38>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <TIM_Base_SetConfig+0xcc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_Base_SetConfig+0x38>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a29      	ldr	r2, [pc, #164]	; (8005368 <TIM_Base_SetConfig+0xd0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a28      	ldr	r2, [pc, #160]	; (800536c <TIM_Base_SetConfig+0xd4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <TIM_Base_SetConfig+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00f      	beq.n	800530a <TIM_Base_SetConfig+0x72>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d00b      	beq.n	800530a <TIM_Base_SetConfig+0x72>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <TIM_Base_SetConfig+0xcc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_Base_SetConfig+0x72>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <TIM_Base_SetConfig+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_Base_SetConfig+0x72>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <TIM_Base_SetConfig+0xd4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d108      	bne.n	800531c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <TIM_Base_SetConfig+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e04b      	b.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d00e      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a13      	ldr	r2, [pc, #76]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10c      	bne.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00

0800543c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800543c:	b084      	sub	sp, #16
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	f107 001c 	add.w	r0, r7, #28
 800544a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 f9de 	bl	800681c <USB_CoreReset>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr

08005480 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d165      	bne.n	8005560 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a3e      	ldr	r2, [pc, #248]	; (8005590 <USB_SetTurnaroundTime+0x110>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d906      	bls.n	80054aa <USB_SetTurnaroundTime+0x2a>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a3d      	ldr	r2, [pc, #244]	; (8005594 <USB_SetTurnaroundTime+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d202      	bcs.n	80054aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054a4:	230f      	movs	r3, #15
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e05c      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a39      	ldr	r2, [pc, #228]	; (8005594 <USB_SetTurnaroundTime+0x114>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d306      	bcc.n	80054c0 <USB_SetTurnaroundTime+0x40>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a38      	ldr	r2, [pc, #224]	; (8005598 <USB_SetTurnaroundTime+0x118>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d202      	bcs.n	80054c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054ba:	230e      	movs	r3, #14
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e051      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a35      	ldr	r2, [pc, #212]	; (8005598 <USB_SetTurnaroundTime+0x118>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d306      	bcc.n	80054d6 <USB_SetTurnaroundTime+0x56>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a34      	ldr	r2, [pc, #208]	; (800559c <USB_SetTurnaroundTime+0x11c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d202      	bcs.n	80054d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054d0:	230d      	movs	r3, #13
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e046      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a30      	ldr	r2, [pc, #192]	; (800559c <USB_SetTurnaroundTime+0x11c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d306      	bcc.n	80054ec <USB_SetTurnaroundTime+0x6c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <USB_SetTurnaroundTime+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054e6:	230c      	movs	r3, #12
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e03b      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <USB_SetTurnaroundTime+0x120>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <USB_SetTurnaroundTime+0x82>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a2b      	ldr	r2, [pc, #172]	; (80055a4 <USB_SetTurnaroundTime+0x124>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d802      	bhi.n	8005502 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054fc:	230b      	movs	r3, #11
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e030      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <USB_SetTurnaroundTime+0x124>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d906      	bls.n	8005518 <USB_SetTurnaroundTime+0x98>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <USB_SetTurnaroundTime+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d802      	bhi.n	8005518 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005512:	230a      	movs	r3, #10
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e025      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <USB_SetTurnaroundTime+0x128>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d906      	bls.n	800552e <USB_SetTurnaroundTime+0xae>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a22      	ldr	r2, [pc, #136]	; (80055ac <USB_SetTurnaroundTime+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d202      	bcs.n	800552e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005528:	2309      	movs	r3, #9
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e01a      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <USB_SetTurnaroundTime+0x12c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d306      	bcc.n	8005544 <USB_SetTurnaroundTime+0xc4>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <USB_SetTurnaroundTime+0x130>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d802      	bhi.n	8005544 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800553e:	2308      	movs	r3, #8
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e00f      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <USB_SetTurnaroundTime+0x130>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0xda>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <USB_SetTurnaroundTime+0x134>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d202      	bcs.n	800555a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005554:	2307      	movs	r3, #7
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e004      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800555a:	2306      	movs	r3, #6
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e001      	b.n	8005564 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005560:	2309      	movs	r3, #9
 8005562:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	00d8acbf 	.word	0x00d8acbf
 8005594:	00e4e1c0 	.word	0x00e4e1c0
 8005598:	00f42400 	.word	0x00f42400
 800559c:	01067380 	.word	0x01067380
 80055a0:	011a499f 	.word	0x011a499f
 80055a4:	01312cff 	.word	0x01312cff
 80055a8:	014ca43f 	.word	0x014ca43f
 80055ac:	016e3600 	.word	0x016e3600
 80055b0:	01a6ab1f 	.word	0x01a6ab1f
 80055b4:	01e84800 	.word	0x01e84800

080055b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 0201 	bic.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d115      	bne.n	8005646 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005626:	2001      	movs	r0, #1
 8005628:	f7fc f9ec 	bl	8001a04 <HAL_Delay>
      ms++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 f87a 	bl	800672c <USB_GetMode>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d01e      	beq.n	800567c <USB_SetCurrentMode+0x84>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b31      	cmp	r3, #49	; 0x31
 8005642:	d9f0      	bls.n	8005626 <USB_SetCurrentMode+0x2e>
 8005644:	e01a      	b.n	800567c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d115      	bne.n	8005678 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005658:	2001      	movs	r0, #1
 800565a:	f7fc f9d3 	bl	8001a04 <HAL_Delay>
      ms++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3301      	adds	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 f861 	bl	800672c <USB_GetMode>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <USB_SetCurrentMode+0x84>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b31      	cmp	r3, #49	; 0x31
 8005674:	d9f0      	bls.n	8005658 <USB_SetCurrentMode+0x60>
 8005676:	e001      	b.n	800567c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e005      	b.n	8005688 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b32      	cmp	r3, #50	; 0x32
 8005680:	d101      	bne.n	8005686 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005690:	b084      	sub	sp, #16
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800569e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	e009      	b.n	80056c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3340      	adds	r3, #64	; 0x40
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3301      	adds	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b0e      	cmp	r3, #14
 80056c8:	d9f2      	bls.n	80056b0 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056dc:	461a      	mov	r2, r3
 80056de:	2300      	movs	r3, #0
 80056e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056e2:	2103      	movs	r1, #3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f959 	bl	800599c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056ea:	2110      	movs	r1, #16
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8f1 	bl	80058d4 <USB_FlushTxFifo>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f91d 	bl	800593c <USB_FlushRxFifo>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e043      	b.n	80057be <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574c:	d118      	bne.n	8005780 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e013      	b.n	8005792 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e008      	b.n	8005792 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3b7      	bcc.n	8005736 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e043      	b.n	8005854 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e2:	d118      	bne.n	8005816 <USB_DevInit+0x186>
    {
      if (i == 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e013      	b.n	8005828 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e008      	b.n	8005828 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800584c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3301      	adds	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3b7      	bcc.n	80057cc <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800587c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f043 0210 	orr.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <USB_DevInit+0x240>)
 8005890:	4313      	orrs	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 0208 	orr.w	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ca:	b004      	add	sp, #16
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	803c3800 	.word	0x803c3800

080058d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <USB_FlushTxFifo+0x64>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e01b      	b.n	800592c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	daf2      	bge.n	80058e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	019b      	lsls	r3, r3, #6
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a08      	ldr	r2, [pc, #32]	; (8005938 <USB_FlushTxFifo+0x64>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e006      	b.n	800592c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b20      	cmp	r3, #32
 8005928:	d0f0      	beq.n	800590c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	00030d40 	.word	0x00030d40

0800593c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a11      	ldr	r2, [pc, #68]	; (8005998 <USB_FlushRxFifo+0x5c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e018      	b.n	800598c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	daf2      	bge.n	8005948 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2210      	movs	r2, #16
 800596a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <USB_FlushRxFifo+0x5c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e006      	b.n	800598c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d0f0      	beq.n	800596c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	00030d40 	.word	0x00030d40

0800599c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0306 	and.w	r3, r3, #6
 80059e4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d002      	beq.n	80059f2 <USB_GetDevSpeed+0x26>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d102      	bne.n	80059f8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059f2:	2302      	movs	r3, #2
 80059f4:	75fb      	strb	r3, [r7, #23]
 80059f6:	e001      	b.n	80059fc <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059f8:	230f      	movs	r3, #15
 80059fa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d13a      	bne.n	8005a9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d155      	bne.n	8005b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	791b      	ldrb	r3, [r3, #4]
 8005a76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	059b      	lsls	r3, r3, #22
 8005a7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a80:	4313      	orrs	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e036      	b.n	8005b08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11a      	bne.n	8005b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aee:	430b      	orrs	r3, r1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d161      	bne.n	8005bf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b46:	d11f      	bne.n	8005b88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba8:	4013      	ands	r3, r2
 8005baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	0159      	lsls	r1, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	440b      	add	r3, r1
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	4619      	mov	r1, r3
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <USB_DeactivateEndpoint+0x1b0>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
 8005bf2:	e060      	b.n	8005cb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0a:	d11f      	bne.n	8005c4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	43db      	mvns	r3, r3
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f303 	lsl.w	r3, r1, r3
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c90:	4013      	ands	r3, r2
 8005c92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0159      	lsls	r1, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	440b      	add	r3, r1
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <USB_DeactivateEndpoint+0x1b4>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	ec337800 	.word	0xec337800
 8005cc8:	eff37800 	.word	0xeff37800

08005ccc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 8128 	bne.w	8005f3a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d132      	bne.n	8005d58 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	0cdb      	lsrs	r3, r3, #19
 8005d52:	04db      	lsls	r3, r3, #19
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	e092      	b.n	8005e7e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d72:	0cdb      	lsrs	r3, r3, #19
 8005d74:	04db      	lsls	r3, r3, #19
 8005d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11a      	bne.n	8005dd8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
 8005dd6:	e01b      	b.n	8005e10 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6919      	ldr	r1, [r3, #16]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	440b      	add	r3, r1
 8005df0:	1e59      	subs	r1, r3, #1
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dfa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dfc:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <USB_EPStartXfer+0x368>)
 8005dfe:	400b      	ands	r3, r1
 8005e00:	6939      	ldr	r1, [r7, #16]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	6979      	ldr	r1, [r7, #20]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e26:	6939      	ldr	r1, [r7, #16]
 8005e28:	0148      	lsls	r0, r1, #5
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	4401      	add	r1, r0
 8005e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e32:	4313      	orrs	r3, r2
 8005e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d11f      	bne.n	8005e7e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e9c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d015      	beq.n	8005ed2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8139 	beq.w	8006122 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	634b      	str	r3, [r1, #52]	; 0x34
 8005ed0:	e127      	b.n	8006122 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d110      	bne.n	8005f04 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e00f      	b.n	8005f24 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f22:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68d9      	ldr	r1, [r3, #12]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9a5 	bl	8006282 <USB_WritePacket>
 8005f38:	e0f3      	b.n	8006122 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f54:	0cdb      	lsrs	r3, r3, #19
 8005f56:	04db      	lsls	r3, r3, #19
 8005f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d12f      	bne.n	8005fe4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	0148      	lsls	r0, r1, #5
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	4401      	add	r1, r0
 8005fba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe0:	6113      	str	r3, [r2, #16]
 8005fe2:	e061      	b.n	80060a8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d125      	bne.n	8006038 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	6939      	ldr	r1, [r7, #16]
 8006004:	0148      	lsls	r0, r1, #5
 8006006:	6979      	ldr	r1, [r7, #20]
 8006008:	4401      	add	r1, r0
 800600a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800600e:	4313      	orrs	r3, r2
 8006010:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006030:	6113      	str	r3, [r2, #16]
 8006032:	e039      	b.n	80060a8 <USB_EPStartXfer+0x3dc>
 8006034:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4413      	add	r3, r2
 8006042:	1e5a      	subs	r2, r3, #1
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	89fa      	ldrh	r2, [r7, #14]
 8006054:	fb03 f202 	mul.w	r2, r3, r2
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	04d9      	lsls	r1, r3, #19
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <USB_EPStartXfer+0x460>)
 8006070:	400b      	ands	r3, r1
 8006072:	6939      	ldr	r1, [r7, #16]
 8006074:	0148      	lsls	r0, r1, #5
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	4401      	add	r1, r0
 800607a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800607e:	4313      	orrs	r3, r2
 8006080:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006098:	6939      	ldr	r1, [r7, #16]
 800609a:	0148      	lsls	r0, r1, #5
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	4401      	add	r1, r0
 80060a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a4:	4313      	orrs	r3, r2
 80060a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	791b      	ldrb	r3, [r3, #4]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d128      	bne.n	8006102 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d110      	bne.n	80060e2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e00f      	b.n	8006102 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006100:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006120:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	1ff80000 	.word	0x1ff80000

08006130 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d14a      	bne.n	80061e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006166:	f040 8086 	bne.w	8006276 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800618c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80061be:	4293      	cmp	r3, r2
 80061c0:	d902      	bls.n	80061c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
          break;
 80061c6:	e056      	b.n	8006276 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e0:	d0e7      	beq.n	80061b2 <USB_EPStopXfer+0x82>
 80061e2:	e048      	b.n	8006276 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fc:	d13b      	bne.n	8006276 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006220:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006252:	4293      	cmp	r3, r2
 8006254:	d902      	bls.n	800625c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
          break;
 800625a:	e00c      	b.n	8006276 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006274:	d0e7      	beq.n	8006246 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006282:	b480      	push	{r7}
 8006284:	b089      	sub	sp, #36	; 0x24
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	4611      	mov	r1, r2
 800628e:	461a      	mov	r2, r3
 8006290:	460b      	mov	r3, r1
 8006292:	71fb      	strb	r3, [r7, #7]
 8006294:	4613      	mov	r3, r2
 8006296:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80062a0:	88bb      	ldrh	r3, [r7, #4]
 80062a2:	3303      	adds	r3, #3
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80062a8:	2300      	movs	r3, #0
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e018      	b.n	80062e0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	031a      	lsls	r2, r3, #12
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	461a      	mov	r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3301      	adds	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	3301      	adds	r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3e2      	bcc.n	80062ae <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b08b      	sub	sp, #44	; 0x2c
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	089b      	lsrs	r3, r3, #2
 800630e:	b29b      	uxth	r3, r3
 8006310:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800631a:	2300      	movs	r3, #0
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	e014      	b.n	800634a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	601a      	str	r2, [r3, #0]
    pDest++;
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	3301      	adds	r3, #1
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	3301      	adds	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	3301      	adds	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	3301      	adds	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	3301      	adds	r3, #1
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	6a3a      	ldr	r2, [r7, #32]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3e6      	bcc.n	8006320 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006352:	8bfb      	ldrh	r3, [r7, #30]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01e      	beq.n	8006396 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	461a      	mov	r2, r3
 8006364:	f107 0310 	add.w	r3, r7, #16
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	701a      	strb	r2, [r3, #0]
      i++;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	3301      	adds	r3, #1
 8006382:	623b      	str	r3, [r7, #32]
      pDest++;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	3301      	adds	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800638a:	8bfb      	ldrh	r3, [r7, #30]
 800638c:	3b01      	subs	r3, #1
 800638e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006390:	8bfb      	ldrh	r3, [r7, #30]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1ea      	bne.n	800636c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006398:	4618      	mov	r0, r3
 800639a:	372c      	adds	r7, #44	; 0x2c
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d12c      	bne.n	8006418 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	db12      	blt.n	80063f6 <USB_EPSetStall+0x54>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00f      	beq.n	80063f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e02b      	b.n	8006470 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	db12      	blt.n	8006450 <USB_EPSetStall+0xae>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800644e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800646e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d128      	bne.n	80064ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	791b      	ldrb	r3, [r3, #4]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d003      	beq.n	80064c8 <USB_EPClearStall+0x4c>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	791b      	ldrb	r3, [r3, #4]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d138      	bne.n	800653a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e027      	b.n	800653a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006508:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d003      	beq.n	800651a <USB_EPClearStall+0x9e>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	791b      	ldrb	r3, [r3, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d10f      	bne.n	800653a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006564:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006568:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr

08006590 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f023 0302 	bic.w	r3, r3, #2
 80065c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4013      	ands	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4013      	ands	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0c1b      	lsrs	r3, r3, #16
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	b29b      	uxth	r3, r3
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066c6:	68bb      	ldr	r3, [r7, #8]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006702:	01db      	lsls	r3, r3, #7
 8006704:	b2db      	uxtb	r3, r3
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4013      	ands	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006720:	68bb      	ldr	r3, [r7, #8]
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr

0800672c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0301 	and.w	r3, r3, #1
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006760:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006764:	f023 0307 	bic.w	r3, r3, #7
 8006768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
	...

0800678c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	333c      	adds	r3, #60	; 0x3c
 800679e:	3304      	adds	r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <USB_EP0_OutStart+0x8c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d90a      	bls.n	80067c2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067bc:	d101      	bne.n	80067c2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	e024      	b.n	800680c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f0:	f043 0318 	orr.w	r3, r3, #24
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006808:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	4f54300a 	.word	0x4f54300a

0800681c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4a12      	ldr	r2, [pc, #72]	; (800687c <USB_CoreReset+0x60>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e01b      	b.n	8006872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	daf2      	bge.n	8006828 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f043 0201 	orr.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a08      	ldr	r2, [pc, #32]	; (800687c <USB_CoreReset+0x60>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e006      	b.n	8006872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d0f0      	beq.n	8006852 <USB_CoreReset+0x36>

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	00030d40 	.word	0x00030d40

08006880 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d115      	bne.n	80068c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689c:	2202      	movs	r2, #2
 800689e:	2181      	movs	r1, #129	; 0x81
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 ff22 	bl	80086ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b0:	2202      	movs	r2, #2
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 ff18 	bl	80086ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80068c2:	e012      	b.n	80068ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	2202      	movs	r2, #2
 80068c8:	2181      	movs	r1, #129	; 0x81
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 ff0d 	bl	80086ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068d6:	2340      	movs	r3, #64	; 0x40
 80068d8:	2202      	movs	r2, #2
 80068da:	2101      	movs	r1, #1
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 ff04 	bl	80086ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068ea:	2308      	movs	r3, #8
 80068ec:	2203      	movs	r2, #3
 80068ee:	2182      	movs	r1, #130	; 0x82
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fefa 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006900:	f002 f81a 	bl	8008938 <USBD_static_malloc>
 8006904:	4602      	mov	r2, r0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006916:	2301      	movs	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]
 800691a:	e026      	b.n	800696a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7c1b      	ldrb	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800694c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006950:	2101      	movs	r1, #1
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 ffb9 	bl	80088ca <USBD_LL_PrepareReceive>
 8006958:	e007      	b.n	800696a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2101      	movs	r1, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 ffb0 	bl	80088ca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006984:	2181      	movs	r1, #129	; 0x81
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fed5 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fece 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069a2:	2182      	movs	r1, #130	; 0x82
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fec6 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 ffc0 	bl	8008950 <USBD_static_free>
    pdev->pClassData = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d039      	beq.n	8006a80 <USBD_CDC_Setup+0x9e>
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d17f      	bne.n	8006b10 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d029      	beq.n	8006a6c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da11      	bge.n	8006a46 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	88d2      	ldrh	r2, [r2, #6]
 8006a34:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	88db      	ldrh	r3, [r3, #6]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fa41 	bl	8007ec6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a44:	e06b      	b.n	8006b1e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	785a      	ldrb	r2, [r3, #1]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a5c:	6939      	ldr	r1, [r7, #16]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fa5c 	bl	8007f22 <USBD_CtlPrepareRx>
      break;
 8006a6a:	e058      	b.n	8006b1e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	7850      	ldrb	r0, [r2, #1]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	4798      	blx	r3
      break;
 8006a7e:	e04e      	b.n	8006b1e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b0b      	cmp	r3, #11
 8006a86:	d02e      	beq.n	8006ae6 <USBD_CDC_Setup+0x104>
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	dc38      	bgt.n	8006afe <USBD_CDC_Setup+0x11c>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <USBD_CDC_Setup+0xb4>
 8006a90:	2b0a      	cmp	r3, #10
 8006a92:	d014      	beq.n	8006abe <USBD_CDC_Setup+0xdc>
 8006a94:	e033      	b.n	8006afe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fa0c 	bl	8007ec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aae:	e02e      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f99d 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	75fb      	strb	r3, [r7, #23]
          break;
 8006abc:	e027      	b.n	8006b0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d107      	bne.n	8006ad8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ac8:	f107 030f 	add.w	r3, r7, #15
 8006acc:	2201      	movs	r2, #1
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f9f8 	bl	8007ec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ad6:	e01a      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f989 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae4:	e013      	b.n	8006b0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d00d      	beq.n	8006b0c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f97d 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af8:	2302      	movs	r3, #2
 8006afa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006afc:	e006      	b.n	8006b0c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f976 	bl	8007df2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b06:	2302      	movs	r3, #2
 8006b08:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0a:	e000      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
          break;
 8006b0c:	bf00      	nop
      }
      break;
 8006b0e:	e006      	b.n	8006b1e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f96d 	bl	8007df2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	bf00      	nop
  }

  return ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	331c      	adds	r3, #28
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d029      	beq.n	8006bb8 <USBD_CDC_DataIn+0x90>
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	331c      	adds	r3, #28
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	78f9      	ldrb	r1, [r7, #3]
 8006b78:	68b8      	ldr	r0, [r7, #8]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	440b      	add	r3, r1
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	3344      	adds	r3, #68	; 0x44
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d110      	bne.n	8006bb8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	331c      	adds	r3, #28
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006baa:	78f9      	ldrb	r1, [r7, #3]
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 fe67 	bl	8008884 <USBD_LL_Transmit>
 8006bb6:	e003      	b.n	8006bc0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fe92 	bl	8008910 <USBD_LL_GetRxDataSize>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c12:	4611      	mov	r1, r2
 8006c14:	4798      	blx	r3

    return USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c1a:	2302      	movs	r3, #2
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d010      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2243      	movs	r2, #67	; 0x43
 8006c80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000094 	.word	0x20000094

08006c94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2243      	movs	r2, #67	; 0x43
 8006ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ca2:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000050 	.word	0x20000050

08006cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2243      	movs	r2, #67	; 0x43
 8006cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200000d8 	.word	0x200000d8

08006cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000000c 	.word	0x2000000c

08006cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01c      	beq.n	8006dcc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2181      	movs	r1, #129	; 0x81
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fd60 	bl	8008884 <USBD_LL_Transmit>

      return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e002      	b.n	8006dce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7c1b      	ldrb	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fd60 	bl	80088ca <USBD_LL_PrepareReceive>
 8006e0a:	e007      	b.n	8006e1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fd57 	bl	80088ca <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	4613      	mov	r3, r2
 8006e36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e01a      	b.n	8006e78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	79fa      	ldrb	r2, [r7, #7]
 8006e6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f001 fbdb 	bl	800862c <USBD_LL_Init>

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	e001      	b.n	8006ea6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fbfa 	bl	80086b4 <USBD_LL_Start>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	4611      	mov	r1, r2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	4611      	mov	r1, r2
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3

  return USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 ff10 	bl	8007d7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f68:	461a      	mov	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d016      	beq.n	8006fac <USBD_LL_SetupStage+0x6a>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d81c      	bhi.n	8006fbc <USBD_LL_SetupStage+0x7a>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <USBD_LL_SetupStage+0x4a>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d008      	beq.n	8006f9c <USBD_LL_SetupStage+0x5a>
 8006f8a:	e017      	b.n	8006fbc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa03 	bl	80073a0 <USBD_StdDevReq>
      break;
 8006f9a:	e01a      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa65 	bl	8007474 <USBD_StdItfReq>
      break;
 8006faa:	e012      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 faa5 	bl	8007504 <USBD_StdEPReq>
      break;
 8006fba:	e00a      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fbd2 	bl	8008774 <USBD_LL_StallEP>
      break;
 8006fd0:	bf00      	nop
  }

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d14b      	bne.n	8007088 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ff6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d134      	bne.n	800706c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	d919      	bls.n	8007042 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007024:	429a      	cmp	r2, r3
 8007026:	d203      	bcs.n	8007030 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800702c:	b29b      	uxth	r3, r3
 800702e:	e002      	b.n	8007036 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 ff8f 	bl	8007f5e <USBD_CtlContinueRx>
 8007040:	e038      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007054:	2b03      	cmp	r3, #3
 8007056:	d105      	bne.n	8007064 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 ff8c 	bl	8007f82 <USBD_CtlSendStatus>
 800706a:	e023      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007072:	2b05      	cmp	r3, #5
 8007074:	d11e      	bne.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 fb77 	bl	8008774 <USBD_LL_StallEP>
 8007086:	e015      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800709a:	2b03      	cmp	r3, #3
 800709c:	d108      	bne.n	80070b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	7afa      	ldrb	r2, [r7, #11]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
 80070ae:	e001      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e000      	b.n	80070b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	460b      	mov	r3, r1
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d17f      	bne.n	80071d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3314      	adds	r3, #20
 80070d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d15c      	bne.n	800719c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d915      	bls.n	800711a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fef9 	bl	8007efe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f001 fbd9 	bl	80088ca <USBD_LL_PrepareReceive>
 8007118:	e04e      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	6912      	ldr	r2, [r2, #16]
 8007122:	fbb3 f1f2 	udiv	r1, r3, r2
 8007126:	fb01 f202 	mul.w	r2, r1, r2
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11c      	bne.n	800716a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007138:	429a      	cmp	r2, r3
 800713a:	d316      	bcc.n	800716a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007146:	429a      	cmp	r2, r3
 8007148:	d20f      	bcs.n	800716a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fed5 	bl	8007efe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715c:	2300      	movs	r3, #0
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 fbb1 	bl	80088ca <USBD_LL_PrepareReceive>
 8007168:	e026      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800717c:	2b03      	cmp	r3, #3
 800717e:	d105      	bne.n	800718c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 faf0 	bl	8008774 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 ff07 	bl	8007fa8 <USBD_CtlReceiveStatus>
 800719a:	e00d      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d004      	beq.n	80071b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f001 fade 	bl	8008774 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d11d      	bne.n	80071fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe81 	bl	8006eca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071d0:	e015      	b.n	80071fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d108      	bne.n	80071fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	7afa      	ldrb	r2, [r7, #11]
 80071f2:	4611      	mov	r1, r2
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	4798      	blx	r3
 80071f8:	e001      	b.n	80071fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fa67 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	2200      	movs	r2, #0
 8007230:	2180      	movs	r1, #128	; 0x80
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fa59 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2240      	movs	r2, #64	; 0x40
 8007242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	4611      	mov	r1, r2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2204      	movs	r2, #4
 80072c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d105      	bne.n	80072ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007308:	2b03      	cmp	r3, #3
 800730a:	d10b      	bne.n	8007324 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr

0800735e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	bc80      	pop	{r7}
 8007370:	4770      	bx	lr

08007372 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6852      	ldr	r2, [r2, #4]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d005      	beq.n	80073c6 <USBD_StdDevReq+0x26>
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d84f      	bhi.n	800745e <USBD_StdDevReq+0xbe>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <USBD_StdDevReq+0x36>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d14b      	bne.n	800745e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      break;
 80073d4:	e048      	b.n	8007468 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d839      	bhi.n	8007452 <USBD_StdDevReq+0xb2>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBD_StdDevReq+0x44>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007435 	.word	0x08007435
 80073e8:	08007449 	.word	0x08007449
 80073ec:	08007453 	.word	0x08007453
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	08007453 	.word	0x08007453
 80073f8:	08007417 	.word	0x08007417
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	08007453 	.word	0x08007453
 8007404:	0800742b 	.word	0x0800742b
 8007408:	08007421 	.word	0x08007421
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9dc 	bl	80077cc <USBD_GetDescriptor>
          break;
 8007414:	e022      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb3f 	bl	8007a9c <USBD_SetAddress>
          break;
 800741e:	e01d      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb7e 	bl	8007b24 <USBD_SetConfig>
          break;
 8007428:	e018      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc07 	bl	8007c40 <USBD_GetConfig>
          break;
 8007432:	e013      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fc37 	bl	8007caa <USBD_GetStatus>
          break;
 800743c:	e00e      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc65 	bl	8007d10 <USBD_SetFeature>
          break;
 8007446:	e009      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc74 	bl	8007d38 <USBD_ClrFeature>
          break;
 8007450:	e004      	b.n	800745c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fccc 	bl	8007df2 <USBD_CtlError>
          break;
 800745a:	bf00      	nop
      }
      break;
 800745c:	e004      	b.n	8007468 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fcc6 	bl	8007df2 <USBD_CtlError>
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdItfReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d82e      	bhi.n	80074f0 <USBD_StdItfReq+0x7c>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <USBD_StdItfReq+0x26>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d12a      	bne.n	80074f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	3b01      	subs	r3, #1
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d81d      	bhi.n	80074e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	889b      	ldrh	r3, [r3, #4]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d813      	bhi.n	80074d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88db      	ldrh	r3, [r3, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d110      	bne.n	80074ec <USBD_StdItfReq+0x78>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10d      	bne.n	80074ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fd56 	bl	8007f82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074d6:	e009      	b.n	80074ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fc89 	bl	8007df2 <USBD_CtlError>
          break;
 80074e0:	e004      	b.n	80074ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc84 	bl	8007df2 <USBD_CtlError>
          break;
 80074ea:	e000      	b.n	80074ee <USBD_StdItfReq+0x7a>
          break;
 80074ec:	bf00      	nop
      }
      break;
 80074ee:	e004      	b.n	80074fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc7d 	bl	8007df2 <USBD_CtlError>
      break;
 80074f8:	bf00      	nop
  }

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	889b      	ldrh	r3, [r3, #4]
 8007516:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d007      	beq.n	8007534 <USBD_StdEPReq+0x30>
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	f200 8146 	bhi.w	80077b6 <USBD_StdEPReq+0x2b2>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <USBD_StdEPReq+0x40>
 800752e:	2b20      	cmp	r3, #32
 8007530:	f040 8141 	bne.w	80077b6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      break;
 8007542:	e13d      	b.n	80077c0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754c:	2b20      	cmp	r3, #32
 800754e:	d10a      	bne.n	8007566 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	e12d      	b.n	80077c2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d007      	beq.n	800757e <USBD_StdEPReq+0x7a>
 800756e:	2b03      	cmp	r3, #3
 8007570:	f300 811b 	bgt.w	80077aa <USBD_StdEPReq+0x2a6>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d072      	beq.n	800765e <USBD_StdEPReq+0x15a>
 8007578:	2b01      	cmp	r3, #1
 800757a:	d03a      	beq.n	80075f2 <USBD_StdEPReq+0xee>
 800757c:	e115      	b.n	80077aa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x8a>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d015      	beq.n	80075b8 <USBD_StdEPReq+0xb4>
 800758c:	e02b      	b.n	80075e6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <USBD_StdEPReq+0xaa>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d009      	beq.n	80075ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 f8e8 	bl	8008774 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f8e4 	bl	8008774 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075ac:	e020      	b.n	80075f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc1e 	bl	8007df2 <USBD_CtlError>
              break;
 80075b6:	e01b      	b.n	80075f0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	885b      	ldrh	r3, [r3, #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10e      	bne.n	80075de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <USBD_StdEPReq+0xda>
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d008      	beq.n	80075de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f8cb 	bl	8008774 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fccf 	bl	8007f82 <USBD_CtlSendStatus>

              break;
 80075e4:	e004      	b.n	80075f0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc02 	bl	8007df2 <USBD_CtlError>
              break;
 80075ee:	bf00      	nop
          }
          break;
 80075f0:	e0e0      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d002      	beq.n	8007602 <USBD_StdEPReq+0xfe>
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d015      	beq.n	800762c <USBD_StdEPReq+0x128>
 8007600:	e026      	b.n	8007650 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <USBD_StdEPReq+0x11e>
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d009      	beq.n	8007622 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f8ae 	bl	8008774 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f8aa 	bl	8008774 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007620:	e01c      	b.n	800765c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbe4 	bl	8007df2 <USBD_CtlError>
              break;
 800762a:	e017      	b.n	800765c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d112      	bne.n	800765a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f8b5 	bl	80087b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc9a 	bl	8007f82 <USBD_CtlSendStatus>
              }
              break;
 800764e:	e004      	b.n	800765a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fbcd 	bl	8007df2 <USBD_CtlError>
              break;
 8007658:	e000      	b.n	800765c <USBD_StdEPReq+0x158>
              break;
 800765a:	bf00      	nop
          }
          break;
 800765c:	e0aa      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_StdEPReq+0x16a>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d032      	beq.n	80076d2 <USBD_StdEPReq+0x1ce>
 800766c:	e097      	b.n	800779e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <USBD_StdEPReq+0x180>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d004      	beq.n	8007684 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fbb8 	bl	8007df2 <USBD_CtlError>
                break;
 8007682:	e091      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da0b      	bge.n	80076a4 <USBD_StdEPReq+0x1a0>
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	3310      	adds	r3, #16
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	3304      	adds	r3, #4
 80076a2:	e00b      	b.n	80076bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	3304      	adds	r3, #4
 80076bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2202      	movs	r2, #2
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fbfb 	bl	8007ec6 <USBD_CtlSendData>
              break;
 80076d0:	e06a      	b.n	80077a8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da11      	bge.n	80076fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	3318      	adds	r3, #24
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d117      	bne.n	8007724 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fb7b 	bl	8007df2 <USBD_CtlError>
                  break;
 80076fc:	e054      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	f003 020f 	and.w	r2, r3, #15
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb68 	bl	8007df2 <USBD_CtlError>
                  break;
 8007722:	e041      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da0b      	bge.n	8007744 <USBD_StdEPReq+0x240>
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	3310      	adds	r3, #16
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	e00b      	b.n	800775c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	3304      	adds	r3, #4
 800775c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <USBD_StdEPReq+0x266>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d103      	bne.n	8007772 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	e00e      	b.n	8007790 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 f83a 	bl	80087f0 <USBD_LL_IsStallEP>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e002      	b.n	8007790 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2202      	movs	r2, #2
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb95 	bl	8007ec6 <USBD_CtlSendData>
              break;
 800779c:	e004      	b.n	80077a8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fb26 	bl	8007df2 <USBD_CtlError>
              break;
 80077a6:	bf00      	nop
          }
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb20 	bl	8007df2 <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fb1a 	bl	8007df2 <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b06      	cmp	r3, #6
 80077ee:	f200 8128 	bhi.w	8007a42 <USBD_GetDescriptor+0x276>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <USBD_GetDescriptor+0x2c>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800782d 	.word	0x0800782d
 8007800:	0800786d 	.word	0x0800786d
 8007804:	08007a43 	.word	0x08007a43
 8007808:	08007a43 	.word	0x08007a43
 800780c:	080079e3 	.word	0x080079e3
 8007810:	08007a0f 	.word	0x08007a0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
      break;
 800782a:	e112      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7c1b      	ldrb	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10d      	bne.n	8007850 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f107 0208 	add.w	r2, r7, #8
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	2202      	movs	r2, #2
 800784c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800784e:	e100      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	f107 0208 	add.w	r2, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	2202      	movs	r2, #2
 8007868:	701a      	strb	r2, [r3, #0]
      break;
 800786a:	e0f2      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b05      	cmp	r3, #5
 8007874:	f200 80ac 	bhi.w	80079d0 <USBD_GetDescriptor+0x204>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <USBD_GetDescriptor+0xb4>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	08007899 	.word	0x08007899
 8007884:	080078cd 	.word	0x080078cd
 8007888:	08007901 	.word	0x08007901
 800788c:	08007935 	.word	0x08007935
 8007890:	08007969 	.word	0x08007969
 8007894:	0800799d 	.word	0x0800799d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7c12      	ldrb	r2, [r2, #16]
 80078b0:	f107 0108 	add.w	r1, r7, #8
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ba:	e091      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa97 	bl	8007df2 <USBD_CtlError>
            err++;
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	3301      	adds	r3, #1
 80078c8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ca:	e089      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 0108 	add.w	r1, r7, #8
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ee:	e077      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa7d 	bl	8007df2 <USBD_CtlError>
            err++;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3301      	adds	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]
          break;
 80078fe:	e06f      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	7c12      	ldrb	r2, [r2, #16]
 8007918:	f107 0108 	add.w	r1, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007922:	e05d      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa63 	bl	8007df2 <USBD_CtlError>
            err++;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	3301      	adds	r3, #1
 8007930:	72fb      	strb	r3, [r7, #11]
          break;
 8007932:	e055      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	7c12      	ldrb	r2, [r2, #16]
 800794c:	f107 0108 	add.w	r1, r7, #8
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
 8007954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007956:	e043      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa49 	bl	8007df2 <USBD_CtlError>
            err++;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	3301      	adds	r3, #1
 8007964:	72fb      	strb	r3, [r7, #11]
          break;
 8007966:	e03b      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7c12      	ldrb	r2, [r2, #16]
 8007980:	f107 0108 	add.w	r1, r7, #8
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798a:	e029      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa2f 	bl	8007df2 <USBD_CtlError>
            err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
          break;
 800799a:	e021      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079be:	e00f      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa15 	bl	8007df2 <USBD_CtlError>
            err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
          break;
 80079ce:	e007      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa0d 	bl	8007df2 <USBD_CtlError>
          err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80079de:	e038      	b.n	8007a52 <USBD_GetDescriptor+0x286>
 80079e0:	e037      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7c1b      	ldrb	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	f107 0208 	add.w	r2, r7, #8
 80079f6:	4610      	mov	r0, r2
 80079f8:	4798      	blx	r3
 80079fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079fc:	e029      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9f6 	bl	8007df2 <USBD_CtlError>
        err++;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0c:	e021      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7c1b      	ldrb	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10d      	bne.n	8007a32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	f107 0208 	add.w	r2, r7, #8
 8007a22:	4610      	mov	r0, r2
 8007a24:	4798      	blx	r3
 8007a26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a30:	e00f      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9dc 	bl	8007df2 <USBD_CtlError>
        err++;
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a40:	e007      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9d4 	bl	8007df2 <USBD_CtlError>
      err++;
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a50:	bf00      	nop
  }

  if (err != 0U)
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11c      	bne.n	8007a92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a58:	893b      	ldrh	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d011      	beq.n	8007a82 <USBD_GetDescriptor+0x2b6>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	88db      	ldrh	r3, [r3, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88da      	ldrh	r2, [r3, #6]
 8007a6a:	893b      	ldrh	r3, [r7, #8]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bf28      	it	cs
 8007a70:	4613      	movcs	r3, r2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a76:	893b      	ldrh	r3, [r7, #8]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa22 	bl	8007ec6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa79 	bl	8007f82 <USBD_CtlSendStatus>
 8007a90:	e000      	b.n	8007a94 <USBD_GetDescriptor+0x2c8>
    return;
 8007a92:	bf00      	nop
    }
  }
}
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	889b      	ldrh	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d130      	bne.n	8007b10 <USBD_SetAddress+0x74>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88db      	ldrh	r3, [r3, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d12c      	bne.n	8007b10 <USBD_SetAddress+0x74>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	2b7f      	cmp	r3, #127	; 0x7f
 8007abc:	d828      	bhi.n	8007b10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d104      	bne.n	8007ade <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f98b 	bl	8007df2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	e01d      	b.n	8007b1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7bfa      	ldrb	r2, [r7, #15]
 8007ae2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 feab 	bl	8008846 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa46 	bl	8007f82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b04:	e009      	b.n	8007b1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	e004      	b.n	8007b1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f96d 	bl	8007df2 <USBD_CtlError>
  }
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b38:	4b40      	ldr	r3, [pc, #256]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d904      	bls.n	8007b4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f955 	bl	8007df2 <USBD_CtlError>
 8007b48:	e075      	b.n	8007c36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d002      	beq.n	8007b5a <USBD_SetConfig+0x36>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d023      	beq.n	8007ba0 <USBD_SetConfig+0x7c>
 8007b58:	e062      	b.n	8007c20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b5a:	4b38      	ldr	r3, [pc, #224]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01a      	beq.n	8007b98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b62:	4b36      	ldr	r3, [pc, #216]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2203      	movs	r2, #3
 8007b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b74:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff f9af 	bl	8006ede <USBD_SetClassConfig>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d104      	bne.n	8007b90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f932 	bl	8007df2 <USBD_CtlError>
            return;
 8007b8e:	e052      	b.n	8007c36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9f6 	bl	8007f82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b96:	e04e      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9f2 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007b9e:	e04a      	b.n	8007c36 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ba0:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <USBD_SetConfig+0x118>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d112      	bne.n	8007bce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007bb0:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007bba:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff f9ab 	bl	8006f1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9db 	bl	8007f82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bcc:	e033      	b.n	8007c36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007bce:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d01d      	beq.n	8007c18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff f999 	bl	8006f1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bea:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff f96f 	bl	8006ede <USBD_SetClassConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d104      	bne.n	8007c10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8f2 	bl	8007df2 <USBD_CtlError>
            return;
 8007c0e:	e012      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9b6 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007c16:	e00e      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9b2 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007c1e:	e00a      	b.n	8007c36 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8e5 	bl	8007df2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <USBD_SetConfig+0x118>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f974 	bl	8006f1c <USBD_ClrClassConfig>
        break;
 8007c34:	bf00      	nop
    }
  }
}
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000340 	.word	0x20000340

08007c40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d004      	beq.n	8007c5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8cc 	bl	8007df2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c5a:	e022      	b.n	8007ca2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	dc02      	bgt.n	8007c6c <USBD_GetConfig+0x2c>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc03      	bgt.n	8007c72 <USBD_GetConfig+0x32>
 8007c6a:	e015      	b.n	8007c98 <USBD_GetConfig+0x58>
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetConfig+0x48>
 8007c70:	e012      	b.n	8007c98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f920 	bl	8007ec6 <USBD_CtlSendData>
        break;
 8007c86:	e00c      	b.n	8007ca2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f918 	bl	8007ec6 <USBD_CtlSendData>
        break;
 8007c96:	e004      	b.n	8007ca2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8a9 	bl	8007df2 <USBD_CtlError>
        break;
 8007ca0:	bf00      	nop
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d81e      	bhi.n	8007cfe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	88db      	ldrh	r3, [r3, #6]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d004      	beq.n	8007cd2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f891 	bl	8007df2 <USBD_CtlError>
        break;
 8007cd0:	e01a      	b.n	8007d08 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f8e5 	bl	8007ec6 <USBD_CtlSendData>
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f876 	bl	8007df2 <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d106      	bne.n	8007d30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f929 	bl	8007f82 <USBD_CtlSendStatus>
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d80b      	bhi.n	8007d66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10c      	bne.n	8007d70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f90f 	bl	8007f82 <USBD_CtlSendStatus>
      }
      break;
 8007d64:	e004      	b.n	8007d70 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f842 	bl	8007df2 <USBD_CtlError>
      break;
 8007d6e:	e000      	b.n	8007d72 <USBD_ClrFeature+0x3a>
      break;
 8007d70:	bf00      	nop
  }
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	785a      	ldrb	r2, [r3, #1]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3302      	adds	r3, #2
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3303      	adds	r3, #3
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4413      	add	r3, r2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3304      	adds	r3, #4
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	3305      	adds	r3, #5
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	3306      	adds	r3, #6
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3307      	adds	r3, #7
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	80da      	strh	r2, [r3, #6]

}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fcb8 	bl	8008774 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fcb4 	bl	8008774 <USBD_LL_StallEP>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d032      	beq.n	8007e90 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f834 	bl	8007e98 <USBD_GetLen>
 8007e30:	4603      	mov	r3, r0
 8007e32:	3301      	adds	r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	75fa      	strb	r2, [r7, #23]
 8007e44:	461a      	mov	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4413      	add	r3, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	75fa      	strb	r2, [r7, #23]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e60:	e012      	b.n	8007e88 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	7dfa      	ldrb	r2, [r7, #23]
 8007e6a:	1c51      	adds	r1, r2, #1
 8007e6c:	75f9      	strb	r1, [r7, #23]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	440a      	add	r2, r1
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	75fa      	strb	r2, [r7, #23]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4413      	add	r3, r2
 8007e84:	2200      	movs	r2, #0
 8007e86:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e8      	bne.n	8007e62 <USBD_GetString+0x4e>
    }
  }
}
 8007e90:	bf00      	nop
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ea4:	e005      	b.n	8007eb2 <USBD_GetLen+0x1a>
  {
    len++;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f5      	bne.n	8007ea6 <USBD_GetLen+0xe>
  }

  return len;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fcc8 	bl	8008884 <USBD_LL_Transmit>

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fcb6 	bl	8008884 <USBD_LL_Transmit>

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2203      	movs	r2, #3
 8007f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fcbb 	bl	80088ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	2100      	movs	r1, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fca9 	bl	80088ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f92:	2300      	movs	r3, #0
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc73 	bl	8008884 <USBD_LL_Transmit>

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2205      	movs	r2, #5
 8007fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc83 	bl	80088ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f8c2 	bl	8008168 <CDC_Transmit_FS>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4912      	ldr	r1, [pc, #72]	; (800803c <MX_USB_DEVICE_Init+0x50>)
 8007ff4:	4812      	ldr	r0, [pc, #72]	; (8008040 <MX_USB_DEVICE_Init+0x54>)
 8007ff6:	f7fe ff18 	bl	8006e2a <USBD_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008000:	f7f9 fae6 	bl	80015d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008004:	490f      	ldr	r1, [pc, #60]	; (8008044 <MX_USB_DEVICE_Init+0x58>)
 8008006:	480e      	ldr	r0, [pc, #56]	; (8008040 <MX_USB_DEVICE_Init+0x54>)
 8008008:	f7fe ff3a 	bl	8006e80 <USBD_RegisterClass>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008012:	f7f9 fadd 	bl	80015d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008016:	490c      	ldr	r1, [pc, #48]	; (8008048 <MX_USB_DEVICE_Init+0x5c>)
 8008018:	4809      	ldr	r0, [pc, #36]	; (8008040 <MX_USB_DEVICE_Init+0x54>)
 800801a:	f7fe fe6b 	bl	8006cf4 <USBD_CDC_RegisterInterface>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008024:	f7f9 fad4 	bl	80015d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008028:	4805      	ldr	r0, [pc, #20]	; (8008040 <MX_USB_DEVICE_Init+0x54>)
 800802a:	f7fe ff42 	bl	8006eb2 <USBD_Start>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008034:	f7f9 facc 	bl	80015d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008038:	bf00      	nop
 800803a:	bd80      	pop	{r7, pc}
 800803c:	2000012c 	.word	0x2000012c
 8008040:	20000344 	.word	0x20000344
 8008044:	20000018 	.word	0x20000018
 8008048:	2000011c 	.word	0x2000011c

0800804c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008050:	2200      	movs	r2, #0
 8008052:	4905      	ldr	r1, [pc, #20]	; (8008068 <CDC_Init_FS+0x1c>)
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <CDC_Init_FS+0x20>)
 8008056:	f7fe fe63 	bl	8006d20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800805a:	4905      	ldr	r1, [pc, #20]	; (8008070 <CDC_Init_FS+0x24>)
 800805c:	4803      	ldr	r0, [pc, #12]	; (800806c <CDC_Init_FS+0x20>)
 800805e:	f7fe fe78 	bl	8006d52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008062:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008064:	4618      	mov	r0, r3
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000a08 	.word	0x20000a08
 800806c:	20000344 	.word	0x20000344
 8008070:	20000608 	.word	0x20000608

08008074 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008078:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800807a:	4618      	mov	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
	...

08008084 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
 8008090:	4613      	mov	r3, r2
 8008092:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b23      	cmp	r3, #35	; 0x23
 8008098:	d84a      	bhi.n	8008130 <CDC_Control_FS+0xac>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <CDC_Control_FS+0x1c>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008131 	.word	0x08008131
 80080a8:	08008131 	.word	0x08008131
 80080ac:	08008131 	.word	0x08008131
 80080b0:	08008131 	.word	0x08008131
 80080b4:	08008131 	.word	0x08008131
 80080b8:	08008131 	.word	0x08008131
 80080bc:	08008131 	.word	0x08008131
 80080c0:	08008131 	.word	0x08008131
 80080c4:	08008131 	.word	0x08008131
 80080c8:	08008131 	.word	0x08008131
 80080cc:	08008131 	.word	0x08008131
 80080d0:	08008131 	.word	0x08008131
 80080d4:	08008131 	.word	0x08008131
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008131 	.word	0x08008131
 80080e0:	08008131 	.word	0x08008131
 80080e4:	08008131 	.word	0x08008131
 80080e8:	08008131 	.word	0x08008131
 80080ec:	08008131 	.word	0x08008131
 80080f0:	08008131 	.word	0x08008131
 80080f4:	08008131 	.word	0x08008131
 80080f8:	08008131 	.word	0x08008131
 80080fc:	08008131 	.word	0x08008131
 8008100:	08008131 	.word	0x08008131
 8008104:	08008131 	.word	0x08008131
 8008108:	08008131 	.word	0x08008131
 800810c:	08008131 	.word	0x08008131
 8008110:	08008131 	.word	0x08008131
 8008114:	08008131 	.word	0x08008131
 8008118:	08008131 	.word	0x08008131
 800811c:	08008131 	.word	0x08008131
 8008120:	08008131 	.word	0x08008131
 8008124:	08008131 	.word	0x08008131
 8008128:	08008131 	.word	0x08008131
 800812c:	08008131 	.word	0x08008131
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008130:	bf00      	nop
  }

  return (USBD_OK);
 8008132:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4805      	ldr	r0, [pc, #20]	; (8008164 <CDC_Receive_FS+0x24>)
 800814e:	f7fe fe00 	bl	8006d52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008152:	4804      	ldr	r0, [pc, #16]	; (8008164 <CDC_Receive_FS+0x24>)
 8008154:	f7fe fe3f 	bl	8006dd6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008158:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000344 	.word	0x20000344

08008168 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <CDC_Transmit_FS+0x48>)
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800818a:	2301      	movs	r3, #1
 800818c:	e00b      	b.n	80081a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800818e:	887b      	ldrh	r3, [r7, #2]
 8008190:	461a      	mov	r2, r3
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4806      	ldr	r0, [pc, #24]	; (80081b0 <CDC_Transmit_FS+0x48>)
 8008196:	f7fe fdc3 	bl	8006d20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800819a:	4805      	ldr	r0, [pc, #20]	; (80081b0 <CDC_Transmit_FS+0x48>)
 800819c:	f7fe fdec 	bl	8006d78 <USBD_CDC_TransmitPacket>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000344 	.word	0x20000344

080081b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2212      	movs	r2, #18
 80081c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000148 	.word	0x20000148

080081d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2204      	movs	r2, #4
 80081e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	2000015c 	.word	0x2000015c

080081fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4907      	ldr	r1, [pc, #28]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
 8008212:	4808      	ldr	r0, [pc, #32]	; (8008234 <USBD_FS_ProductStrDescriptor+0x38>)
 8008214:	f7ff fdfe 	bl	8007e14 <USBD_GetString>
 8008218:	e004      	b.n	8008224 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4904      	ldr	r1, [pc, #16]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <USBD_FS_ProductStrDescriptor+0x38>)
 8008220:	f7ff fdf8 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000e08 	.word	0x20000e08
 8008234:	08009390 	.word	0x08009390

08008238 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4904      	ldr	r1, [pc, #16]	; (8008258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008248:	4804      	ldr	r0, [pc, #16]	; (800825c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800824a:	f7ff fde3 	bl	8007e14 <USBD_GetString>
  return USBD_StrDesc;
 800824e:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000e08 	.word	0x20000e08
 800825c:	080093a8 	.word	0x080093a8

08008260 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	221a      	movs	r2, #26
 8008270:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008272:	f000 f843 	bl	80082fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008276:	4b02      	ldr	r3, [pc, #8]	; (8008280 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000160 	.word	0x20000160

08008284 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800829c:	f7ff fdba 	bl	8007e14 <USBD_GetString>
 80082a0:	e004      	b.n	80082ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4904      	ldr	r1, [pc, #16]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a8:	f7ff fdb4 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000e08 	.word	0x20000e08
 80082bc:	080093bc 	.word	0x080093bc

080082c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4907      	ldr	r1, [pc, #28]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082d6:	4808      	ldr	r0, [pc, #32]	; (80082f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082d8:	f7ff fd9c 	bl	8007e14 <USBD_GetString>
 80082dc:	e004      	b.n	80082e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4904      	ldr	r1, [pc, #16]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e2:	4805      	ldr	r0, [pc, #20]	; (80082f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e4:	f7ff fd96 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000e08 	.word	0x20000e08
 80082f8:	080093c8 	.word	0x080093c8

080082fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <Get_SerialNum+0x44>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008308:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <Get_SerialNum+0x48>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <Get_SerialNum+0x4c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008322:	2208      	movs	r2, #8
 8008324:	4909      	ldr	r1, [pc, #36]	; (800834c <Get_SerialNum+0x50>)
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f814 	bl	8008354 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800832c:	2204      	movs	r2, #4
 800832e:	4908      	ldr	r1, [pc, #32]	; (8008350 <Get_SerialNum+0x54>)
 8008330:	68b8      	ldr	r0, [r7, #8]
 8008332:	f000 f80f 	bl	8008354 <IntToUnicode>
  }
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	1ffff7e8 	.word	0x1ffff7e8
 8008344:	1ffff7ec 	.word	0x1ffff7ec
 8008348:	1ffff7f0 	.word	0x1ffff7f0
 800834c:	20000162 	.word	0x20000162
 8008350:	20000172 	.word	0x20000172

08008354 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
 800836a:	e027      	b.n	80083bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	0f1b      	lsrs	r3, r3, #28
 8008370:	2b09      	cmp	r3, #9
 8008372:	d80b      	bhi.n	800838c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	b2da      	uxtb	r2, r3
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4619      	mov	r1, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	440b      	add	r3, r1
 8008384:	3230      	adds	r2, #48	; 0x30
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e00a      	b.n	80083a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0f1b      	lsrs	r3, r3, #28
 8008390:	b2da      	uxtb	r2, r3
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	4619      	mov	r1, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	440b      	add	r3, r1
 800839c:	3237      	adds	r2, #55	; 0x37
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	3301      	adds	r3, #1
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	3301      	adds	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	7dfa      	ldrb	r2, [r7, #23]
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3d3      	bcc.n	800836c <IntToUnicode+0x18>
  }
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d8:	f107 0310 	add.w	r3, r7, #16
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ee:	d12c      	bne.n	800844a <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083f0:	4b18      	ldr	r3, [pc, #96]	; (8008454 <HAL_PCD_MspInit+0x84>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	4a17      	ldr	r2, [pc, #92]	; (8008454 <HAL_PCD_MspInit+0x84>)
 80083f6:	f043 0304 	orr.w	r3, r3, #4
 80083fa:	6193      	str	r3, [r2, #24]
 80083fc:	4b15      	ldr	r3, [pc, #84]	; (8008454 <HAL_PCD_MspInit+0x84>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008416:	f107 0310 	add.w	r3, r7, #16
 800841a:	4619      	mov	r1, r3
 800841c:	480e      	ldr	r0, [pc, #56]	; (8008458 <HAL_PCD_MspInit+0x88>)
 800841e:	f7fa f867 	bl	80024f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008422:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <HAL_PCD_MspInit+0x84>)
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4a0b      	ldr	r2, [pc, #44]	; (8008454 <HAL_PCD_MspInit+0x84>)
 8008428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800842c:	6153      	str	r3, [r2, #20]
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <HAL_PCD_MspInit+0x84>)
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008436:	60bb      	str	r3, [r7, #8]
 8008438:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	2043      	movs	r0, #67	; 0x43
 8008440:	f7fa f81f 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008444:	2043      	movs	r0, #67	; 0x43
 8008446:	f7fa f838 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800844a:	bf00      	nop
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	40021000 	.word	0x40021000
 8008458:	40010800 	.word	0x40010800

0800845c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fe fd65 	bl	8006f42 <USBD_LL_SetupStage>
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f7fe fd97 	bl	8006fdc <USBD_LL_DataOutStage>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	3348      	adds	r3, #72	; 0x48
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	4619      	mov	r1, r3
 80084de:	f7fe fdee 	bl	80070be <USBD_LL_DataInStage>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe fefe 	bl	80072fa <USBD_LL_SOF>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800850e:	2301      	movs	r3, #1
 8008510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d001      	beq.n	800851e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800851a:	f7f9 f859 	bl	80015d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008524:	7bfa      	ldrb	r2, [r7, #15]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe feae 	bl	800728a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fe67 	bl	8007208 <USBD_LL_Reset>
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fea8 	bl	80072a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <HAL_PCD_SuspendCallback+0x48>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4a03      	ldr	r2, [pc, #12]	; (800858c <HAL_PCD_SuspendCallback+0x48>)
 800857e:	f043 0306 	orr.w	r3, r3, #6
 8008582:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	e000ed00 	.word	0xe000ed00

08008590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fe96 	bl	80072d0 <USBD_LL_Resume>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe febf 	bl	8007346 <USBD_LL_IsoOUTIncomplete>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fea1 	bl	800732e <USBD_LL_IsoINIncomplete>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe feab 	bl	800735e <USBD_LL_DevConnected>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fea7 	bl	8007372 <USBD_LL_DevDisconnected>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d133      	bne.n	80086a4 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800863c:	4a1c      	ldr	r2, [pc, #112]	; (80086b0 <USBD_LL_Init+0x84>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <USBD_LL_Init+0x84>)
 8008648:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800864c:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <USBD_LL_Init+0x84>)
 800864e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008652:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008654:	4b16      	ldr	r3, [pc, #88]	; (80086b0 <USBD_LL_Init+0x84>)
 8008656:	2204      	movs	r2, #4
 8008658:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <USBD_LL_Init+0x84>)
 800865c:	2202      	movs	r2, #2
 800865e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008660:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <USBD_LL_Init+0x84>)
 8008662:	2202      	movs	r2, #2
 8008664:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <USBD_LL_Init+0x84>)
 8008668:	2200      	movs	r2, #0
 800866a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800866c:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <USBD_LL_Init+0x84>)
 800866e:	2200      	movs	r2, #0
 8008670:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <USBD_LL_Init+0x84>)
 8008674:	2201      	movs	r2, #1
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008678:	480d      	ldr	r0, [pc, #52]	; (80086b0 <USBD_LL_Init+0x84>)
 800867a:	f7fa f8ee 	bl	800285a <HAL_PCD_Init>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008684:	f7f8 ffa4 	bl	80015d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008688:	2180      	movs	r1, #128	; 0x80
 800868a:	4809      	ldr	r0, [pc, #36]	; (80086b0 <USBD_LL_Init+0x84>)
 800868c:	f7fb fa06 	bl	8003a9c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008690:	2240      	movs	r2, #64	; 0x40
 8008692:	2100      	movs	r1, #0
 8008694:	4806      	ldr	r0, [pc, #24]	; (80086b0 <USBD_LL_Init+0x84>)
 8008696:	f7fb f9bb 	bl	8003a10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800869a:	2280      	movs	r2, #128	; 0x80
 800869c:	2101      	movs	r1, #1
 800869e:	4804      	ldr	r0, [pc, #16]	; (80086b0 <USBD_LL_Init+0x84>)
 80086a0:	f7fb f9b6 	bl	8003a10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20001008 	.word	0x20001008

080086b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa f9e2 	bl	8002a94 <HAL_PCD_Start>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f944 	bl	8008964 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	461a      	mov	r2, r3
 80086f8:	4603      	mov	r3, r0
 80086fa:	70fb      	strb	r3, [r7, #3]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70bb      	strb	r3, [r7, #2]
 8008700:	4613      	mov	r3, r2
 8008702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008712:	78bb      	ldrb	r3, [r7, #2]
 8008714:	883a      	ldrh	r2, [r7, #0]
 8008716:	78f9      	ldrb	r1, [r7, #3]
 8008718:	f7fa fe5b 	bl	80033d2 <HAL_PCD_EP_Open>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f91e 	bl	8008964 <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7fa fea4 	bl	80034a2 <HAL_PCD_EP_Close>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f8ff 	bl	8008964 <USBD_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7fa ff49 	bl	800362a <HAL_PCD_EP_SetStall>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f8e0 	bl	8008964 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fa ff8c 	bl	80036ee <HAL_PCD_EP_ClrStall>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f8c1 	bl	8008964 <USBD_Get_USB_Status>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008808:	2b00      	cmp	r3, #0
 800880a:	da0b      	bge.n	8008824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	333e      	adds	r3, #62	; 0x3e
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	e00b      	b.n	800883c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800883a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr

08008846 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f7fa fd8f 	bl	8003388 <HAL_PCD_SetAddress>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 f877 	bl	8008964 <USBD_Get_USB_Status>
 8008876:	4603      	mov	r3, r0
 8008878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887a:	7bbb      	ldrb	r3, [r7, #14]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	607a      	str	r2, [r7, #4]
 800888e:	461a      	mov	r2, r3
 8008890:	460b      	mov	r3, r1
 8008892:	72fb      	strb	r3, [r7, #11]
 8008894:	4613      	mov	r3, r2
 8008896:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088a6:	893b      	ldrh	r3, [r7, #8]
 80088a8:	7af9      	ldrb	r1, [r7, #11]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	f7fa fe8c 	bl	80035c8 <HAL_PCD_EP_Transmit>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f854 	bl	8008964 <USBD_Get_USB_Status>
 80088bc:	4603      	mov	r3, r0
 80088be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	461a      	mov	r2, r3
 80088d6:	460b      	mov	r3, r1
 80088d8:	72fb      	strb	r3, [r7, #11]
 80088da:	4613      	mov	r3, r2
 80088dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ec:	893b      	ldrh	r3, [r7, #8]
 80088ee:	7af9      	ldrb	r1, [r7, #11]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	f7fa fe20 	bl	8003536 <HAL_PCD_EP_Receive>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f831 	bl	8008964 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008906:	7dbb      	ldrb	r3, [r7, #22]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7fa fe37 	bl	800359a <HAL_PCD_EP_GetRxCount>
 800892c:	4603      	mov	r3, r0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008940:	4b02      	ldr	r3, [pc, #8]	; (800894c <USBD_static_malloc+0x14>)
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	2000150c 	.word	0x2000150c

08008950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
	...

08008964 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d817      	bhi.n	80089a8 <USBD_Get_USB_Status+0x44>
 8008978:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <USBD_Get_USB_Status+0x1c>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008991 	.word	0x08008991
 8008984:	08008997 	.word	0x08008997
 8008988:	0800899d 	.word	0x0800899d
 800898c:	080089a3 	.word	0x080089a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	e00b      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	73fb      	strb	r3, [r7, #15]
    break;
 800899a:	e008      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800899c:	2301      	movs	r3, #1
 800899e:	73fb      	strb	r3, [r7, #15]
    break;
 80089a0:	e005      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089a2:	2302      	movs	r3, #2
 80089a4:	73fb      	strb	r3, [r7, #15]
    break;
 80089a6:	e002      	b.n	80089ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089a8:	2302      	movs	r3, #2
 80089aa:	73fb      	strb	r3, [r7, #15]
    break;
 80089ac:	bf00      	nop
  }
  return usb_status;
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop

080089bc <malloc>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <malloc+0xc>)
 80089be:	4601      	mov	r1, r0
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f000 b82b 	b.w	8008a1c <_malloc_r>
 80089c6:	bf00      	nop
 80089c8:	200001c8 	.word	0x200001c8

080089cc <free>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <free+0xc>)
 80089ce:	4601      	mov	r1, r0
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f000 b935 	b.w	8008c40 <_free_r>
 80089d6:	bf00      	nop
 80089d8:	200001c8 	.word	0x200001c8

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0e      	ldr	r6, [pc, #56]	; (8008a18 <sbrk_aligned+0x3c>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 f8e0 	bl	8008bac <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 f8db 	bl	8008bac <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <sbrk_aligned+0x34>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d007      	beq.n	8008a14 <sbrk_aligned+0x38>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 f8d0 	bl	8008bac <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d101      	bne.n	8008a14 <sbrk_aligned+0x38>
 8008a10:	f04f 34ff 	mov.w	r4, #4294967295
 8008a14:	4620      	mov	r0, r4
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	20001730 	.word	0x20001730

08008a1c <_malloc_r>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4607      	mov	r7, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d905      	bls.n	8008a44 <_malloc_r+0x28>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	4630      	mov	r0, r6
 8008a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b18 <_malloc_r+0xfc>
 8008a48:	f000 f868 	bl	8008b1c <__malloc_lock>
 8008a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a50:	461c      	mov	r4, r3
 8008a52:	bb5c      	cbnz	r4, 8008aac <_malloc_r+0x90>
 8008a54:	4629      	mov	r1, r5
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7ff ffc0 	bl	80089dc <sbrk_aligned>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	4604      	mov	r4, r0
 8008a60:	d155      	bne.n	8008b0e <_malloc_r+0xf2>
 8008a62:	f8d8 4000 	ldr.w	r4, [r8]
 8008a66:	4626      	mov	r6, r4
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	d145      	bne.n	8008af8 <_malloc_r+0xdc>
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	d048      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	4631      	mov	r1, r6
 8008a74:	4638      	mov	r0, r7
 8008a76:	eb04 0903 	add.w	r9, r4, r3
 8008a7a:	f000 f897 	bl	8008bac <_sbrk_r>
 8008a7e:	4581      	cmp	r9, r0
 8008a80:	d13f      	bne.n	8008b02 <_malloc_r+0xe6>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	4638      	mov	r0, r7
 8008a86:	1a6d      	subs	r5, r5, r1
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7ff ffa7 	bl	80089dc <sbrk_aligned>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d037      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	442b      	add	r3, r5
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d038      	beq.n	8008b12 <_malloc_r+0xf6>
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	42a2      	cmp	r2, r4
 8008aa4:	d12b      	bne.n	8008afe <_malloc_r+0xe2>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	e00f      	b.n	8008acc <_malloc_r+0xb0>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	1b52      	subs	r2, r2, r5
 8008ab0:	d41f      	bmi.n	8008af2 <_malloc_r+0xd6>
 8008ab2:	2a0b      	cmp	r2, #11
 8008ab4:	d917      	bls.n	8008ae6 <_malloc_r+0xca>
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	6025      	str	r5, [r4, #0]
 8008abc:	bf18      	it	ne
 8008abe:	6059      	strne	r1, [r3, #4]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	bf08      	it	eq
 8008ac4:	f8c8 1000 	streq.w	r1, [r8]
 8008ac8:	5162      	str	r2, [r4, r5]
 8008aca:	604b      	str	r3, [r1, #4]
 8008acc:	4638      	mov	r0, r7
 8008ace:	f104 060b 	add.w	r6, r4, #11
 8008ad2:	f000 f829 	bl	8008b28 <__malloc_unlock>
 8008ad6:	f026 0607 	bic.w	r6, r6, #7
 8008ada:	1d23      	adds	r3, r4, #4
 8008adc:	1af2      	subs	r2, r6, r3
 8008ade:	d0ae      	beq.n	8008a3e <_malloc_r+0x22>
 8008ae0:	1b9b      	subs	r3, r3, r6
 8008ae2:	50a3      	str	r3, [r4, r2]
 8008ae4:	e7ab      	b.n	8008a3e <_malloc_r+0x22>
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	6862      	ldr	r2, [r4, #4]
 8008aea:	d1dd      	bne.n	8008aa8 <_malloc_r+0x8c>
 8008aec:	f8c8 2000 	str.w	r2, [r8]
 8008af0:	e7ec      	b.n	8008acc <_malloc_r+0xb0>
 8008af2:	4623      	mov	r3, r4
 8008af4:	6864      	ldr	r4, [r4, #4]
 8008af6:	e7ac      	b.n	8008a52 <_malloc_r+0x36>
 8008af8:	4634      	mov	r4, r6
 8008afa:	6876      	ldr	r6, [r6, #4]
 8008afc:	e7b4      	b.n	8008a68 <_malloc_r+0x4c>
 8008afe:	4613      	mov	r3, r2
 8008b00:	e7cc      	b.n	8008a9c <_malloc_r+0x80>
 8008b02:	230c      	movs	r3, #12
 8008b04:	4638      	mov	r0, r7
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	f000 f80e 	bl	8008b28 <__malloc_unlock>
 8008b0c:	e797      	b.n	8008a3e <_malloc_r+0x22>
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	e7dc      	b.n	8008acc <_malloc_r+0xb0>
 8008b12:	605b      	str	r3, [r3, #4]
 8008b14:	deff      	udf	#255	; 0xff
 8008b16:	bf00      	nop
 8008b18:	2000172c 	.word	0x2000172c

08008b1c <__malloc_lock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__malloc_lock+0x8>)
 8008b1e:	f000 b87f 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	20001870 	.word	0x20001870

08008b28 <__malloc_unlock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_unlock+0x8>)
 8008b2a:	f000 b87a 	b.w	8008c22 <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20001870 	.word	0x20001870

08008b34 <siprintf>:
 8008b34:	b40e      	push	{r1, r2, r3}
 8008b36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b3a:	b500      	push	{lr}
 8008b3c:	b09c      	sub	sp, #112	; 0x70
 8008b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008b40:	9002      	str	r0, [sp, #8]
 8008b42:	9006      	str	r0, [sp, #24]
 8008b44:	9107      	str	r1, [sp, #28]
 8008b46:	9104      	str	r1, [sp, #16]
 8008b48:	4808      	ldr	r0, [pc, #32]	; (8008b6c <siprintf+0x38>)
 8008b4a:	4909      	ldr	r1, [pc, #36]	; (8008b70 <siprintf+0x3c>)
 8008b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b50:	9105      	str	r1, [sp, #20]
 8008b52:	6800      	ldr	r0, [r0, #0]
 8008b54:	a902      	add	r1, sp, #8
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	f000 f914 	bl	8008d84 <_svfiprintf_r>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	9b02      	ldr	r3, [sp, #8]
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	b01c      	add	sp, #112	; 0x70
 8008b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b68:	b003      	add	sp, #12
 8008b6a:	4770      	bx	lr
 8008b6c:	200001c8 	.word	0x200001c8
 8008b70:	ffff0208 	.word	0xffff0208

08008b74 <memset>:
 8008b74:	4603      	mov	r3, r0
 8008b76:	4402      	add	r2, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <strncat>:
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	7825      	ldrb	r5, [r4, #0]
 8008b8a:	4623      	mov	r3, r4
 8008b8c:	3401      	adds	r4, #1
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	d1fa      	bne.n	8008b88 <strncat+0x4>
 8008b92:	3a01      	subs	r2, #1
 8008b94:	d304      	bcc.n	8008ba0 <strncat+0x1c>
 8008b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9a:	f803 4b01 	strb.w	r4, [r3], #1
 8008b9e:	b904      	cbnz	r4, 8008ba2 <strncat+0x1e>
 8008ba0:	bd30      	pop	{r4, r5, pc}
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	d1f5      	bne.n	8008b92 <strncat+0xe>
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	e7f3      	b.n	8008b92 <strncat+0xe>
	...

08008bac <_sbrk_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4d05      	ldr	r5, [pc, #20]	; (8008bc8 <_sbrk_r+0x1c>)
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f8 fe0c 	bl	80017d4 <_sbrk>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_sbrk_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_sbrk_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	2000186c 	.word	0x2000186c

08008bcc <__errno>:
 8008bcc:	4b01      	ldr	r3, [pc, #4]	; (8008bd4 <__errno+0x8>)
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	200001c8 	.word	0x200001c8

08008bd8 <__libc_init_array>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	2600      	movs	r6, #0
 8008bdc:	4d0c      	ldr	r5, [pc, #48]	; (8008c10 <__libc_init_array+0x38>)
 8008bde:	4c0d      	ldr	r4, [pc, #52]	; (8008c14 <__libc_init_array+0x3c>)
 8008be0:	1b64      	subs	r4, r4, r5
 8008be2:	10a4      	asrs	r4, r4, #2
 8008be4:	42a6      	cmp	r6, r4
 8008be6:	d109      	bne.n	8008bfc <__libc_init_array+0x24>
 8008be8:	f000 fbbe 	bl	8009368 <_init>
 8008bec:	2600      	movs	r6, #0
 8008bee:	4d0a      	ldr	r5, [pc, #40]	; (8008c18 <__libc_init_array+0x40>)
 8008bf0:	4c0a      	ldr	r4, [pc, #40]	; (8008c1c <__libc_init_array+0x44>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	42a6      	cmp	r6, r4
 8008bf8:	d105      	bne.n	8008c06 <__libc_init_array+0x2e>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c00:	4798      	blx	r3
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7ee      	b.n	8008be4 <__libc_init_array+0xc>
 8008c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0a:	4798      	blx	r3
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7f2      	b.n	8008bf6 <__libc_init_array+0x1e>
 8008c10:	08009848 	.word	0x08009848
 8008c14:	08009848 	.word	0x08009848
 8008c18:	08009848 	.word	0x08009848
 8008c1c:	0800984c 	.word	0x0800984c

08008c20 <__retarget_lock_acquire_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_release_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <memcpy>:
 8008c24:	440a      	add	r2, r1
 8008c26:	4291      	cmp	r1, r2
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d100      	bne.n	8008c30 <memcpy+0xc>
 8008c2e:	4770      	bx	lr
 8008c30:	b510      	push	{r4, lr}
 8008c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c36:	4291      	cmp	r1, r2
 8008c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3c:	d1f9      	bne.n	8008c32 <memcpy+0xe>
 8008c3e:	bd10      	pop	{r4, pc}

08008c40 <_free_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4605      	mov	r5, r0
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d040      	beq.n	8008cca <_free_r+0x8a>
 8008c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4c:	1f0c      	subs	r4, r1, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfb8      	it	lt
 8008c52:	18e4      	addlt	r4, r4, r3
 8008c54:	f7ff ff62 	bl	8008b1c <__malloc_lock>
 8008c58:	4a1c      	ldr	r2, [pc, #112]	; (8008ccc <_free_r+0x8c>)
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	b933      	cbnz	r3, 8008c6c <_free_r+0x2c>
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	6014      	str	r4, [r2, #0]
 8008c62:	4628      	mov	r0, r5
 8008c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c68:	f7ff bf5e 	b.w	8008b28 <__malloc_unlock>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d908      	bls.n	8008c82 <_free_r+0x42>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	1821      	adds	r1, r4, r0
 8008c74:	428b      	cmp	r3, r1
 8008c76:	bf01      	itttt	eq
 8008c78:	6819      	ldreq	r1, [r3, #0]
 8008c7a:	685b      	ldreq	r3, [r3, #4]
 8008c7c:	1809      	addeq	r1, r1, r0
 8008c7e:	6021      	streq	r1, [r4, #0]
 8008c80:	e7ed      	b.n	8008c5e <_free_r+0x1e>
 8008c82:	461a      	mov	r2, r3
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b10b      	cbz	r3, 8008c8c <_free_r+0x4c>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d9fa      	bls.n	8008c82 <_free_r+0x42>
 8008c8c:	6811      	ldr	r1, [r2, #0]
 8008c8e:	1850      	adds	r0, r2, r1
 8008c90:	42a0      	cmp	r0, r4
 8008c92:	d10b      	bne.n	8008cac <_free_r+0x6c>
 8008c94:	6820      	ldr	r0, [r4, #0]
 8008c96:	4401      	add	r1, r0
 8008c98:	1850      	adds	r0, r2, r1
 8008c9a:	4283      	cmp	r3, r0
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	d1e0      	bne.n	8008c62 <_free_r+0x22>
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	4408      	add	r0, r1
 8008ca6:	6010      	str	r0, [r2, #0]
 8008ca8:	6053      	str	r3, [r2, #4]
 8008caa:	e7da      	b.n	8008c62 <_free_r+0x22>
 8008cac:	d902      	bls.n	8008cb4 <_free_r+0x74>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	e7d6      	b.n	8008c62 <_free_r+0x22>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	1821      	adds	r1, r4, r0
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf01      	itttt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	1809      	addeq	r1, r1, r0
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	6054      	str	r4, [r2, #4]
 8008cc8:	e7cb      	b.n	8008c62 <_free_r+0x22>
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	2000172c 	.word	0x2000172c

08008cd0 <__ssputs_r>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	688e      	ldr	r6, [r1, #8]
 8008cd8:	4682      	mov	sl, r0
 8008cda:	42be      	cmp	r6, r7
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4690      	mov	r8, r2
 8008ce0:	680b      	ldr	r3, [r1, #0]
 8008ce2:	d82c      	bhi.n	8008d3e <__ssputs_r+0x6e>
 8008ce4:	898a      	ldrh	r2, [r1, #12]
 8008ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cea:	d026      	beq.n	8008d3a <__ssputs_r+0x6a>
 8008cec:	6965      	ldr	r5, [r4, #20]
 8008cee:	6909      	ldr	r1, [r1, #16]
 8008cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf4:	eba3 0901 	sub.w	r9, r3, r1
 8008cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cfc:	1c7b      	adds	r3, r7, #1
 8008cfe:	444b      	add	r3, r9
 8008d00:	106d      	asrs	r5, r5, #1
 8008d02:	429d      	cmp	r5, r3
 8008d04:	bf38      	it	cc
 8008d06:	461d      	movcc	r5, r3
 8008d08:	0553      	lsls	r3, r2, #21
 8008d0a:	d527      	bpl.n	8008d5c <__ssputs_r+0x8c>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7ff fe85 	bl	8008a1c <_malloc_r>
 8008d12:	4606      	mov	r6, r0
 8008d14:	b360      	cbz	r0, 8008d70 <__ssputs_r+0xa0>
 8008d16:	464a      	mov	r2, r9
 8008d18:	6921      	ldr	r1, [r4, #16]
 8008d1a:	f7ff ff83 	bl	8008c24 <memcpy>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	6126      	str	r6, [r4, #16]
 8008d2c:	444e      	add	r6, r9
 8008d2e:	6026      	str	r6, [r4, #0]
 8008d30:	463e      	mov	r6, r7
 8008d32:	6165      	str	r5, [r4, #20]
 8008d34:	eba5 0509 	sub.w	r5, r5, r9
 8008d38:	60a5      	str	r5, [r4, #8]
 8008d3a:	42be      	cmp	r6, r7
 8008d3c:	d900      	bls.n	8008d40 <__ssputs_r+0x70>
 8008d3e:	463e      	mov	r6, r7
 8008d40:	4632      	mov	r2, r6
 8008d42:	4641      	mov	r1, r8
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	f000 faaf 	bl	80092a8 <memmove>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	68a3      	ldr	r3, [r4, #8]
 8008d4e:	1b9b      	subs	r3, r3, r6
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	4433      	add	r3, r6
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	f000 facb 	bl	80092f8 <_realloc_r>
 8008d62:	4606      	mov	r6, r0
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d1e0      	bne.n	8008d2a <__ssputs_r+0x5a>
 8008d68:	4650      	mov	r0, sl
 8008d6a:	6921      	ldr	r1, [r4, #16]
 8008d6c:	f7ff ff68 	bl	8008c40 <_free_r>
 8008d70:	230c      	movs	r3, #12
 8008d72:	f8ca 3000 	str.w	r3, [sl]
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	e7e9      	b.n	8008d58 <__ssputs_r+0x88>

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	4698      	mov	r8, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	061b      	lsls	r3, r3, #24
 8008d90:	460d      	mov	r5, r1
 8008d92:	4614      	mov	r4, r2
 8008d94:	b09d      	sub	sp, #116	; 0x74
 8008d96:	d50e      	bpl.n	8008db6 <_svfiprintf_r+0x32>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b963      	cbnz	r3, 8008db6 <_svfiprintf_r+0x32>
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	f7ff fe3d 	bl	8008a1c <_malloc_r>
 8008da2:	6028      	str	r0, [r5, #0]
 8008da4:	6128      	str	r0, [r5, #16]
 8008da6:	b920      	cbnz	r0, 8008db2 <_svfiprintf_r+0x2e>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e0d0      	b.n	8008f54 <_svfiprintf_r+0x1d0>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	616b      	str	r3, [r5, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc0:	2330      	movs	r3, #48	; 0x30
 8008dc2:	f04f 0901 	mov.w	r9, #1
 8008dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008f6c <_svfiprintf_r+0x1e8>
 8008dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dda:	b10a      	cbz	r2, 8008de0 <_svfiprintf_r+0x5c>
 8008ddc:	2a25      	cmp	r2, #37	; 0x25
 8008dde:	d1f9      	bne.n	8008dd4 <_svfiprintf_r+0x50>
 8008de0:	ebba 0b04 	subs.w	fp, sl, r4
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x7a>
 8008de6:	465b      	mov	r3, fp
 8008de8:	4622      	mov	r2, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff ff6f 	bl	8008cd0 <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80a9 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dfa:	445a      	add	r2, fp
 8008dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80a1 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	9307      	str	r3, [sp, #28]
 8008e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e20:	4654      	mov	r4, sl
 8008e22:	2205      	movs	r2, #5
 8008e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e28:	4850      	ldr	r0, [pc, #320]	; (8008f6c <_svfiprintf_r+0x1e8>)
 8008e2a:	f000 fa57 	bl	80092dc <memchr>
 8008e2e:	9a04      	ldr	r2, [sp, #16]
 8008e30:	b9d8      	cbnz	r0, 8008e6a <_svfiprintf_r+0xe6>
 8008e32:	06d0      	lsls	r0, r2, #27
 8008e34:	bf44      	itt	mi
 8008e36:	2320      	movmi	r3, #32
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3c:	0711      	lsls	r1, r2, #28
 8008e3e:	bf44      	itt	mi
 8008e40:	232b      	movmi	r3, #43	; 0x2b
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xf6>
 8008e4e:	4654      	mov	r4, sl
 8008e50:	2000      	movs	r0, #0
 8008e52:	f04f 0c0a 	mov.w	ip, #10
 8008e56:	9a07      	ldr	r2, [sp, #28]
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	d94d      	bls.n	8008f00 <_svfiprintf_r+0x17c>
 8008e64:	b1b0      	cbz	r0, 8008e94 <_svfiprintf_r+0x110>
 8008e66:	9207      	str	r2, [sp, #28]
 8008e68:	e014      	b.n	8008e94 <_svfiprintf_r+0x110>
 8008e6a:	eba0 0308 	sub.w	r3, r0, r8
 8008e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	46a2      	mov	sl, r4
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	e7d2      	b.n	8008e20 <_svfiprintf_r+0x9c>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfbb      	ittet	lt
 8008e86:	425b      	neglt	r3, r3
 8008e88:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8c:	9307      	strge	r3, [sp, #28]
 8008e8e:	9307      	strlt	r3, [sp, #28]
 8008e90:	bfb8      	it	lt
 8008e92:	9204      	strlt	r2, [sp, #16]
 8008e94:	7823      	ldrb	r3, [r4, #0]
 8008e96:	2b2e      	cmp	r3, #46	; 0x2e
 8008e98:	d10c      	bne.n	8008eb4 <_svfiprintf_r+0x130>
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d134      	bne.n	8008f0a <_svfiprintf_r+0x186>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	3402      	adds	r4, #2
 8008ea4:	1d1a      	adds	r2, r3, #4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	9203      	str	r2, [sp, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfb8      	it	lt
 8008eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008f70 <_svfiprintf_r+0x1ec>
 8008eb8:	2203      	movs	r2, #3
 8008eba:	4650      	mov	r0, sl
 8008ebc:	7821      	ldrb	r1, [r4, #0]
 8008ebe:	f000 fa0d 	bl	80092dc <memchr>
 8008ec2:	b138      	cbz	r0, 8008ed4 <_svfiprintf_r+0x150>
 8008ec4:	2240      	movs	r2, #64	; 0x40
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	eba0 000a 	sub.w	r0, r0, sl
 8008ecc:	4082      	lsls	r2, r0
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	2206      	movs	r2, #6
 8008eda:	4826      	ldr	r0, [pc, #152]	; (8008f74 <_svfiprintf_r+0x1f0>)
 8008edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ee0:	f000 f9fc 	bl	80092dc <memchr>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d038      	beq.n	8008f5a <_svfiprintf_r+0x1d6>
 8008ee8:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <_svfiprintf_r+0x1f4>)
 8008eea:	bb1b      	cbnz	r3, 8008f34 <_svfiprintf_r+0x1b0>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	4433      	add	r3, r6
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	e768      	b.n	8008dd2 <_svfiprintf_r+0x4e>
 8008f00:	460c      	mov	r4, r1
 8008f02:	2001      	movs	r0, #1
 8008f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f08:	e7a6      	b.n	8008e58 <_svfiprintf_r+0xd4>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f04f 0c0a 	mov.w	ip, #10
 8008f10:	4619      	mov	r1, r3
 8008f12:	3401      	adds	r4, #1
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1c:	3a30      	subs	r2, #48	; 0x30
 8008f1e:	2a09      	cmp	r2, #9
 8008f20:	d903      	bls.n	8008f2a <_svfiprintf_r+0x1a6>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c6      	beq.n	8008eb4 <_svfiprintf_r+0x130>
 8008f26:	9105      	str	r1, [sp, #20]
 8008f28:	e7c4      	b.n	8008eb4 <_svfiprintf_r+0x130>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f32:	e7f0      	b.n	8008f16 <_svfiprintf_r+0x192>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	f3af 8000 	nop.w
 8008f44:	1c42      	adds	r2, r0, #1
 8008f46:	4606      	mov	r6, r0
 8008f48:	d1d6      	bne.n	8008ef8 <_svfiprintf_r+0x174>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	065b      	lsls	r3, r3, #25
 8008f4e:	f53f af2d 	bmi.w	8008dac <_svfiprintf_r+0x28>
 8008f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4638      	mov	r0, r7
 8008f62:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	f000 f87d 	bl	8009064 <_printf_i>
 8008f6a:	e7eb      	b.n	8008f44 <_svfiprintf_r+0x1c0>
 8008f6c:	0800980c 	.word	0x0800980c
 8008f70:	08009812 	.word	0x08009812
 8008f74:	08009816 	.word	0x08009816
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	08008cd1 	.word	0x08008cd1

08008f80 <_printf_common>:
 8008f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f84:	4616      	mov	r6, r2
 8008f86:	4699      	mov	r9, r3
 8008f88:	688a      	ldr	r2, [r1, #8]
 8008f8a:	690b      	ldr	r3, [r1, #16]
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	bfb8      	it	lt
 8008f92:	4613      	movlt	r3, r2
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_printf_common+0x26>
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	0699      	lsls	r1, r3, #26
 8008faa:	bf42      	ittt	mi
 8008fac:	6833      	ldrmi	r3, [r6, #0]
 8008fae:	3302      	addmi	r3, #2
 8008fb0:	6033      	strmi	r3, [r6, #0]
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	f015 0506 	ands.w	r5, r5, #6
 8008fb8:	d106      	bne.n	8008fc8 <_printf_common+0x48>
 8008fba:	f104 0a19 	add.w	sl, r4, #25
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	6832      	ldr	r2, [r6, #0]
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dc2b      	bgt.n	8009020 <_printf_common+0xa0>
 8008fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fcc:	1e13      	subs	r3, r2, #0
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	0692      	lsls	r2, r2, #26
 8008fd6:	d430      	bmi.n	800903a <_printf_common+0xba>
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fe0:	47c0      	blx	r8
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d023      	beq.n	800902e <_printf_common+0xae>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	f003 0306 	and.w	r3, r3, #6
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	bf14      	ite	ne
 8008ff2:	2500      	movne	r5, #0
 8008ff4:	6833      	ldreq	r3, [r6, #0]
 8008ff6:	f04f 0600 	mov.w	r6, #0
 8008ffa:	bf08      	it	eq
 8008ffc:	68e5      	ldreq	r5, [r4, #12]
 8008ffe:	f104 041a 	add.w	r4, r4, #26
 8009002:	bf08      	it	eq
 8009004:	1aed      	subeq	r5, r5, r3
 8009006:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800900a:	bf08      	it	eq
 800900c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009010:	4293      	cmp	r3, r2
 8009012:	bfc4      	itt	gt
 8009014:	1a9b      	subgt	r3, r3, r2
 8009016:	18ed      	addgt	r5, r5, r3
 8009018:	42b5      	cmp	r5, r6
 800901a:	d11a      	bne.n	8009052 <_printf_common+0xd2>
 800901c:	2000      	movs	r0, #0
 800901e:	e008      	b.n	8009032 <_printf_common+0xb2>
 8009020:	2301      	movs	r3, #1
 8009022:	4652      	mov	r2, sl
 8009024:	4649      	mov	r1, r9
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d103      	bne.n	8009036 <_printf_common+0xb6>
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009036:	3501      	adds	r5, #1
 8009038:	e7c1      	b.n	8008fbe <_printf_common+0x3e>
 800903a:	2030      	movs	r0, #48	; 0x30
 800903c:	18e1      	adds	r1, r4, r3
 800903e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009048:	4422      	add	r2, r4
 800904a:	3302      	adds	r3, #2
 800904c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009050:	e7c2      	b.n	8008fd8 <_printf_common+0x58>
 8009052:	2301      	movs	r3, #1
 8009054:	4622      	mov	r2, r4
 8009056:	4649      	mov	r1, r9
 8009058:	4638      	mov	r0, r7
 800905a:	47c0      	blx	r8
 800905c:	3001      	adds	r0, #1
 800905e:	d0e6      	beq.n	800902e <_printf_common+0xae>
 8009060:	3601      	adds	r6, #1
 8009062:	e7d9      	b.n	8009018 <_printf_common+0x98>

08009064 <_printf_i>:
 8009064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	7e0f      	ldrb	r7, [r1, #24]
 800906a:	4691      	mov	r9, r2
 800906c:	2f78      	cmp	r7, #120	; 0x78
 800906e:	4680      	mov	r8, r0
 8009070:	460c      	mov	r4, r1
 8009072:	469a      	mov	sl, r3
 8009074:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800907a:	d807      	bhi.n	800908c <_printf_i+0x28>
 800907c:	2f62      	cmp	r7, #98	; 0x62
 800907e:	d80a      	bhi.n	8009096 <_printf_i+0x32>
 8009080:	2f00      	cmp	r7, #0
 8009082:	f000 80d5 	beq.w	8009230 <_printf_i+0x1cc>
 8009086:	2f58      	cmp	r7, #88	; 0x58
 8009088:	f000 80c1 	beq.w	800920e <_printf_i+0x1aa>
 800908c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009094:	e03a      	b.n	800910c <_printf_i+0xa8>
 8009096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800909a:	2b15      	cmp	r3, #21
 800909c:	d8f6      	bhi.n	800908c <_printf_i+0x28>
 800909e:	a101      	add	r1, pc, #4	; (adr r1, 80090a4 <_printf_i+0x40>)
 80090a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090a4:	080090fd 	.word	0x080090fd
 80090a8:	08009111 	.word	0x08009111
 80090ac:	0800908d 	.word	0x0800908d
 80090b0:	0800908d 	.word	0x0800908d
 80090b4:	0800908d 	.word	0x0800908d
 80090b8:	0800908d 	.word	0x0800908d
 80090bc:	08009111 	.word	0x08009111
 80090c0:	0800908d 	.word	0x0800908d
 80090c4:	0800908d 	.word	0x0800908d
 80090c8:	0800908d 	.word	0x0800908d
 80090cc:	0800908d 	.word	0x0800908d
 80090d0:	08009217 	.word	0x08009217
 80090d4:	0800913d 	.word	0x0800913d
 80090d8:	080091d1 	.word	0x080091d1
 80090dc:	0800908d 	.word	0x0800908d
 80090e0:	0800908d 	.word	0x0800908d
 80090e4:	08009239 	.word	0x08009239
 80090e8:	0800908d 	.word	0x0800908d
 80090ec:	0800913d 	.word	0x0800913d
 80090f0:	0800908d 	.word	0x0800908d
 80090f4:	0800908d 	.word	0x0800908d
 80090f8:	080091d9 	.word	0x080091d9
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	1d1a      	adds	r2, r3, #4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	602a      	str	r2, [r5, #0]
 8009104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800910c:	2301      	movs	r3, #1
 800910e:	e0a0      	b.n	8009252 <_printf_i+0x1ee>
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	0607      	lsls	r7, r0, #24
 8009116:	f103 0104 	add.w	r1, r3, #4
 800911a:	6029      	str	r1, [r5, #0]
 800911c:	d501      	bpl.n	8009122 <_printf_i+0xbe>
 800911e:	681e      	ldr	r6, [r3, #0]
 8009120:	e003      	b.n	800912a <_printf_i+0xc6>
 8009122:	0646      	lsls	r6, r0, #25
 8009124:	d5fb      	bpl.n	800911e <_printf_i+0xba>
 8009126:	f9b3 6000 	ldrsh.w	r6, [r3]
 800912a:	2e00      	cmp	r6, #0
 800912c:	da03      	bge.n	8009136 <_printf_i+0xd2>
 800912e:	232d      	movs	r3, #45	; 0x2d
 8009130:	4276      	negs	r6, r6
 8009132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009136:	230a      	movs	r3, #10
 8009138:	4859      	ldr	r0, [pc, #356]	; (80092a0 <_printf_i+0x23c>)
 800913a:	e012      	b.n	8009162 <_printf_i+0xfe>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	1d19      	adds	r1, r3, #4
 8009142:	6029      	str	r1, [r5, #0]
 8009144:	0605      	lsls	r5, r0, #24
 8009146:	d501      	bpl.n	800914c <_printf_i+0xe8>
 8009148:	681e      	ldr	r6, [r3, #0]
 800914a:	e002      	b.n	8009152 <_printf_i+0xee>
 800914c:	0641      	lsls	r1, r0, #25
 800914e:	d5fb      	bpl.n	8009148 <_printf_i+0xe4>
 8009150:	881e      	ldrh	r6, [r3, #0]
 8009152:	2f6f      	cmp	r7, #111	; 0x6f
 8009154:	bf0c      	ite	eq
 8009156:	2308      	moveq	r3, #8
 8009158:	230a      	movne	r3, #10
 800915a:	4851      	ldr	r0, [pc, #324]	; (80092a0 <_printf_i+0x23c>)
 800915c:	2100      	movs	r1, #0
 800915e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009162:	6865      	ldr	r5, [r4, #4]
 8009164:	2d00      	cmp	r5, #0
 8009166:	bfa8      	it	ge
 8009168:	6821      	ldrge	r1, [r4, #0]
 800916a:	60a5      	str	r5, [r4, #8]
 800916c:	bfa4      	itt	ge
 800916e:	f021 0104 	bicge.w	r1, r1, #4
 8009172:	6021      	strge	r1, [r4, #0]
 8009174:	b90e      	cbnz	r6, 800917a <_printf_i+0x116>
 8009176:	2d00      	cmp	r5, #0
 8009178:	d04b      	beq.n	8009212 <_printf_i+0x1ae>
 800917a:	4615      	mov	r5, r2
 800917c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009180:	fb03 6711 	mls	r7, r3, r1, r6
 8009184:	5dc7      	ldrb	r7, [r0, r7]
 8009186:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800918a:	4637      	mov	r7, r6
 800918c:	42bb      	cmp	r3, r7
 800918e:	460e      	mov	r6, r1
 8009190:	d9f4      	bls.n	800917c <_printf_i+0x118>
 8009192:	2b08      	cmp	r3, #8
 8009194:	d10b      	bne.n	80091ae <_printf_i+0x14a>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	07de      	lsls	r6, r3, #31
 800919a:	d508      	bpl.n	80091ae <_printf_i+0x14a>
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	6861      	ldr	r1, [r4, #4]
 80091a0:	4299      	cmp	r1, r3
 80091a2:	bfde      	ittt	le
 80091a4:	2330      	movle	r3, #48	; 0x30
 80091a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091ae:	1b52      	subs	r2, r2, r5
 80091b0:	6122      	str	r2, [r4, #16]
 80091b2:	464b      	mov	r3, r9
 80091b4:	4621      	mov	r1, r4
 80091b6:	4640      	mov	r0, r8
 80091b8:	f8cd a000 	str.w	sl, [sp]
 80091bc:	aa03      	add	r2, sp, #12
 80091be:	f7ff fedf 	bl	8008f80 <_printf_common>
 80091c2:	3001      	adds	r0, #1
 80091c4:	d14a      	bne.n	800925c <_printf_i+0x1f8>
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	b004      	add	sp, #16
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	f043 0320 	orr.w	r3, r3, #32
 80091d6:	6023      	str	r3, [r4, #0]
 80091d8:	2778      	movs	r7, #120	; 0x78
 80091da:	4832      	ldr	r0, [pc, #200]	; (80092a4 <_printf_i+0x240>)
 80091dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	6829      	ldr	r1, [r5, #0]
 80091e4:	061f      	lsls	r7, r3, #24
 80091e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80091ea:	d402      	bmi.n	80091f2 <_printf_i+0x18e>
 80091ec:	065f      	lsls	r7, r3, #25
 80091ee:	bf48      	it	mi
 80091f0:	b2b6      	uxthmi	r6, r6
 80091f2:	07df      	lsls	r7, r3, #31
 80091f4:	bf48      	it	mi
 80091f6:	f043 0320 	orrmi.w	r3, r3, #32
 80091fa:	6029      	str	r1, [r5, #0]
 80091fc:	bf48      	it	mi
 80091fe:	6023      	strmi	r3, [r4, #0]
 8009200:	b91e      	cbnz	r6, 800920a <_printf_i+0x1a6>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	f023 0320 	bic.w	r3, r3, #32
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	2310      	movs	r3, #16
 800920c:	e7a6      	b.n	800915c <_printf_i+0xf8>
 800920e:	4824      	ldr	r0, [pc, #144]	; (80092a0 <_printf_i+0x23c>)
 8009210:	e7e4      	b.n	80091dc <_printf_i+0x178>
 8009212:	4615      	mov	r5, r2
 8009214:	e7bd      	b.n	8009192 <_printf_i+0x12e>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	6826      	ldr	r6, [r4, #0]
 800921a:	1d18      	adds	r0, r3, #4
 800921c:	6961      	ldr	r1, [r4, #20]
 800921e:	6028      	str	r0, [r5, #0]
 8009220:	0635      	lsls	r5, r6, #24
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	d501      	bpl.n	800922a <_printf_i+0x1c6>
 8009226:	6019      	str	r1, [r3, #0]
 8009228:	e002      	b.n	8009230 <_printf_i+0x1cc>
 800922a:	0670      	lsls	r0, r6, #25
 800922c:	d5fb      	bpl.n	8009226 <_printf_i+0x1c2>
 800922e:	8019      	strh	r1, [r3, #0]
 8009230:	2300      	movs	r3, #0
 8009232:	4615      	mov	r5, r2
 8009234:	6123      	str	r3, [r4, #16]
 8009236:	e7bc      	b.n	80091b2 <_printf_i+0x14e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	2100      	movs	r1, #0
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	602a      	str	r2, [r5, #0]
 8009240:	681d      	ldr	r5, [r3, #0]
 8009242:	6862      	ldr	r2, [r4, #4]
 8009244:	4628      	mov	r0, r5
 8009246:	f000 f849 	bl	80092dc <memchr>
 800924a:	b108      	cbz	r0, 8009250 <_printf_i+0x1ec>
 800924c:	1b40      	subs	r0, r0, r5
 800924e:	6060      	str	r0, [r4, #4]
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	2300      	movs	r3, #0
 8009256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800925a:	e7aa      	b.n	80091b2 <_printf_i+0x14e>
 800925c:	462a      	mov	r2, r5
 800925e:	4649      	mov	r1, r9
 8009260:	4640      	mov	r0, r8
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	47d0      	blx	sl
 8009266:	3001      	adds	r0, #1
 8009268:	d0ad      	beq.n	80091c6 <_printf_i+0x162>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	079b      	lsls	r3, r3, #30
 800926e:	d413      	bmi.n	8009298 <_printf_i+0x234>
 8009270:	68e0      	ldr	r0, [r4, #12]
 8009272:	9b03      	ldr	r3, [sp, #12]
 8009274:	4298      	cmp	r0, r3
 8009276:	bfb8      	it	lt
 8009278:	4618      	movlt	r0, r3
 800927a:	e7a6      	b.n	80091ca <_printf_i+0x166>
 800927c:	2301      	movs	r3, #1
 800927e:	4632      	mov	r2, r6
 8009280:	4649      	mov	r1, r9
 8009282:	4640      	mov	r0, r8
 8009284:	47d0      	blx	sl
 8009286:	3001      	adds	r0, #1
 8009288:	d09d      	beq.n	80091c6 <_printf_i+0x162>
 800928a:	3501      	adds	r5, #1
 800928c:	68e3      	ldr	r3, [r4, #12]
 800928e:	9903      	ldr	r1, [sp, #12]
 8009290:	1a5b      	subs	r3, r3, r1
 8009292:	42ab      	cmp	r3, r5
 8009294:	dcf2      	bgt.n	800927c <_printf_i+0x218>
 8009296:	e7eb      	b.n	8009270 <_printf_i+0x20c>
 8009298:	2500      	movs	r5, #0
 800929a:	f104 0619 	add.w	r6, r4, #25
 800929e:	e7f5      	b.n	800928c <_printf_i+0x228>
 80092a0:	0800981d 	.word	0x0800981d
 80092a4:	0800982e 	.word	0x0800982e

080092a8 <memmove>:
 80092a8:	4288      	cmp	r0, r1
 80092aa:	b510      	push	{r4, lr}
 80092ac:	eb01 0402 	add.w	r4, r1, r2
 80092b0:	d902      	bls.n	80092b8 <memmove+0x10>
 80092b2:	4284      	cmp	r4, r0
 80092b4:	4623      	mov	r3, r4
 80092b6:	d807      	bhi.n	80092c8 <memmove+0x20>
 80092b8:	1e43      	subs	r3, r0, #1
 80092ba:	42a1      	cmp	r1, r4
 80092bc:	d008      	beq.n	80092d0 <memmove+0x28>
 80092be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092c6:	e7f8      	b.n	80092ba <memmove+0x12>
 80092c8:	4601      	mov	r1, r0
 80092ca:	4402      	add	r2, r0
 80092cc:	428a      	cmp	r2, r1
 80092ce:	d100      	bne.n	80092d2 <memmove+0x2a>
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092da:	e7f7      	b.n	80092cc <memmove+0x24>

080092dc <memchr>:
 80092dc:	4603      	mov	r3, r0
 80092de:	b510      	push	{r4, lr}
 80092e0:	b2c9      	uxtb	r1, r1
 80092e2:	4402      	add	r2, r0
 80092e4:	4293      	cmp	r3, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	d101      	bne.n	80092ee <memchr+0x12>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e003      	b.n	80092f6 <memchr+0x1a>
 80092ee:	7804      	ldrb	r4, [r0, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	428c      	cmp	r4, r1
 80092f4:	d1f6      	bne.n	80092e4 <memchr+0x8>
 80092f6:	bd10      	pop	{r4, pc}

080092f8 <_realloc_r>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	4680      	mov	r8, r0
 80092fe:	4614      	mov	r4, r2
 8009300:	460e      	mov	r6, r1
 8009302:	b921      	cbnz	r1, 800930e <_realloc_r+0x16>
 8009304:	4611      	mov	r1, r2
 8009306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	f7ff bb87 	b.w	8008a1c <_malloc_r>
 800930e:	b92a      	cbnz	r2, 800931c <_realloc_r+0x24>
 8009310:	f7ff fc96 	bl	8008c40 <_free_r>
 8009314:	4625      	mov	r5, r4
 8009316:	4628      	mov	r0, r5
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	f000 f81b 	bl	8009356 <_malloc_usable_size_r>
 8009320:	4284      	cmp	r4, r0
 8009322:	4607      	mov	r7, r0
 8009324:	d802      	bhi.n	800932c <_realloc_r+0x34>
 8009326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800932a:	d812      	bhi.n	8009352 <_realloc_r+0x5a>
 800932c:	4621      	mov	r1, r4
 800932e:	4640      	mov	r0, r8
 8009330:	f7ff fb74 	bl	8008a1c <_malloc_r>
 8009334:	4605      	mov	r5, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d0ed      	beq.n	8009316 <_realloc_r+0x1e>
 800933a:	42bc      	cmp	r4, r7
 800933c:	4622      	mov	r2, r4
 800933e:	4631      	mov	r1, r6
 8009340:	bf28      	it	cs
 8009342:	463a      	movcs	r2, r7
 8009344:	f7ff fc6e 	bl	8008c24 <memcpy>
 8009348:	4631      	mov	r1, r6
 800934a:	4640      	mov	r0, r8
 800934c:	f7ff fc78 	bl	8008c40 <_free_r>
 8009350:	e7e1      	b.n	8009316 <_realloc_r+0x1e>
 8009352:	4635      	mov	r5, r6
 8009354:	e7df      	b.n	8009316 <_realloc_r+0x1e>

08009356 <_malloc_usable_size_r>:
 8009356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935a:	1f18      	subs	r0, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfbc      	itt	lt
 8009360:	580b      	ldrlt	r3, [r1, r0]
 8009362:	18c0      	addlt	r0, r0, r3
 8009364:	4770      	bx	lr
	...

08009368 <_init>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr

08009374 <_fini>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr
