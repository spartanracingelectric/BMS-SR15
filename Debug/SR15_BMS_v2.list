
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009818  08009818  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009818  08009818  00019818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009820  08009820  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  200001cc  080099f4  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  080099f4  00021874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016919  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004516  00000000  00000000  00036b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f0  00000000  00000000  0003c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234e8  00000000  00000000  0003d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c80c  00000000  00000000  00060c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee29  00000000  00000000  0007d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061c0  00000000  00000000  0013c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00142490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08009340 	.word	0x08009340

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08009340 	.word	0x08009340

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_Set_Num_Devices>:
static const uint8_t num_aux_series_groups = 6; //Number of series groups
static uint8_t num_devices; //Keep visibility within this file
static uint8_t num_series_groups; //Number of series groups

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if (num)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <LTC_Set_Num_Devices+0x20>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7013      	strb	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	200001e8 	.word	0x200001e8

08000558 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	return num_devices;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <LTC_Get_Num_Devices+0x10>)
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	200001e8 	.word	0x200001e8

0800056c <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d802      	bhi.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <LTC_Set_Num_Series_Groups+0x28>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	7013      	strb	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200001e9 	.word	0x200001e9

08000598 <LTC_Wakeup_Idle>:
uint8_t LTC_Get_Num_Series_Groups(void) {
	return num_series_groups;
}

/* Wake LTC up from IDLE state into READY state */
void LTC_Wakeup_Idle(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 1; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e00c      	b.n	80005c2 <LTC_Wakeup_Idle+0x2a>
		LTC_nCS_Low(); //Pull CS low
 80005a8:	f001 f890 	bl	80016cc <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 80005ac:	1cf9      	adds	r1, r7, #3
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <LTC_Wakeup_Idle+0x3c>)
 80005b4:	f004 f908 	bl	80047c8 <HAL_SPI_Transmit>
		LTC_nCS_High(); //Pull CS high
 80005b8:	f001 f87c 	bl	80016b4 <LTC_nCS_High>
	for (int i = 0; i < 1; i++) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	ddef      	ble.n	80005a8 <LTC_Wakeup_Idle+0x10>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000298 	.word	0x20000298

080005d8 <LTC_Wakeup_Sleep>:

//wake up sleep
void LTC_Wakeup_Sleep(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1; i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e00e      	b.n	8000602 <LTC_Wakeup_Sleep+0x2a>
		LTC_nCS_Low();
 80005e4:	f001 f872 	bl	80016cc <LTC_nCS_Low>
		HAL_Delay(300);
 80005e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ec:	f001 f9f6 	bl	80019dc <HAL_Delay>
		LTC_nCS_High();
 80005f0:	f001 f860 	bl	80016b4 <LTC_nCS_High>
		HAL_Delay(300);
 80005f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f8:	f001 f9f0 	bl	80019dc <HAL_Delay>
	for (int i = 0; i < 1; i++) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	dded      	ble.n	80005e4 <LTC_Wakeup_Sleep+0xc>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <ltc6811_wrcomm>:
	return ret;
}

void ltc6811_wrcomm(uint8_t total_ic, //The number of ICs being written to
		uint8_t comm[6] //A two dimensional array of the comm data that will be written
		) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8000620:	2306      	movs	r3, #6
 8000622:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3304      	adds	r3, #4
 800062c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800062e:	7cfb      	ldrb	r3, [r7, #19]
 8000630:	4618      	mov	r0, r3
 8000632:	f008 f9af 	bl	8008994 <malloc>
 8000636:	4603      	mov	r3, r0
 8000638:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2207      	movs	r2, #7
 800063e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	2221      	movs	r2, #33	; 0x21
 8000646:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000648:	68f9      	ldr	r1, [r7, #12]
 800064a:	2002      	movs	r0, #2
 800064c:	f000 f9e8 	bl	8000a20 <LTC_PEC15_Calc>
 8000650:	4603      	mov	r3, r0
 8000652:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000654:	897b      	ldrh	r3, [r7, #10]
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	b29a      	uxth	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3302      	adds	r3, #2
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3303      	adds	r3, #3
 8000666:	897a      	ldrh	r2, [r7, #10]
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	75bb      	strb	r3, [r7, #22]
 8000674:	e030      	b.n	80006d8 <ltc6811_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000676:	2300      	movs	r3, #0
 8000678:	757b      	strb	r3, [r7, #21]
 800067a:	e00d      	b.n	8000698 <ltc6811_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; //adding the config data to the array to be sent
 800067c:	7d7b      	ldrb	r3, [r7, #21]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	441a      	add	r2, r3
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	440b      	add	r3, r1
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	3301      	adds	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	3301      	adds	r3, #1
 8000696:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000698:	7d7a      	ldrb	r2, [r7, #21]
 800069a:	7d3b      	ldrb	r3, [r7, #20]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3ed      	bcc.n	800067c <ltc6811_wrcomm+0x68>
		}
		comm_pec = (uint16_t) LTC_PEC15_Calc(BYTES_IN_REG,
 80006a0:	7d3b      	ldrb	r3, [r7, #20]
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f9bb 	bl	8000a20 <LTC_PEC15_Calc>
 80006aa:	4603      	mov	r3, r0
 80006ac:	813b      	strh	r3, [r7, #8]
				&comm[0]); // calculating the PEC for each ICs configuration register data
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80006ae:	893b      	ldrh	r3, [r7, #8]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b299      	uxth	r1, r3
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	3301      	adds	r3, #1
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	893a      	ldrh	r2, [r7, #8]
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	3302      	adds	r3, #2
 80006d0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80006d2:	7dbb      	ldrb	r3, [r7, #22]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	75bb      	strb	r3, [r7, #22]
 80006d8:	7dbb      	ldrb	r3, [r7, #22]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1cb      	bne.n	8000676 <ltc6811_wrcomm+0x62>
	}

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80006de:	f7ff ff5b 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80006e2:	f000 fff3 	bl	80016cc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80006e6:	7cfb      	ldrb	r3, [r7, #19]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <ltc6811_wrcomm+0xf4>)
 80006f0:	f004 f86a 	bl	80047c8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80006f4:	f000 ffde 	bl	80016b4 <LTC_nCS_High>
	free(cmd);
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f008 f953 	bl	80089a4 <free>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000298 	.word	0x20000298

0800070c <ltc6811_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc6811_stcomm() {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000712:	2307      	movs	r3, #7
 8000714:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x23;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	2002      	movs	r0, #2
 8000720:	f000 f97e 	bl	8000a20 <LTC_PEC15_Calc>
 8000724:	4603      	mov	r3, r0
 8000726:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000728:	897b      	ldrh	r3, [r7, #10]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000732:	897b      	ldrh	r3, [r7, #10]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000738:	f7ff ff2e 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 800073c:	f000 ffc6 	bl	80016cc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2204      	movs	r2, #4
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <ltc6811_stcomm+0x6c>)
 8000748:	f004 f83e 	bl	80047c8 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e008      	b.n	8000764 <ltc6811_stcomm+0x58>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <ltc6811_stcomm+0x6c>)
 800075a:	f004 f835 	bl	80047c8 <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b08      	cmp	r3, #8
 8000768:	ddf3      	ble.n	8000752 <ltc6811_stcomm+0x46>
	}
	LTC_nCS_High();
 800076a:	f000 ffa3 	bl	80016b4 <LTC_nCS_High>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000298 	.word	0x20000298

0800077c <LTC_ReadRawCellTemps>:

		actual_temp[i] = steinhart;
	}
}

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 800077c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000780:	b089      	sub	sp, #36	; 0x24
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	466b      	mov	r3, sp
 8000788:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 800078e:	f7ff fee3 	bl	8000558 <LTC_Get_Num_Devices>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	2308      	movs	r3, #8
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800079e:	7f3b      	ldrb	r3, [r7, #28]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	7f3b      	ldrb	r3, [r7, #28]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4698      	mov	r8, r3
 80007aa:	4691      	mov	r9, r2
 80007ac:	f04f 0200 	mov.w	r2, #0
 80007b0:	f04f 0300 	mov.w	r3, #0
 80007b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c0:	7f3b      	ldrb	r3, [r7, #28]
 80007c2:	2200      	movs	r2, #0
 80007c4:	461c      	mov	r4, r3
 80007c6:	4615      	mov	r5, r2
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	00eb      	lsls	r3, r5, #3
 80007d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007d6:	00e2      	lsls	r2, r4, #3
 80007d8:	7f3b      	ldrb	r3, [r7, #28]
 80007da:	3307      	adds	r3, #7
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	ebad 0d03 	sub.w	sp, sp, r3
 80007e4:	466b      	mov	r3, sp
 80007e6:	3300      	adds	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	77bb      	strb	r3, [r7, #30]
 80007ee:	e07c      	b.n	80008ea <LTC_ReadRawCellTemps+0x16e>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 80007f0:	7fbb      	ldrb	r3, [r7, #30]
 80007f2:	4a46      	ldr	r2, [pc, #280]	; (800090c <LTC_ReadRawCellTemps+0x190>)
 80007f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 8000800:	7fbb      	ldrb	r3, [r7, #30]
 8000802:	4a42      	ldr	r2, [pc, #264]	; (800090c <LTC_ReadRawCellTemps+0x190>)
 8000804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	2002      	movs	r0, #2
 8000814:	f000 f904 	bl	8000a20 <LTC_PEC15_Calc>
 8000818:	4603      	mov	r3, r0
 800081a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800081c:	8a7b      	ldrh	r3, [r7, #18]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8000826:	8a7b      	ldrh	r3, [r7, #18]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 800082c:	f7ff feb4 	bl	8000598 <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 8000830:	f000 ff4c 	bl	80016cc <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2204      	movs	r2, #4
 800083c:	4834      	ldr	r0, [pc, #208]	; (8000910 <LTC_ReadRawCellTemps+0x194>)
 800083e:	f003 ffc3 	bl	80047c8 <HAL_SPI_Transmit>
 8000842:	4603      	mov	r3, r0
 8000844:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8000846:	7c7b      	ldrb	r3, [r7, #17]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <LTC_ReadRawCellTemps+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 800084c:	7c7b      	ldrb	r3, [r7, #17]
 800084e:	2200      	movs	r2, #0
 8000850:	4413      	add	r3, r2
 8000852:	2201      	movs	r2, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	b25a      	sxtb	r2, r3
 800085a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800085e:	4313      	orrs	r3, r2
 8000860:	b25b      	sxtb	r3, r3
 8000862:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000864:	7f3b      	ldrb	r3, [r7, #28]
 8000866:	b29a      	uxth	r2, r3
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	4828      	ldr	r0, [pc, #160]	; (8000910 <LTC_ReadRawCellTemps+0x194>)
 800086e:	f004 f8ee 	bl	8004a4e <HAL_SPI_Receive>
 8000872:	4603      	mov	r3, r0
 8000874:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00b      	beq.n	8000894 <LTC_ReadRawCellTemps+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 800087c:	7c7b      	ldrb	r3, [r7, #17]
 800087e:	2204      	movs	r2, #4
 8000880:	4413      	add	r3, r2
 8000882:	2201      	movs	r2, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	b25a      	sxtb	r2, r3
 800088a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800088e:	4313      	orrs	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000894:	2300      	movs	r3, #0
 8000896:	777b      	strb	r3, [r7, #29]
 8000898:	e01b      	b.n	80008d2 <LTC_ReadRawCellTemps+0x156>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 800089a:	7f7b      	ldrb	r3, [r7, #29]
 800089c:	2208      	movs	r2, #8
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4413      	add	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008a8:	7f7b      	ldrb	r3, [r7, #29]
 80008aa:	2206      	movs	r2, #6
 80008ac:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80008b0:	7fbb      	ldrb	r3, [r7, #30]
 80008b2:	2103      	movs	r1, #3
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
					REG_LEN - 2);
 80008c0:	2208      	movs	r2, #8
 80008c2:	3a02      	subs	r2, #2
			memcpy(
 80008c4:	68f9      	ldr	r1, [r7, #12]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 f998 	bl	8008bfc <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80008cc:	7f7b      	ldrb	r3, [r7, #29]
 80008ce:	3301      	adds	r3, #1
 80008d0:	777b      	strb	r3, [r7, #29]
 80008d2:	f7ff fe41 	bl	8000558 <LTC_Get_Num_Devices>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	7f7b      	ldrb	r3, [r7, #29]
 80008dc:	4293      	cmp	r3, r2
 80008de:	d3dc      	bcc.n	800089a <LTC_ReadRawCellTemps+0x11e>
		}

		LTC_nCS_High(); //Pull CS high
 80008e0:	f000 fee8 	bl	80016b4 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 80008e4:	7fbb      	ldrb	r3, [r7, #30]
 80008e6:	3301      	adds	r3, #1
 80008e8:	77bb      	strb	r3, [r7, #30]
 80008ea:	2206      	movs	r2, #6
 80008ec:	2303      	movs	r3, #3
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	7fba      	ldrb	r2, [r7, #30]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	f4ff af7a 	bcc.w	80007f0 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
 80008fe:	46b5      	mov	sp, r6
}
 8000900:	4618      	mov	r0, r3
 8000902:	3724      	adds	r7, #36	; 0x24
 8000904:	46bd      	mov	sp, r7
 8000906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800090a:	bf00      	nop
 800090c:	080093b0 	.word	0x080093b0
 8000910:	20000298 	.word	0x20000298

08000914 <LTC_ADAX>:
	LTC_nCS_High();
}

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	105b      	asrs	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3304      	adds	r3, #4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 800093e:	7bfa      	ldrb	r2, [r7, #15]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3360      	adds	r3, #96	; 0x60
 8000948:	b2db      	uxtb	r3, r3
 800094a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	2002      	movs	r0, #2
 8000954:	f000 f864 	bl	8000a20 <LTC_PEC15_Calc>
 8000958:	4603      	mov	r3, r0
 800095a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	b29b      	uxth	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000966:	89bb      	ldrh	r3, [r7, #12]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800096c:	f7ff fe14 	bl	8000598 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000970:	f000 feac 	bl	80016cc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	2204      	movs	r2, #4
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <LTC_ADAX+0x7c>)
 800097e:	f003 ff23 	bl	80047c8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000982:	f000 fe97 	bl	80016b4 <LTC_nCS_High>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000298 	.word	0x20000298

08000994 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80009a6:	2307      	movs	r3, #7
 80009a8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80009aa:	2314      	movs	r3, #20
 80009ac:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	2002      	movs	r0, #2
 80009b4:	f000 f834 	bl	8000a20 <LTC_PEC15_Calc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80009bc:	893b      	ldrh	r3, [r7, #8]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 80009c6:	893b      	ldrh	r3, [r7, #8]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80009cc:	f7ff fde4 	bl	8000598 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 80009d0:	f000 fe7c 	bl	80016cc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80009d4:	1d39      	adds	r1, r7, #4
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2204      	movs	r2, #4
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <LTC_PollAdc+0x84>)
 80009dc:	f003 fef4 	bl	80047c8 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 80009e0:	e00c      	b.n	80009fc <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 80009e2:	f000 fff1 	bl	80019c8 <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 80009ea:	7abb      	ldrb	r3, [r7, #10]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <LTC_PollAdc+0x62>
			finished = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	e002      	b.n	80009fc <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	330a      	adds	r3, #10
 80009fa:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <LTC_PollAdc+0x88>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d802      	bhi.n	8000a0a <LTC_PollAdc+0x76>
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0eb      	beq.n	80009e2 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8000a0a:	f000 fe53 	bl	80016b4 <LTC_nCS_High>
	return (counter);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000298 	.word	0x20000298
 8000a1c:	00030d3f 	.word	0x00030d3f

08000a20 <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a30:	2300      	movs	r3, #0
 8000a32:	737b      	strb	r3, [r7, #13]
 8000a34:	e018      	b.n	8000a68 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	09db      	lsrs	r3, r3, #7
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	7b7b      	ldrb	r3, [r7, #13]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	440b      	add	r3, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4053      	eors	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	897b      	ldrh	r3, [r7, #10]
 8000a56:	490a      	ldr	r1, [pc, #40]	; (8000a80 <LTC_PEC15_Calc+0x60>)
 8000a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4053      	eors	r3, r2
 8000a60:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	3301      	adds	r3, #1
 8000a66:	737b      	strb	r3, [r7, #13]
 8000a68:	7b7a      	ldrb	r2, [r7, #13]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3e2      	bcc.n	8000a36 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	b29b      	uxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	080093b4 	.word	0x080093b4

08000a84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_ADC1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000aae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ab2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ac2:	f000 ffaf 	bl	8001a24 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fd6c 	bl	80015a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ad0:	230e      	movs	r3, #14
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC1_Init+0x74>)
 8000ae2:	f001 f877 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000aec:	f000 fd5c 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	40012400 	.word	0x40012400

08000b00 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b12:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <MX_ADC2_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b2e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b3e:	f000 ff71 	bl	8001a24 <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fd2e 	bl	80015a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_ADC2_Init+0x74>)
 8000b5e:	f001 f839 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b68:	f000 fd1e 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000021c 	.word	0x2000021c
 8000b78:	40012800 	.word	0x40012800

08000b7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_ADC_MspInit+0xbc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d122      	bne.n	8000be2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bcc:	2330      	movs	r3, #48	; 0x30
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4819      	ldr	r0, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0xc4>)
 8000bdc:	f001 fc74 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000be0:	e026      	b.n	8000c30 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_ADC_MspInit+0xc8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d121      	bne.n	8000c30 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_ADC_MspInit+0xc0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_ADC_MspInit+0xc4>)
 8000c2c:	f001 fc4c 	bl	80024c8 <HAL_GPIO_Init>
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40012400 	.word	0x40012400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40012800 	.word	0x40012800

08000c48 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_CAN1_Init+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c54:	2209      	movs	r2, #9
 8000c56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c6e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000c72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_CAN1_Init+0x64>)
 8000c9a:	f001 f8d4 	bl	8001e46 <HAL_CAN_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f000 fc80 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000270 	.word	0x20000270
 8000cb0:	40006400 	.word	0x40006400

08000cb4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <HAL_CAN_MspInit+0xb0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d143      	bne.n	8000d5c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	61d3      	str	r3, [r2, #28]
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_CAN_MspInit+0xb4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <HAL_CAN_MspInit+0xb8>)
 8000d1a:	f001 fbd5 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <HAL_CAN_MspInit+0xb8>)
 8000d34:	f001 fbc8 	bl	80024c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_CAN_MspInit+0xbc>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_CAN_MspInit+0xbc>)
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40006400 	.word	0x40006400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40010000 	.word	0x40010000

08000d74 <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <CAN1_Start+0x10>)
 8000d7a:	f001 f95f 	bl	800203c <HAL_CAN_Start>
 8000d7e:	4603      	mov	r3, r0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000270 	.word	0x20000270

08000d88 <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <CAN1_Activate+0x14>)
 8000d90:	f001 fa67 	bl	8002262 <HAL_CAN_ActivateNotification>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000270 	.word	0x20000270

08000da0 <CAN1_Send>:


HAL_StatusTypeDef CAN1_Send(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	return HAL_CAN_AddTxMessage(&hcan1, &msg.TxHeader, msg.data, &msg.TxMailbox);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <CAN1_Send+0x18>)
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <CAN1_Send+0x1c>)
 8000da8:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <CAN1_Send+0x20>)
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <CAN1_Send+0x24>)
 8000dac:	f001 f98a 	bl	80020c4 <HAL_CAN_AddTxMessage>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000264 	.word	0x20000264
 8000dbc:	20000268 	.word	0x20000268
 8000dc0:	2000024c 	.word	0x2000024c
 8000dc4:	20000270 	.word	0x20000270

08000dc8 <CAN1_SettingsInit>:

void CAN1_SettingsInit(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	CAN1_Start();
 8000dcc:	f7ff ffd2 	bl	8000d74 <CAN1_Start>
	CAN1_Activate();
 8000dd0:	f7ff ffda 	bl	8000d88 <CAN1_Activate>
	msg.TxHeader.IDE= CAN_ID_STD;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
	msg.TxHeader.StdId = 0x00;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
	msg.TxHeader.RTR = CAN_RTR_DATA;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	msg.TxHeader.DLC = 8;
 8000de6:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <CAN1_SettingsInit+0x28>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	611a      	str	r2, [r3, #16]
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000024c 	.word	0x2000024c

08000df4 <setCANId>:

void setCANId(uint32_t id){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	msg.TxHeader.StdId = id;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <setCANId+0x18>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	2000024c 	.word	0x2000024c

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000e8a:	f001 fca1 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0xec>)
 8000e94:	f001 fc9c 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000eb0:	f001 fb0a 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ecc:	f001 fafc 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ee6:	f001 faef 	bl	80024c8 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40011000 	.word	0x40011000

08000f00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
 8000f06:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;
	TimerPacket timerpacket_can1;

	uint16_t *read_volt;
	read_volt = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000f08:	2018      	movs	r0, #24
 8000f0a:	f007 fd43 	bl	8008994 <malloc>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
	uint16_t *read_temp;
	read_temp = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8000f14:	2018      	movs	r0, #24
 8000f16:	f007 fd3d 	bl	8008994 <malloc>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f8c7 3890 	str.w	r3, [r7, #2192]	; 0x890
	uint16_t *read_auxreg = (uint16_t*) malloc(6 * sizeof(uint16_t));
 8000f20:	200c      	movs	r0, #12
 8000f22:	f007 fd37 	bl	8008994 <malloc>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2c:	f000 fcf4 	bl	8001918 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f30:	f000 fa5e 	bl	80013f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f34:	f7ff ff6c 	bl	8000e10 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f38:	f7ff fda4 	bl	8000a84 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f3c:	f7ff fde0 	bl	8000b00 <MX_ADC2_Init>
	MX_CAN1_Init();
 8000f40:	f7ff fe82 	bl	8000c48 <MX_CAN1_Init>
	MX_TIM7_Init();
 8000f44:	f000 fc6e 	bl	8001824 <MX_TIM7_Init>
	MX_SPI1_Init();
 8000f48:	f000 fb34 	bl	80015b4 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000f4c:	f007 f83a 	bl	8007fc4 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	CAN1_SettingsInit(); // Start CAN at 0x00
 8000f50:	f7ff ff3a 	bl	8000dc8 <CAN1_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8000f54:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	49d7      	ldr	r1, [pc, #860]	; (80012b8 <main+0x3b8>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fab3 	bl	80014c8 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000f62:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8000f66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 faec 	bl	8001548 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can1, CAN1_DELAY);
 8000f70:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8000f74:	210a      	movs	r1, #10
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fae6 	bl	8001548 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8000f7c:	f000 fb9a 	bl	80016b4 <LTC_nCS_High>
	LTC_Set_Num_Devices(NUM_DEVICES);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fad7 	bl	8000534 <LTC_Set_Num_Devices>
	LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8000f86:	200c      	movs	r0, #12
 8000f88:	f7ff faf0 	bl	800056c <LTC_Set_Num_Series_Groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t BMS_IC[12][6] = { };
 8000f8c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8000f90:	2248      	movs	r2, #72	; 0x48
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fdd9 	bl	8008b4c <memset>
	BMS_IC[0][0] = 0x69; // Icom Start(6) + I2C_address D0 (0x90)
 8000f9a:	2369      	movs	r3, #105	; 0x69
 8000f9c:	f887 3818 	strb.w	r3, [r7, #2072]	; 0x818
	BMS_IC[0][1] = 0x28; // Fcom master NACK(8)
 8000fa0:	2328      	movs	r3, #40	; 0x28
 8000fa2:	f887 3819 	strb.w	r3, [r7, #2073]	; 0x819
	BMS_IC[0][2] = 0x0F; // Icom Blank (0) + eeprom address D1 (0xF8)
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	f887 381a 	strb.w	r3, [r7, #2074]	; 0x81a
	BMS_IC[0][3] = 0xF9; // Fcom master NACK + Stop(9)
 8000fac:	23f9      	movs	r3, #249	; 0xf9
 8000fae:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
	BMS_IC[0][4] = 0x7F; // NO TRANSMIT
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	f887 381c 	strb.w	r3, [r7, #2076]	; 0x81c
	BMS_IC[0][5] = 0xF9; // Fcom master NACK + Stop(9)
 8000fb8:	23f9      	movs	r3, #249	; 0xf9
 8000fba:	f887 381d 	strb.w	r3, [r7, #2077]	; 0x81d

	BMS_IC[1][0] = 0x69;
 8000fbe:	2369      	movs	r3, #105	; 0x69
 8000fc0:	f887 381e 	strb.w	r3, [r7, #2078]	; 0x81e
	BMS_IC[1][1] = 0x28;
 8000fc4:	2328      	movs	r3, #40	; 0x28
 8000fc6:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	BMS_IC[1][2] = 0x0F;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
	BMS_IC[1][3] = 0xE9;
 8000fd0:	23e9      	movs	r3, #233	; 0xe9
 8000fd2:	f887 3821 	strb.w	r3, [r7, #2081]	; 0x821
	BMS_IC[1][4] = 0x7F;
 8000fd6:	237f      	movs	r3, #127	; 0x7f
 8000fd8:	f887 3822 	strb.w	r3, [r7, #2082]	; 0x822
	BMS_IC[1][5] = 0xF9;
 8000fdc:	23f9      	movs	r3, #249	; 0xf9
 8000fde:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823

	BMS_IC[2][0] = 0x69;
 8000fe2:	2369      	movs	r3, #105	; 0x69
 8000fe4:	f887 3824 	strb.w	r3, [r7, #2084]	; 0x824
	BMS_IC[2][1] = 0x28;
 8000fe8:	2328      	movs	r3, #40	; 0x28
 8000fea:	f887 3825 	strb.w	r3, [r7, #2085]	; 0x825
	BMS_IC[2][2] = 0x0F;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	f887 3826 	strb.w	r3, [r7, #2086]	; 0x826
	BMS_IC[2][3] = 0xD9;
 8000ff4:	23d9      	movs	r3, #217	; 0xd9
 8000ff6:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
	BMS_IC[2][4] = 0x7F;
 8000ffa:	237f      	movs	r3, #127	; 0x7f
 8000ffc:	f887 3828 	strb.w	r3, [r7, #2088]	; 0x828
	BMS_IC[2][5] = 0xF9;
 8001000:	23f9      	movs	r3, #249	; 0xf9
 8001002:	f887 3829 	strb.w	r3, [r7, #2089]	; 0x829

	BMS_IC[3][0] = 0x69;
 8001006:	2369      	movs	r3, #105	; 0x69
 8001008:	f887 382a 	strb.w	r3, [r7, #2090]	; 0x82a
	BMS_IC[3][1] = 0x28;
 800100c:	2328      	movs	r3, #40	; 0x28
 800100e:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	BMS_IC[3][2] = 0x0F;
 8001012:	230f      	movs	r3, #15
 8001014:	f887 382c 	strb.w	r3, [r7, #2092]	; 0x82c
	BMS_IC[3][3] = 0xC9;
 8001018:	23c9      	movs	r3, #201	; 0xc9
 800101a:	f887 382d 	strb.w	r3, [r7, #2093]	; 0x82d
	BMS_IC[3][4] = 0x7F;
 800101e:	237f      	movs	r3, #127	; 0x7f
 8001020:	f887 382e 	strb.w	r3, [r7, #2094]	; 0x82e
	BMS_IC[3][5] = 0xF9;
 8001024:	23f9      	movs	r3, #249	; 0xf9
 8001026:	f887 382f 	strb.w	r3, [r7, #2095]	; 0x82f

	BMS_IC[4][0] = 0x69;
 800102a:	2369      	movs	r3, #105	; 0x69
 800102c:	f887 3830 	strb.w	r3, [r7, #2096]	; 0x830
	BMS_IC[4][1] = 0x28;
 8001030:	2328      	movs	r3, #40	; 0x28
 8001032:	f887 3831 	strb.w	r3, [r7, #2097]	; 0x831
	BMS_IC[4][2] = 0x0F;
 8001036:	230f      	movs	r3, #15
 8001038:	f887 3832 	strb.w	r3, [r7, #2098]	; 0x832
	BMS_IC[4][3] = 0xB9;
 800103c:	23b9      	movs	r3, #185	; 0xb9
 800103e:	f887 3833 	strb.w	r3, [r7, #2099]	; 0x833
	BMS_IC[4][4] = 0x7F;
 8001042:	237f      	movs	r3, #127	; 0x7f
 8001044:	f887 3834 	strb.w	r3, [r7, #2100]	; 0x834
	BMS_IC[4][5] = 0xF9;
 8001048:	23f9      	movs	r3, #249	; 0xf9
 800104a:	f887 3835 	strb.w	r3, [r7, #2101]	; 0x835

	BMS_IC[5][0] = 0x69;
 800104e:	2369      	movs	r3, #105	; 0x69
 8001050:	f887 3836 	strb.w	r3, [r7, #2102]	; 0x836
	BMS_IC[5][1] = 0x28;
 8001054:	2328      	movs	r3, #40	; 0x28
 8001056:	f887 3837 	strb.w	r3, [r7, #2103]	; 0x837
	BMS_IC[5][2] = 0x0F;
 800105a:	230f      	movs	r3, #15
 800105c:	f887 3838 	strb.w	r3, [r7, #2104]	; 0x838
	BMS_IC[5][3] = 0xA9;
 8001060:	23a9      	movs	r3, #169	; 0xa9
 8001062:	f887 3839 	strb.w	r3, [r7, #2105]	; 0x839
	BMS_IC[5][4] = 0x7F;
 8001066:	237f      	movs	r3, #127	; 0x7f
 8001068:	f887 383a 	strb.w	r3, [r7, #2106]	; 0x83a
	BMS_IC[5][5] = 0xF9;
 800106c:	23f9      	movs	r3, #249	; 0xf9
 800106e:	f887 383b 	strb.w	r3, [r7, #2107]	; 0x83b

	BMS_IC[6][0] = 0x69;
 8001072:	2369      	movs	r3, #105	; 0x69
 8001074:	f887 383c 	strb.w	r3, [r7, #2108]	; 0x83c
	BMS_IC[6][1] = 0x28;
 8001078:	2328      	movs	r3, #40	; 0x28
 800107a:	f887 383d 	strb.w	r3, [r7, #2109]	; 0x83d
	BMS_IC[6][2] = 0x0F;
 800107e:	230f      	movs	r3, #15
 8001080:	f887 383e 	strb.w	r3, [r7, #2110]	; 0x83e
	BMS_IC[6][3] = 0x99;
 8001084:	2399      	movs	r3, #153	; 0x99
 8001086:	f887 383f 	strb.w	r3, [r7, #2111]	; 0x83f
	BMS_IC[6][4] = 0x7F;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	f887 3840 	strb.w	r3, [r7, #2112]	; 0x840
	BMS_IC[6][5] = 0xF9;
 8001090:	23f9      	movs	r3, #249	; 0xf9
 8001092:	f887 3841 	strb.w	r3, [r7, #2113]	; 0x841

	BMS_IC[7][0] = 0x69;
 8001096:	2369      	movs	r3, #105	; 0x69
 8001098:	f887 3842 	strb.w	r3, [r7, #2114]	; 0x842
	BMS_IC[7][1] = 0x28;
 800109c:	2328      	movs	r3, #40	; 0x28
 800109e:	f887 3843 	strb.w	r3, [r7, #2115]	; 0x843
	BMS_IC[7][2] = 0x0F;
 80010a2:	230f      	movs	r3, #15
 80010a4:	f887 3844 	strb.w	r3, [r7, #2116]	; 0x844
	BMS_IC[7][3] = 0x89;
 80010a8:	2389      	movs	r3, #137	; 0x89
 80010aa:	f887 3845 	strb.w	r3, [r7, #2117]	; 0x845
	BMS_IC[7][4] = 0x7F;
 80010ae:	237f      	movs	r3, #127	; 0x7f
 80010b0:	f887 3846 	strb.w	r3, [r7, #2118]	; 0x846
	BMS_IC[7][5] = 0xF9;
 80010b4:	23f9      	movs	r3, #249	; 0xf9
 80010b6:	f887 3847 	strb.w	r3, [r7, #2119]	; 0x847

	BMS_IC[8][0] = 0x69;
 80010ba:	2369      	movs	r3, #105	; 0x69
 80010bc:	f887 3848 	strb.w	r3, [r7, #2120]	; 0x848
	BMS_IC[8][1] = 0x08;
 80010c0:	2308      	movs	r3, #8
 80010c2:	f887 3849 	strb.w	r3, [r7, #2121]	; 0x849
	BMS_IC[8][2] = 0x0F;
 80010c6:	230f      	movs	r3, #15
 80010c8:	f887 384a 	strb.w	r3, [r7, #2122]	; 0x84a
	BMS_IC[8][3] = 0xF9;
 80010cc:	23f9      	movs	r3, #249	; 0xf9
 80010ce:	f887 384b 	strb.w	r3, [r7, #2123]	; 0x84b
	BMS_IC[8][4] = 0x7F;
 80010d2:	237f      	movs	r3, #127	; 0x7f
 80010d4:	f887 384c 	strb.w	r3, [r7, #2124]	; 0x84c
	BMS_IC[8][5] = 0xF9;
 80010d8:	23f9      	movs	r3, #249	; 0xf9
 80010da:	f887 384d 	strb.w	r3, [r7, #2125]	; 0x84d

	BMS_IC[9][0] = 0x69;
 80010de:	2369      	movs	r3, #105	; 0x69
 80010e0:	f887 384e 	strb.w	r3, [r7, #2126]	; 0x84e
	BMS_IC[9][1] = 0x08;
 80010e4:	2308      	movs	r3, #8
 80010e6:	f887 384f 	strb.w	r3, [r7, #2127]	; 0x84f
	BMS_IC[9][2] = 0x0F;
 80010ea:	230f      	movs	r3, #15
 80010ec:	f887 3850 	strb.w	r3, [r7, #2128]	; 0x850
	BMS_IC[9][3] = 0xE9;
 80010f0:	23e9      	movs	r3, #233	; 0xe9
 80010f2:	f887 3851 	strb.w	r3, [r7, #2129]	; 0x851
	BMS_IC[9][4] = 0x7F;
 80010f6:	237f      	movs	r3, #127	; 0x7f
 80010f8:	f887 3852 	strb.w	r3, [r7, #2130]	; 0x852
	BMS_IC[9][5] = 0xF9;
 80010fc:	23f9      	movs	r3, #249	; 0xf9
 80010fe:	f887 3853 	strb.w	r3, [r7, #2131]	; 0x853

	BMS_IC[10][0] = 0x69;
 8001102:	2369      	movs	r3, #105	; 0x69
 8001104:	f887 3854 	strb.w	r3, [r7, #2132]	; 0x854
	BMS_IC[10][1] = 0x08;
 8001108:	2308      	movs	r3, #8
 800110a:	f887 3855 	strb.w	r3, [r7, #2133]	; 0x855
	BMS_IC[10][2] = 0x0F;
 800110e:	230f      	movs	r3, #15
 8001110:	f887 3856 	strb.w	r3, [r7, #2134]	; 0x856
	BMS_IC[10][3] = 0xD9;
 8001114:	23d9      	movs	r3, #217	; 0xd9
 8001116:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
	BMS_IC[10][4] = 0x7F;
 800111a:	237f      	movs	r3, #127	; 0x7f
 800111c:	f887 3858 	strb.w	r3, [r7, #2136]	; 0x858
	BMS_IC[10][5] = 0xF9;
 8001120:	23f9      	movs	r3, #249	; 0xf9
 8001122:	f887 3859 	strb.w	r3, [r7, #2137]	; 0x859

	BMS_IC[11][0] = 0x69;
 8001126:	2369      	movs	r3, #105	; 0x69
 8001128:	f887 385a 	strb.w	r3, [r7, #2138]	; 0x85a
	BMS_IC[11][1] = 0x08;
 800112c:	2308      	movs	r3, #8
 800112e:	f887 385b 	strb.w	r3, [r7, #2139]	; 0x85b
	BMS_IC[11][2] = 0x0F;
 8001132:	230f      	movs	r3, #15
 8001134:	f887 385c 	strb.w	r3, [r7, #2140]	; 0x85c
	BMS_IC[11][3] = 0xC9;
 8001138:	23c9      	movs	r3, #201	; 0xc9
 800113a:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
	BMS_IC[11][4] = 0x7F;
 800113e:	237f      	movs	r3, #127	; 0x7f
 8001140:	f887 385e 	strb.w	r3, [r7, #2142]	; 0x85e
	BMS_IC[11][5] = 0xF9;
 8001144:	23f9      	movs	r3, #249	; 0xf9
 8001146:	f887 385f 	strb.w	r3, [r7, #2143]	; 0x85f
	uint8_t tempindex = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 389f 	strb.w	r3, [r7, #2207]	; 0x89f
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001150:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8001154:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f9d2 	bl	8001502 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800115e:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fa03 	bl	800156e <TimerPacket_FixedPulse>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 808e 	beq.w	800128c <main+0x38c>
//			int packvoltage = 0;

			//starting for printing over serial
//			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8001170:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8001174:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f007 fce1 	bl	8008b4c <memset>
			char char_to_str[2];
			char_to_str[0] = '\n';
 800118a:	230a      	movs	r3, #10
 800118c:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
			char_to_str[1] = '\0';
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
//			LTC_ReadRawCellVoltages((uint16_t*) read_volt);
//			packvoltage = LTC_CalcPackVoltage((uint16_t*) read_volt);
			//stop reading voltages

			//start sending to mux to read temperatures
			LTC_Wakeup_Sleep();
 8001196:	f7ff fa1f 	bl	80005d8 <LTC_Wakeup_Sleep>
			ltc6811_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 800119a:	f897 289f 	ldrb.w	r2, [r7, #2207]	; 0x89f
 800119e:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	4619      	mov	r1, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fa30 	bl	8000614 <ltc6811_wrcomm>
			LTC_Wakeup_Idle();
 80011b4:	f7ff f9f0 	bl	8000598 <LTC_Wakeup_Idle>
			ltc6811_stcomm();
 80011b8:	f7ff faa8 	bl	800070c <ltc6811_stcomm>
			//end sending to mux to read temperatures

			HAL_Delay(1000);
 80011bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c0:	f000 fc0c 	bl	80019dc <HAL_Delay>
//			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
//			strncat(out_buf, packV, 30);
//			strncat(out_buf, char_to_str, 2);
			//end for printing over serial for pack voltage

			LTC_Wakeup_Idle();
 80011c4:	f7ff f9e8 	bl	8000598 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, 0); //doing GPIO all conversion
 80011c8:	2302      	movs	r3, #2
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fba1 	bl	8000914 <LTC_ADAX>
			LTC_PollAdc();
 80011d2:	f7ff fbdf 	bl	8000994 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t*) read_auxreg); // Set to read back all aux registers
 80011d6:	f8d7 088c 	ldr.w	r0, [r7, #2188]	; 0x88c
 80011da:	f7ff facf 	bl	800077c <LTC_ReadRawCellTemps>

			//memcpy(&read_temp[tempindex], data_ptr, 1);
			read_temp[tempindex] = (uint16_t) read_auxreg[0];
 80011de:	f897 389f 	ldrb.w	r3, [r7, #2207]	; 0x89f
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	f8d7 2890 	ldr.w	r2, [r7, #2192]	; 0x890
 80011e8:	4413      	add	r3, r2
 80011ea:	f8d7 288c 	ldr.w	r2, [r7, #2188]	; 0x88c
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	801a      	strh	r2, [r3, #0]

			for (uint8_t i = 0; i < 12; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 389e 	strb.w	r3, [r7, #2206]	; 0x89e
 80011f8:	e022      	b.n	8001240 <main+0x340>
				sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 80011fa:	f897 389e 	ldrb.w	r3, [r7, #2206]	; 0x89e
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	f897 389e 	ldrb.w	r3, [r7, #2206]	; 0x89e
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	f8d7 2890 	ldr.w	r2, [r7, #2192]	; 0x890
 800120a:	4413      	add	r3, r2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	f607 0004 	addw	r0, r7, #2052	; 0x804
 8001212:	460a      	mov	r2, r1
 8001214:	4929      	ldr	r1, [pc, #164]	; (80012bc <main+0x3bc>)
 8001216:	f007 fc79 	bl	8008b0c <siprintf>
				strncat(out_buf, buf, 20);
 800121a:	f607 0104 	addw	r1, r7, #2052	; 0x804
 800121e:	463b      	mov	r3, r7
 8001220:	2214      	movs	r2, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fc9a 	bl	8008b5c <strncat>
				strncat(out_buf, char_to_str, 2);
 8001228:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 800122c:	463b      	mov	r3, r7
 800122e:	2202      	movs	r2, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f007 fc93 	bl	8008b5c <strncat>
			for (uint8_t i = 0; i < 12; i++) {
 8001236:	f897 389e 	ldrb.w	r3, [r7, #2206]	; 0x89e
 800123a:	3301      	adds	r3, #1
 800123c:	f887 389e 	strb.w	r3, [r7, #2206]	; 0x89e
 8001240:	f897 389e 	ldrb.w	r3, [r7, #2206]	; 0x89e
 8001244:	2b0b      	cmp	r3, #11
 8001246:	d9d8      	bls.n	80011fa <main+0x2fa>
			}
			strncat(out_buf, char_to_str, 2);
 8001248:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 800124c:	463b      	mov	r3, r7
 800124e:	2202      	movs	r2, #2
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fc83 	bl	8008b5c <strncat>
			HAL_Delay(400);
 8001256:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800125a:	f000 fbbf 	bl	80019dc <HAL_Delay>
			USB_Transmit(out_buf, strlen(out_buf));
 800125e:	463b      	mov	r3, r7
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffdf 	bl	8000224 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	463b      	mov	r3, r7
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fe99 	bl	8007fa6 <USB_Transmit>
			//end for printing over serial for voltages

			tempindex++; //incrementing the index
 8001274:	f897 389f 	ldrb.w	r3, [r7, #2207]	; 0x89f
 8001278:	3301      	adds	r3, #1
 800127a:	f887 389f 	strb.w	r3, [r7, #2207]	; 0x89f
						 //start for printing over serial for voltages
			if (tempindex == 12) {
 800127e:	f897 389f 	ldrb.w	r3, [r7, #2207]	; 0x89f
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d102      	bne.n	800128c <main+0x38c>
				tempindex = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 389f 	strb.w	r3, [r7, #2207]	; 0x89f
			}
		}

		if (TimerPacket_FixedPulse(&timerpacket_can1)) {
 800128c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f96c 	bl	800156e <TimerPacket_FixedPulse>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	f43f af59 	beq.w	8001150 <main+0x250>

			uint16_t CAN_ID = 0x630;
 800129e:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80012a2:	f8a7 389c 	strh.w	r3, [r7, #2204]	; 0x89c
			setCANId(CAN_ID);
 80012a6:	f8b7 389c 	ldrh.w	r3, [r7, #2204]	; 0x89c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fda2 	bl	8000df4 <setCANId>
			for (int i = 0; i < NUM_CELLS; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3898 	str.w	r3, [r7, #2200]	; 0x898
 80012b6:	e092      	b.n	80013de <main+0x4de>
 80012b8:	40011000 	.word	0x40011000
 80012bc:	08009358 	.word	0x08009358
				if (i % 4 == 0) {
 80012c0:	f8d7 3898 	ldr.w	r3, [r7, #2200]	; 0x898
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d16e      	bne.n	80013aa <main+0x4aa>
					uint8_t temp_volt = i;
 80012cc:	f8d7 3898 	ldr.w	r3, [r7, #2200]	; 0x898
 80012d0:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
					msg.data[0] = read_volt[temp_volt];
 80012d4:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 80012de:	4413      	add	r3, r2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <main+0x4ec>)
 80012e6:	771a      	strb	r2, [r3, #28]
					msg.data[1] = read_volt[temp_volt] >> 8;
 80012e8:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 80012f2:	4413      	add	r3, r2
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <main+0x4ec>)
 80012fe:	775a      	strb	r2, [r3, #29]
					temp_volt += 1;
 8001300:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8001304:	3301      	adds	r3, #1
 8001306:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
					msg.data[2] = read_volt[temp_volt];
 800130a:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 8001314:	4413      	add	r3, r2
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <main+0x4ec>)
 800131c:	779a      	strb	r2, [r3, #30]
					msg.data[3] = read_volt[temp_volt] >> 8;
 800131e:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 8001328:	4413      	add	r3, r2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <main+0x4ec>)
 8001334:	77da      	strb	r2, [r3, #31]
					temp_volt += 1;
 8001336:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 800133a:	3301      	adds	r3, #1
 800133c:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
					msg.data[4] = read_volt[temp_volt];
 8001340:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <main+0x4ec>)
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
					msg.data[5] = read_volt[temp_volt] >> 8;
 8001356:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 8001360:	4413      	add	r3, r2
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <main+0x4ec>)
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					temp_volt += 1;
 8001370:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8001374:	3301      	adds	r3, #1
 8001376:	f887 388b 	strb.w	r3, [r7, #2187]	; 0x88b
					msg.data[6] = read_volt[temp_volt];
 800137a:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 8001384:	4413      	add	r3, r2
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <main+0x4ec>)
 800138c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					msg.data[7] = read_volt[temp_volt] >> 8;
 8001390:	f897 388b 	ldrb.w	r3, [r7, #2187]	; 0x88b
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f8d7 2894 	ldr.w	r2, [r7, #2196]	; 0x894
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <main+0x4ec>)
 80013a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				}
				if (i % 4 == 0) {
 80013aa:	f8d7 3898 	ldr.w	r3, [r7, #2200]	; 0x898
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <main+0x4ca>
					CAN_ID = CAN_ID + 0x01;
 80013b6:	f8b7 389c 	ldrh.w	r3, [r7, #2204]	; 0x89c
 80013ba:	3301      	adds	r3, #1
 80013bc:	f8a7 389c 	strh.w	r3, [r7, #2204]	; 0x89c
					setCANId(CAN_ID);
 80013c0:	f8b7 389c 	ldrh.w	r3, [r7, #2204]	; 0x89c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd15 	bl	8000df4 <setCANId>
				}
				HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f000 fb06 	bl	80019dc <HAL_Delay>
				CAN1_Send();
 80013d0:	f7ff fce6 	bl	8000da0 <CAN1_Send>
			for (int i = 0; i < NUM_CELLS; i++) {
 80013d4:	f8d7 3898 	ldr.w	r3, [r7, #2200]	; 0x898
 80013d8:	3301      	adds	r3, #1
 80013da:	f8c7 3898 	str.w	r3, [r7, #2200]	; 0x898
 80013de:	f8d7 3898 	ldr.w	r3, [r7, #2200]	; 0x898
 80013e2:	2b0b      	cmp	r3, #11
 80013e4:	f77f af6c 	ble.w	80012c0 <main+0x3c0>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80013e8:	e6b2      	b.n	8001150 <main+0x250>
 80013ea:	bf00      	nop
 80013ec:	2000024c 	.word	0x2000024c

080013f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	; 0x70
 80013f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013fa:	2238      	movs	r2, #56	; 0x38
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fba4 	bl	8008b4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2220      	movs	r2, #32
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fb96 	bl	8008b4c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800142a:	2304      	movs	r3, #4
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001438:	2302      	movs	r3, #2
 800143a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001442:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001446:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800144c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001450:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001452:	2340      	movs	r3, #64	; 0x40
 8001454:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001456:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fb1a 	bl	8003a94 <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x7a>
		Error_Handler();
 8001466:	f000 f89f 	bl	80015a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800146a:	230f      	movs	r3, #15
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2102      	movs	r1, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fe1a 	bl	80040c0 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xa6>
		Error_Handler();
 8001492:	f000 f889 	bl	80015a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8001496:	2312      	movs	r3, #18
 8001498:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800149a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 ffd8 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xc6>
		Error_Handler();
 80014b2:	f000 f879 	bl	80015a8 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80014b6:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <SystemClock_Config+0xd4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	3770      	adds	r7, #112	; 0x70
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	42420070 	.word	0x42420070

080014c8 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f001 f977 	bl	80027d0 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800150e:	f000 fa5b 	bl	80019c8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	1ad2      	subs	r2, r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	429a      	cmp	r2, r3
 8001526:	d90b      	bls.n	8001540 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f001 f964 	bl	8002800 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
	}
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	609a      	str	r2, [r3, #8]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001576:	f000 fa27 	bl	80019c8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	d905      	bls.n	800159e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <MX_SPI1_Init+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e8:	2228      	movs	r2, #40	; 0x28
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x64>)
 8001600:	220a      	movs	r2, #10
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_SPI1_Init+0x64>)
 8001606:	f003 f85b 	bl	80046c0 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f7ff ffca 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000298 	.word	0x20000298
 800161c:	40013000 	.word	0x40013000

08001620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d12f      	bne.n	80016a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 8001646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <HAL_SPI_MspInit+0x90>)
 8001684:	f000 ff20 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_SPI_MspInit+0x90>)
 800169c:	f000 ff14 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013000 	.word	0x40013000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800

080016b4 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <LTC_nCS_High+0x14>)
 80016be:	f001 f887 	bl	80027d0 <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010800 	.word	0x40010800

080016cc <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <LTC_nCS_Low+0x14>)
 80016d6:	f001 f87b 	bl	80027d0 <HAL_GPIO_WritePin>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40010800 	.word	0x40010800

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f909 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <OTG_FS_IRQHandler+0x10>)
 800179e:	f001 f987 	bl	8002ab0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001008 	.word	0x20001008

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f007 f9e2 	bl	8008ba4 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20010000 	.word	0x20010000
 800180c:	00000400 	.word	0x00000400
 8001810:	200002f0 	.word	0x200002f0
 8001814:	20001878 	.word	0x20001878

08001818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_TIM7_Init+0x64>)
 8001834:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_TIM7_Init+0x68>)
 8001836:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_TIM7_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_TIM7_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_TIM7_Init+0x64>)
 8001846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_TIM7_Init+0x64>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_TIM7_Init+0x64>)
 8001854:	f003 fcbc 	bl	80051d0 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800185e:	f7ff fea3 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <MX_TIM7_Init+0x64>)
 8001870:	f003 fd6a 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800187a:	f7ff fe95 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002f4 	.word	0x200002f4
 800188c:	40001400 	.word	0x40001400

08001890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x34>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10b      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_TIM_Base_MspInit+0x38>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_TIM_Base_MspInit+0x38>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_TIM_Base_MspInit+0x38>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40001400 	.word	0x40001400
 80018c8:	40021000 	.word	0x40021000

080018cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018cc:	f7ff ffa4 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018d2:	490c      	ldr	r1, [pc, #48]	; (8001904 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018e8:	4c09      	ldr	r4, [pc, #36]	; (8001910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018f6:	f007 f95b 	bl	8008bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fa:	f7ff fb01 	bl	8000f00 <main>
  bx lr
 80018fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001908:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 800190c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001910:	20001874 	.word	0x20001874

08001914 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fd8b 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fed6 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fda3 	bl	80024ae <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 fd6b 	bl	800245a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000008 	.word	0x20000008
 80019c4:	2000033c 	.word	0x2000033c

080019c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_GetTick+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	2000033c 	.word	0x2000033c

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffe0 	bl	80019c8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0be      	b.n	8001bc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff f88a 	bl	8000b7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f9ab 	bl	8001dc4 <ADC_ConversionStop_Disable>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8099 	bne.w	8001bb2 <HAL_ADC_Init+0x18e>
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8095 	bne.w	8001bb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a90:	f023 0302 	bic.w	r3, r3, #2
 8001a94:	f043 0202 	orr.w	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7b1b      	ldrb	r3, [r3, #12]
 8001aaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d003      	beq.n	8001ac6 <HAL_ADC_Init+0xa2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_ADC_Init+0xa8>
 8001ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aca:	e000      	b.n	8001ace <HAL_ADC_Init+0xaa>
 8001acc:	2300      	movs	r3, #0
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7d1b      	ldrb	r3, [r3, #20]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d119      	bne.n	8001b10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	035a      	lsls	r2, r3, #13
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_ADC_Init+0x1a8>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_Init+0x126>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d104      	bne.n	8001b54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	051b      	lsls	r3, r3, #20
 8001b52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_ADC_Init+0x1ac>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10b      	bne.n	8001b90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8e:	e018      	b.n	8001bc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f023 0312 	bic.w	r3, r3, #18
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb0:	e007      	b.n	8001bc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001bd0:	ff1f0efe 	.word	0xff1f0efe

08001bd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e0dc      	b.n	8001dae <HAL_ADC_ConfigChannel+0x1da>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d81c      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b05      	subs	r3, #5
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4019      	ands	r1, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3c:	e03c      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d81c      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b23      	subs	r3, #35	; 0x23
 8001c58:	221f      	movs	r2, #31
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4019      	ands	r1, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b23      	subs	r3, #35	; 0x23
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7e:	e01b      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b41      	subs	r3, #65	; 0x41
 8001c92:	221f      	movs	r2, #31
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b41      	subs	r3, #65	; 0x41
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d91c      	bls.n	8001cfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68d9      	ldr	r1, [r3, #12]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b1e      	subs	r3, #30
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6898      	ldr	r0, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	e019      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6919      	ldr	r1, [r3, #16]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4019      	ands	r1, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6898      	ldr	r0, [r3, #8]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d003      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d3a:	2b11      	cmp	r3, #17
 8001d3c:	d132      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d125      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d126      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d11a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9a      	lsrs	r2, r3, #18
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x1b2>
 8001d92:	e007      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40012400 	.word	0x40012400
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d12e      	bne.n	8001e3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dee:	f7ff fdeb 	bl	80019c8 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	e01b      	b.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001df6:	f7ff fde7 	bl	80019c8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d914      	bls.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10d      	bne.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e007      	b.n	8001e3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d0dc      	beq.n	8001df6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0ed      	b.n	8002034 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe ff25 	bl	8000cb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7a:	f7ff fda5 	bl	80019c8 <HAL_GetTick>
 8001e7e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e80:	e012      	b.n	8001ea8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e82:	f7ff fda1 	bl	80019c8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b0a      	cmp	r3, #10
 8001e8e:	d90b      	bls.n	8001ea8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0c5      	b.n	8002034 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0e5      	beq.n	8001e82 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0202 	bic.w	r2, r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec6:	f7ff fd7f 	bl	80019c8 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ecc:	e012      	b.n	8001ef4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ece:	f7ff fd7b 	bl	80019c8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b0a      	cmp	r3, #10
 8001eda:	d90b      	bls.n	8001ef4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2205      	movs	r2, #5
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e09f      	b.n	8002034 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1e5      	bne.n	8001ece <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e1b      	ldrb	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d108      	bne.n	8001f1c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e5b      	ldrb	r3, [r3, #25]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7e9b      	ldrb	r3, [r3, #26]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0220 	bic.w	r2, r2, #32
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7edb      	ldrb	r3, [r3, #27]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d108      	bne.n	8001f9a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0210 	bic.w	r2, r2, #16
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e007      	b.n	8001faa <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0210 	orr.w	r2, r2, #16
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7f1b      	ldrb	r3, [r3, #28]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0208 	orr.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e007      	b.n	8001fd4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0208 	bic.w	r2, r2, #8
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7f5b      	ldrb	r3, [r3, #29]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0204 	orr.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e007      	b.n	8001ffe <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0204 	bic.w	r2, r2, #4
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	ea42 0103 	orr.w	r1, r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d12e      	bne.n	80020ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002068:	f7ff fcae 	bl	80019c8 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800206e:	e012      	b.n	8002096 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002070:	f7ff fcaa 	bl	80019c8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d90b      	bls.n	8002096 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2205      	movs	r2, #5
 800208e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e012      	b.n	80020bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e5      	bne.n	8002070 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e006      	b.n	80020bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
  }
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d003      	beq.n	80020f0 <HAL_CAN_AddTxMessage+0x2c>
 80020e8:	7ffb      	ldrb	r3, [r7, #31]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	f040 80ad 	bne.w	800224a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10a      	bne.n	8002110 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8095 	beq.w	800223a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	0e1b      	lsrs	r3, r3, #24
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	6809      	ldr	r1, [r1, #0]
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3318      	adds	r3, #24
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e00f      	b.n	8002168 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002152:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800215c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3318      	adds	r3, #24
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	440b      	add	r3, r1
 8002166:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3318      	adds	r3, #24
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	440b      	add	r3, r1
 8002178:	3304      	adds	r3, #4
 800217a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	7d1b      	ldrb	r3, [r3, #20]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d111      	bne.n	80021a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3318      	adds	r3, #24
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6811      	ldr	r1, [r2, #0]
 8002198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3318      	adds	r3, #24
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	440b      	add	r3, r1
 80021a4:	3304      	adds	r3, #4
 80021a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3307      	adds	r3, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	061a      	lsls	r2, r3, #24
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3306      	adds	r3, #6
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3305      	adds	r3, #5
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	4313      	orrs	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	3204      	adds	r2, #4
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4610      	mov	r0, r2
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	6811      	ldr	r1, [r2, #0]
 80021d0:	ea43 0200 	orr.w	r2, r3, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	440b      	add	r3, r1
 80021da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3303      	adds	r3, #3
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	061a      	lsls	r2, r3, #24
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3302      	adds	r3, #2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3301      	adds	r3, #1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	4313      	orrs	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	4610      	mov	r0, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	6811      	ldr	r1, [r2, #0]
 8002206:	ea43 0200 	orr.w	r2, r3, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	440b      	add	r3, r1
 8002210:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002214:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3318      	adds	r3, #24
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6811      	ldr	r1, [r2, #0]
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3318      	adds	r3, #24
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e00e      	b.n	8002258 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e006      	b.n	8002258 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3724      	adds	r7, #36	; 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_CAN_ActivateNotification+0x1e>
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d109      	bne.n	8002294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6959      	ldr	r1, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e006      	b.n	80022a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <__NVIC_EnableIRQ+0x34>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff90 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff2d 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff42 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff90 	bl	800239c <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5f 	bl	8002348 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff35 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b08b      	sub	sp, #44	; 0x2c
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	e169      	b.n	80027b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024dc:	2201      	movs	r2, #1
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8158 	bne.w	80027aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a9a      	ldr	r2, [pc, #616]	; (8002768 <HAL_GPIO_Init+0x2a0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d05e      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002504:	4a98      	ldr	r2, [pc, #608]	; (8002768 <HAL_GPIO_Init+0x2a0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d875      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800250a:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_GPIO_Init+0x2a4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d058      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002510:	4a96      	ldr	r2, [pc, #600]	; (800276c <HAL_GPIO_Init+0x2a4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d86f      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002516:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_GPIO_Init+0x2a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d052      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 800251c:	4a94      	ldr	r2, [pc, #592]	; (8002770 <HAL_GPIO_Init+0x2a8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d869      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002522:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_GPIO_Init+0x2ac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d04c      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002528:	4a92      	ldr	r2, [pc, #584]	; (8002774 <HAL_GPIO_Init+0x2ac>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d863      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800252e:	4a92      	ldr	r2, [pc, #584]	; (8002778 <HAL_GPIO_Init+0x2b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d046      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002534:	4a90      	ldr	r2, [pc, #576]	; (8002778 <HAL_GPIO_Init+0x2b0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d85d      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800253a:	2b12      	cmp	r3, #18
 800253c:	d82a      	bhi.n	8002594 <HAL_GPIO_Init+0xcc>
 800253e:	2b12      	cmp	r3, #18
 8002540:	d859      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <HAL_GPIO_Init+0x80>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	080025c3 	.word	0x080025c3
 800254c:	0800259d 	.word	0x0800259d
 8002550:	080025af 	.word	0x080025af
 8002554:	080025f1 	.word	0x080025f1
 8002558:	080025f7 	.word	0x080025f7
 800255c:	080025f7 	.word	0x080025f7
 8002560:	080025f7 	.word	0x080025f7
 8002564:	080025f7 	.word	0x080025f7
 8002568:	080025f7 	.word	0x080025f7
 800256c:	080025f7 	.word	0x080025f7
 8002570:	080025f7 	.word	0x080025f7
 8002574:	080025f7 	.word	0x080025f7
 8002578:	080025f7 	.word	0x080025f7
 800257c:	080025f7 	.word	0x080025f7
 8002580:	080025f7 	.word	0x080025f7
 8002584:	080025f7 	.word	0x080025f7
 8002588:	080025f7 	.word	0x080025f7
 800258c:	080025a5 	.word	0x080025a5
 8002590:	080025b9 	.word	0x080025b9
 8002594:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_GPIO_Init+0x2b4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259a:	e02c      	b.n	80025f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	623b      	str	r3, [r7, #32]
          break;
 80025a2:	e029      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	623b      	str	r3, [r7, #32]
          break;
 80025ac:	e024      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	3308      	adds	r3, #8
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e01f      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	330c      	adds	r3, #12
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e01a      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ca:	2304      	movs	r3, #4
 80025cc:	623b      	str	r3, [r7, #32]
          break;
 80025ce:	e013      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d8:	2308      	movs	r3, #8
 80025da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	611a      	str	r2, [r3, #16]
          break;
 80025e2:	e009      	b.n	80025f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e4:	2308      	movs	r3, #8
 80025e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	615a      	str	r2, [r3, #20]
          break;
 80025ee:	e003      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          break;
 80025f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d801      	bhi.n	8002602 <HAL_GPIO_Init+0x13a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_Init+0x13e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d802      	bhi.n	8002614 <HAL_GPIO_Init+0x14c>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x152>
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	3b08      	subs	r3, #8
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	210f      	movs	r1, #15
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	6a39      	ldr	r1, [r7, #32]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80b1 	beq.w	80027aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002660:	4a48      	ldr	r2, [pc, #288]	; (8002784 <HAL_GPIO_Init+0x2bc>)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a40      	ldr	r2, [pc, #256]	; (8002788 <HAL_GPIO_Init+0x2c0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_GPIO_Init+0x1ec>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3f      	ldr	r2, [pc, #252]	; (800278c <HAL_GPIO_Init+0x2c4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00d      	beq.n	80026b0 <HAL_GPIO_Init+0x1e8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <HAL_GPIO_Init+0x2c8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <HAL_GPIO_Init+0x1e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3d      	ldr	r2, [pc, #244]	; (8002794 <HAL_GPIO_Init+0x2cc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_GPIO_Init+0x1e0>
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026b4:	2300      	movs	r3, #0
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026c6:	492f      	ldr	r1, [pc, #188]	; (8002784 <HAL_GPIO_Init+0x2bc>)
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4928      	ldr	r1, [pc, #160]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4922      	ldr	r1, [pc, #136]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	491e      	ldr	r1, [pc, #120]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4918      	ldr	r1, [pc, #96]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	43db      	mvns	r3, r3
 8002746:	4914      	ldr	r1, [pc, #80]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002748:	4013      	ands	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d021      	beq.n	800279c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e021      	b.n	80027aa <HAL_GPIO_Init+0x2e2>
 8002766:	bf00      	nop
 8002768:	10320000 	.word	0x10320000
 800276c:	10310000 	.word	0x10310000
 8002770:	10220000 	.word	0x10220000
 8002774:	10210000 	.word	0x10210000
 8002778:	10120000 	.word	0x10120000
 800277c:	10110000 	.word	0x10110000
 8002780:	40021000 	.word	0x40021000
 8002784:	40010000 	.word	0x40010000
 8002788:	40010800 	.word	0x40010800
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40011000 	.word	0x40011000
 8002794:	40011400 	.word	0x40011400
 8002798:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_GPIO_Init+0x304>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4909      	ldr	r1, [pc, #36]	; (80027cc <HAL_GPIO_Init+0x304>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f47f ae8e 	bne.w	80024dc <HAL_GPIO_Init+0x14>
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	372c      	adds	r7, #44	; 0x2c
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40010400 	.word	0x40010400

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43d9      	mvns	r1, r3
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	400b      	ands	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002834:	b08f      	sub	sp, #60	; 0x3c
 8002836:	af0a      	add	r7, sp, #40	; 0x28
 8002838:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e10f      	b.n	8002a64 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 fda2 	bl	80083a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fe94 	bl	80055b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	687e      	ldr	r6, [r7, #4]
 8002890:	466d      	mov	r5, sp
 8002892:	f106 0410 	add.w	r4, r6, #16
 8002896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028a6:	1d33      	adds	r3, r6, #4
 80028a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f002 fdb2 	bl	8005414 <USB_CoreInit>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0d0      	b.n	8002a64 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 fe81 	bl	80055d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e04a      	b.n	800296a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333c      	adds	r3, #60	; 0x3c
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	b298      	uxth	r0, r3
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3356      	adds	r3, #86	; 0x56
 8002910:	4602      	mov	r2, r0
 8002912:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3340      	adds	r3, #64	; 0x40
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	3344      	adds	r3, #68	; 0x44
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3348      	adds	r3, #72	; 0x48
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334c      	adds	r3, #76	; 0x4c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	3301      	adds	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d3af      	bcc.n	80028d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e044      	b.n	8002a04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	3301      	adds	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d3b5      	bcc.n	800297a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	687e      	ldr	r6, [r7, #4]
 8002a16:	466d      	mov	r5, sp
 8002a18:	f106 0410 	add.w	r4, r6, #16
 8002a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a2c:	1d33      	adds	r3, r6, #4
 8002a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a30:	6838      	ldr	r0, [r7, #0]
 8002a32:	f002 fe19 	bl	8005668 <USB_DevInit>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00d      	b.n	8002a64 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fda3 	bl	80065a8 <USB_DevDisconnect>

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_PCD_Start+0x16>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e012      	b.n	8002aa8 <HAL_PCD_Start+0x3c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fd7e 	bl	8005590 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fd65 	bl	8006568 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b08d      	sub	sp, #52	; 0x34
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fe1c 	bl	8006704 <USB_GetMode>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 8443 	bne.w	800335a <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fd85 	bl	80065e8 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8439 	beq.w	8003358 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fd72 	bl	80065e8 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f002 0202 	and.w	r2, r2, #2
 8002b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fd60 	bl	80065e8 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d161      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0210 	bic.w	r2, r2, #16
 8002b40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	0c5b      	lsrs	r3, r3, #17
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d124      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d035      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6a38      	ldr	r0, [r7, #32]
 8002b8e:	f003 fb9d 	bl	80062cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9e:	441a      	add	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb0:	441a      	add	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]
 8002bb6:	e016      	b.n	8002be6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	0c5b      	lsrs	r3, r3, #17
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d110      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6a38      	ldr	r0, [r7, #32]
 8002bd0:	f003 fb7c 	bl	80062cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be0:	441a      	add	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0210 	orr.w	r2, r2, #16
 8002bf4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fcf4 	bl	80065e8 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c0a:	f040 80a7 	bne.w	8002d5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fcf8 	bl	800660c <USB_ReadDevAllOutEpInterrupt>
 8002c1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c1e:	e099      	b.n	8002d54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 808e 	beq.w	8002d48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fd1a 	bl	8006670 <USB_ReadDevOutEPInterrupt>
 8002c3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fe41 	bl	80038e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fe7d 	bl	8003980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d030      	beq.n	8002d0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d109      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d108      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f005 fc44 	bl	8008584 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f af62 	bne.w	8002c20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fc41 	bl	80065e8 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d70:	f040 80a4 	bne.w	8002ebc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fc60 	bl	800663e <USB_ReadDevAllInEpInterrupt>
 8002d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d84:	e096      	b.n	8002eb4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 808b 	beq.w	8002ea8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fc84 	bl	80066aa <USB_ReadDevInEPInterrupt>
 8002da2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d020      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2201      	movs	r2, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69f9      	ldr	r1, [r7, #28]
 8002dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dce:	4013      	ands	r3, r2
 8002dd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f005 fb4f 	bl	800848e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2308      	movs	r3, #8
 8002e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e22:	461a      	mov	r2, r3
 8002e24:	2310      	movs	r3, #16
 8002e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2340      	movs	r3, #64	; 0x40
 8002e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d023      	beq.n	8002e96 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	6a38      	ldr	r0, [r7, #32]
 8002e52:	f002 fd2b 	bl	80058ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	78db      	ldrb	r3, [r3, #3]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fb92 	bl	80085a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e90:	461a      	mov	r2, r3
 8002e92:	2302      	movs	r3, #2
 8002e94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fc96 	bl	80037d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	3301      	adds	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f af65 	bne.w	8002d86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fb91 	bl	80065e8 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed0:	d114      	bne.n	8002efc <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f005 fb3e 	bl	8008568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fb71 	bl	80065e8 <USB_ReadInterrupts>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f10:	d112      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f005 fafa 	bl	800851c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f36:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fb53 	bl	80065e8 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	f040 80b5 	bne.w	80030ba <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2110      	movs	r1, #16
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fc9e 	bl	80058ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f74:	e046      	b.n	8003004 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f82:	461a      	mov	r2, r3
 8002f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9a:	0151      	lsls	r1, r2, #5
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fce:	0151      	lsls	r1, r2, #5
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	440a      	add	r2, r1
 8002fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	0151      	lsls	r1, r2, #5
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	440a      	add	r2, r1
 8002ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ffc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	3301      	adds	r3, #1
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	429a      	cmp	r2, r3
 800300c:	d3b3      	bcc.n	8002f76 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003020:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303a:	f043 030b 	orr.w	r3, r3, #11
 800303e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003050:	f043 030b 	orr.w	r3, r3, #11
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	e015      	b.n	8003084 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800306a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800306e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307e:	f043 030b 	orr.w	r3, r3, #11
 8003082:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003092:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003096:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f003 fb5d 	bl	8006764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fa92 	bl	80065e8 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d124      	bne.n	800311a <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fb22 	bl	800671e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fc60 	bl	80059a4 <USB_GetDevSpeed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	f001 f98c 	bl	800440c <HAL_RCC_GetHCLKFreq>
 80030f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f002 f9aa 	bl	8005458 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f005 f9ea 	bl	80084de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003118:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fa62 	bl	80065e8 <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b08      	cmp	r3, #8
 800312c:	d10a      	bne.n	8003144 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f005 f9c7 	bl	80084c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f002 0208 	and.w	r2, r2, #8
 8003142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fa4d 	bl	80065e8 <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d122      	bne.n	800319e <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003164:	2301      	movs	r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	e014      	b.n	8003194 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 faf2 	bl	8003772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	429a      	cmp	r2, r3
 800319c:	d3e5      	bcc.n	800316a <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fa20 	bl	80065e8 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b2:	d13b      	bne.n	800322c <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b4:	2301      	movs	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	e02b      	b.n	8003212 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3340      	adds	r3, #64	; 0x40
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d115      	bne.n	800320c <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da12      	bge.n	800320c <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	333f      	adds	r3, #63	; 0x3f
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fab3 	bl	8003772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	429a      	cmp	r2, r3
 800321a:	d3ce      	bcc.n	80031ba <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800322a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 f9d9 	bl	80065e8 <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003240:	d155      	bne.n	80032ee <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003242:	2301      	movs	r3, #1
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	e045      	b.n	80032d4 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d12e      	bne.n	80032ce <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003270:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	da2b      	bge.n	80032ce <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003282:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003286:	429a      	cmp	r2, r3
 8003288:	d121      	bne.n	80032ce <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ca:	6053      	str	r3, [r2, #4]
            break;
 80032cc:	e007      	b.n	80032de <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	429a      	cmp	r2, r3
 80032dc:	d3b4      	bcc.n	8003248 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f978 	bl	80065e8 <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d10a      	bne.n	800331a <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f005 f961 	bl	80085cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 f962 	bl	80065e8 <USB_ReadInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d115      	bne.n	800335a <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f005 f951 	bl	80085e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	e000      	b.n	800335a <HAL_PCD_IRQHandler+0x8aa>
      return;
 8003358:	bf00      	nop
    }
  }
}
 800335a:	3734      	adds	r7, #52	; 0x34
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_PCD_SetAddress+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e013      	b.n	80033a2 <HAL_PCD_SetAddress+0x42>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 f8c3 	bl	800651e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	4608      	mov	r0, r1
 80033b4:	4611      	mov	r1, r2
 80033b6:	461a      	mov	r2, r3
 80033b8:	4603      	mov	r3, r0
 80033ba:	70fb      	strb	r3, [r7, #3]
 80033bc:	460b      	mov	r3, r1
 80033be:	803b      	strh	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da0f      	bge.n	80033f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3338      	adds	r3, #56	; 0x38
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
 80033ee:	e00f      	b.n	8003410 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800341c:	883a      	ldrh	r2, [r7, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	78ba      	ldrb	r2, [r7, #2]
 8003426:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800343a:	78bb      	ldrb	r3, [r7, #2]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d102      	bne.n	8003446 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_Open+0xaa>
 8003450:	2302      	movs	r3, #2
 8003452:	e00e      	b.n	8003472 <HAL_PCD_EP_Open+0xc8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fabc 	bl	80059e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003470:	7afb      	ldrb	r3, [r7, #11]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0f      	bge.n	80034ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00f      	b.n	80034ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_Close+0x6e>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e00e      	b.n	8003506 <HAL_PCD_EP_Close+0x8c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 faf8 	bl	8005aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	460b      	mov	r3, r1
 800351c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003550:	7afb      	ldrb	r3, [r7, #11]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	b2da      	uxtb	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6979      	ldr	r1, [r7, #20]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fb9e 	bl	8005ca4 <USB_EPStartXfer>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003594:	681b      	ldr	r3, [r3, #0]
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3338      	adds	r3, #56	; 0x38
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2201      	movs	r2, #1
 80035de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 fb56 	bl	8005ca4 <USB_EPStartXfer>

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d901      	bls.n	8003620 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04e      	b.n	80036be <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003624:	2b00      	cmp	r3, #0
 8003626:	da0f      	bge.n	8003648 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	3338      	adds	r3, #56	; 0x38
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	705a      	strb	r2, [r3, #1]
 8003646:	e00d      	b.n	8003664 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_PCD_EP_SetStall+0x82>
 8003680:	2302      	movs	r3, #2
 8003682:	e01c      	b.n	80036be <HAL_PCD_EP_SetStall+0xbc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68f9      	ldr	r1, [r7, #12]
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fe71 	bl	800637a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f003 f858 	bl	8006764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d901      	bls.n	80036e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e042      	b.n	800376a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da0f      	bge.n	800370c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 020f 	and.w	r2, r3, #15
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3338      	adds	r3, #56	; 0x38
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	705a      	strb	r2, [r3, #1]
 800370a:	e00f      	b.n	800372c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_EP_ClrStall+0x86>
 8003748:	2302      	movs	r3, #2
 800374a:	e00e      	b.n	800376a <HAL_PCD_EP_ClrStall+0xa4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fe7a 	bl	8006454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800377e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da0c      	bge.n	80037a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3338      	adds	r3, #56	; 0x38
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e00c      	b.n	80037ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	f003 020f 	and.w	r2, r3, #15
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 fca1 	bl	8006108 <USB_EPStopXfer>
 80037c6:	4603      	mov	r3, r0
 80037c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037ca:	7afb      	ldrb	r3, [r7, #11]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	3338      	adds	r3, #56	; 0x38
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d901      	bls.n	800380c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e067      	b.n	80038dc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	429a      	cmp	r2, r3
 8003820:	d902      	bls.n	8003828 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3303      	adds	r3, #3
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003830:	e026      	b.n	8003880 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	429a      	cmp	r2, r3
 8003846:	d902      	bls.n	800384e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3303      	adds	r3, #3
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	b29b      	uxth	r3, r3
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	f002 fcf9 	bl	800625a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d809      	bhi.n	80038aa <PCD_WriteEmptyTxFifo+0xd6>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800389e:	429a      	cmp	r2, r3
 80038a0:	d203      	bcs.n	80038aa <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1c3      	bne.n	8003832 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d811      	bhi.n	80038da <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	2201      	movs	r2, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	6939      	ldr	r1, [r7, #16]
 80038d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d6:	4013      	ands	r3, r2
 80038d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	333c      	adds	r3, #60	; 0x3c
 80038fc:	3304      	adds	r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <PCD_EP_OutXfrComplete_int+0x98>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d124      	bne.n	8003964 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003936:	6093      	str	r3, [r2, #8]
 8003938:	e01a      	b.n	8003970 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	2320      	movs	r3, #32
 8003954:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f004 fd7b 	bl	8008458 <HAL_PCD_DataOutStageCallback>
 8003962:	e005      	b.n	8003970 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f004 fd74 	bl	8008458 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	4f54310a 	.word	0x4f54310a

08003980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <PCD_EP_OutSetupPacket_int+0x64>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d90e      	bls.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f004 fd2d 	bl	8008434 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	4f54300a 	.word	0x4f54300a

080039e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
 80039f4:	4613      	mov	r3, r2
 80039f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a06:	883b      	ldrh	r3, [r7, #0]
 8003a08:	0419      	lsls	r1, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
 8003a14:	e028      	b.n	8003a68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4413      	add	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e00d      	b.n	8003a46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	3301      	adds	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3ec      	bcc.n	8003a2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a50:	883b      	ldrh	r3, [r7, #0]
 8003a52:	0418      	lsls	r0, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	4302      	orrs	r2, r0
 8003a60:	3340      	adds	r3, #64	; 0x40
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e304      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00c      	beq.n	8003ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d112      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ada:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d168      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e2de      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x76>
 8003afc:	4b80      	ldr	r3, [pc, #512]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7f      	ldr	r2, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e02e      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0xbc>
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b50:	4b6b      	ldr	r3, [pc, #428]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a67      	ldr	r2, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fd ff2a 	bl	80019c8 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fd ff26 	bl	80019c8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e292      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe4>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd ff16 	bl	80019c8 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fd ff12 	bl	80019c8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e27e      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x10c>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d063      	beq.n	8003c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d11c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x18c>
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x176>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e252      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4939      	ldr	r1, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	e03a      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fecb 	bl	80019c8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fd fec7 	bl	80019c8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e233      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4927      	ldr	r1, [pc, #156]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	e015      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd feaa 	bl	80019c8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fd fea6 	bl	80019c8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e212      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03a      	beq.n	8003d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fe8a 	bl	80019c8 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fd fe86 	bl	80019c8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f2      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f000 fba2 	bl	8004420 <RCC_Delay>
 8003cdc:	e01c      	b.n	8003d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fe70 	bl	80019c8 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cea:	e00f      	b.n	8003d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fd fe6c 	bl	80019c8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d908      	bls.n	8003d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1d8      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	42420000 	.word	0x42420000
 8003d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b9b      	ldr	r3, [pc, #620]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e9      	bne.n	8003cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a6 	beq.w	8003e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2a:	4b94      	ldr	r3, [pc, #592]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10d      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a90      	ldr	r2, [pc, #576]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]
 8003d42:	4b8e      	ldr	r3, [pc, #568]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b8b      	ldr	r3, [pc, #556]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a87      	ldr	r2, [pc, #540]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fe2d 	bl	80019c8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fd fe29 	bl	80019c8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e195      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x312>
 8003d98:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a77      	ldr	r2, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6213      	str	r3, [r2, #32]
 8003da4:	e02d      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x334>
 8003dae:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a6f      	ldr	r2, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x356>
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6213      	str	r3, [r2, #32]
 8003ddc:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003dea:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a60      	ldr	r2, [pc, #384]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd fddd 	bl	80019c8 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd fdd9 	bl	80019c8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e143      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b54      	ldr	r3, [pc, #336]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCC_OscConfig+0x37e>
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fdc7 	bl	80019c8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd fdc3 	bl	80019c8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e12d      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ee      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 808c 	beq.w	8003f94 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d10e      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d108      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e103      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d14e      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0ef      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCC_OscConfig+0x4f0>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fd77 	bl	80019c8 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ede:	f7fd fd73 	bl	80019c8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	; 0x64
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0df      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003efc:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	491c      	ldr	r1, [pc, #112]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4918      	ldr	r1, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003f20:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_RCC_OscConfig+0x4f0>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fd fd4f 	bl	80019c8 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f2e:	f7fd fd4b 	bl	80019c8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0b7      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x49a>
 8003f4c:	e022      	b.n	8003f94 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_RCC_OscConfig+0x4f0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd fd32 	bl	80019c8 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003f66:	e00f      	b.n	8003f88 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f68:	f7fd fd2e 	bl	80019c8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d908      	bls.n	8003f88 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e09a      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e9      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8088 	beq.w	80040ae <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9e:	4b46      	ldr	r3, [pc, #280]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d068      	beq.n	800407c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d14d      	bne.n	800404e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b42      	ldr	r3, [pc, #264]	; (80040bc <HAL_RCC_OscConfig+0x628>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fd06 	bl	80019c8 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd fd02 	bl	80019c8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e06e      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d10f      	bne.n	8004008 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003fe8:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4931      	ldr	r1, [pc, #196]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f023 020f 	bic.w	r2, r3, #15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	492d      	ldr	r1, [pc, #180]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8004004:	4313      	orrs	r3, r2
 8004006:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004008:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	430b      	orrs	r3, r1
 800401a:	4927      	ldr	r1, [pc, #156]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004020:	4b26      	ldr	r3, [pc, #152]	; (80040bc <HAL_RCC_OscConfig+0x628>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd fccf 	bl	80019c8 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd fccb 	bl	80019c8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e037      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x59a>
 800404c:	e02f      	b.n	80040ae <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x628>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd fcb8 	bl	80019c8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd fcb4 	bl	80019c8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e020      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x5c8>
 800407a:	e018      	b.n	80040ae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e013      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_OscConfig+0x624>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	429a      	cmp	r2, r3
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	42420060 	.word	0x42420060

080040c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0d0      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d910      	bls.n	8004104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	4965      	ldr	r1, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800413e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d040      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d115      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e073      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06b      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4936      	ldr	r1, [pc, #216]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd fc0a 	bl	80019c8 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd fc06 	bl	80019c8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e053      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d210      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 0207 	bic.w	r2, r3, #7
 80041f6:	4922      	ldr	r1, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	490a      	ldr	r1, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1cc>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1d0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd fb68 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40022000 	.word	0x40022000
 8004284:	40021000 	.word	0x40021000
 8004288:	080097b4 	.word	0x080097b4
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b08e      	sub	sp, #56	; 0x38
 800429a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a0:	2300      	movs	r3, #0
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a4:	2300      	movs	r3, #0
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	623b      	str	r3, [r7, #32]
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042b8:	4b4e      	ldr	r3, [pc, #312]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d002      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x3a>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d003      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x40>
 80042cc:	e089      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042d2:	e089      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	0c9b      	lsrs	r3, r3, #18
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCC_GetSysClockFreq+0x168>)
 80042de:	5c9b      	ldrb	r3, [r3, r2]
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d072      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f003 020f 	and.w	r2, r3, #15
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <HAL_RCC_GetSysClockFreq+0x16c>)
 80042f6:	5c9b      	ldrb	r3, [r3, r2]
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d053      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	3301      	adds	r3, #1
 8004312:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3302      	adds	r3, #2
 8004320:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2200      	movs	r2, #0
 8004326:	469a      	mov	sl, r3
 8004328:	4693      	mov	fp, r2
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	2200      	movs	r2, #0
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	617a      	str	r2, [r7, #20]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	fb03 f20b 	mul.w	r2, r3, fp
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fb0a f303 	mul.w	r3, sl, r3
 800433e:	4413      	add	r3, r2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	fbaa 0102 	umull	r0, r1, sl, r2
 8004346:	440b      	add	r3, r1
 8004348:	4619      	mov	r1, r3
 800434a:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800434c:	fb03 f201 	mul.w	r2, r3, r1
 8004350:	2300      	movs	r3, #0
 8004352:	fb00 f303 	mul.w	r3, r0, r3
 8004356:	4413      	add	r3, r2
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800435a:	fba0 4502 	umull	r4, r5, r0, r2
 800435e:	442b      	add	r3, r5
 8004360:	461d      	mov	r5, r3
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	60fa      	str	r2, [r7, #12]
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	2200      	movs	r2, #0
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004376:	460b      	mov	r3, r1
 8004378:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800437c:	4652      	mov	r2, sl
 800437e:	fb02 f203 	mul.w	r2, r2, r3
 8004382:	465b      	mov	r3, fp
 8004384:	4684      	mov	ip, r0
 8004386:	fb0c f303 	mul.w	r3, ip, r3
 800438a:	4413      	add	r3, r2
 800438c:	4602      	mov	r2, r0
 800438e:	4651      	mov	r1, sl
 8004390:	fba2 8901 	umull	r8, r9, r2, r1
 8004394:	444b      	add	r3, r9
 8004396:	4699      	mov	r9, r3
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fb ff48 	bl	8000234 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34
 80043ac:	e007      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RCC_GetSysClockFreq+0x168>)
 80043c0:	7b5b      	ldrb	r3, [r3, #13]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
 80043d0:	e004      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	4a0b      	ldr	r2, [pc, #44]	; (8004404 <HAL_RCC_GetSysClockFreq+0x170>)
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043e0:	e002      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_GetSysClockFreq+0x174>)
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3738      	adds	r7, #56	; 0x38
 80043ee:	46bd      	mov	sp, r7
 80043f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	017d7840 	.word	0x017d7840
 80043fc:	080097c4 	.word	0x080097c4
 8004400:	080097d4 	.word	0x080097d4
 8004404:	003d0900 	.word	0x003d0900
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <HAL_RCC_GetHCLKFreq+0x10>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	20000000 	.word	0x20000000

08004420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <RCC_Delay+0x34>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <RCC_Delay+0x38>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a5b      	lsrs	r3, r3, #9
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800443c:	bf00      	nop
  }
  while (Delay --);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	60fa      	str	r2, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f9      	bne.n	800443c <RCC_Delay+0x1c>
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	20000000 	.word	0x20000000
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d07d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 800447c:	2300      	movs	r3, #0
 800447e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004480:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448c:	4b88      	ldr	r3, [pc, #544]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004496:	61d3      	str	r3, [r2, #28]
 8004498:	4b85      	ldr	r3, [pc, #532]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044a4:	2301      	movs	r3, #1
 80044a6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b82      	ldr	r3, [pc, #520]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d118      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b4:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c0:	f7fd fa82 	bl	80019c8 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd fa7e 	bl	80019c8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0e5      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b76      	ldr	r3, [pc, #472]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e6:	4b72      	ldr	r3, [pc, #456]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d027      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004504:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800451a:	4a65      	ldr	r2, [pc, #404]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d014      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fd fa4d 	bl	80019c8 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fd fa49 	bl	80019c8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0ae      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ee      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004554:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4953      	ldr	r1, [pc, #332]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004562:	4313      	orrs	r3, r2
 8004564:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004566:	7efb      	ldrb	r3, [r7, #27]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4a4f      	ldr	r2, [pc, #316]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004584:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4947      	ldr	r1, [pc, #284]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80045a2:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4940      	ldr	r1, [pc, #256]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80045c0:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	4938      	ldr	r1, [pc, #224]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80045d2:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d148      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d138      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e042      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004620:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4920      	ldr	r1, [pc, #128]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800462e:	4313      	orrs	r3, r2
 8004630:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004632:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	491c      	ldr	r1, [pc, #112]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004640:	4313      	orrs	r3, r2
 8004642:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fd f9bd 	bl	80019c8 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004652:	f7fd f9b9 	bl	80019c8 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b64      	cmp	r3, #100	; 0x64
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e020      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004670:	e009      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00f      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4904      	ldr	r1, [pc, #16]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42420440 	.word	0x42420440
 80046bc:	42420070 	.word	0x42420070

080046c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e076      	b.n	80047c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d108      	bne.n	80046ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e2:	d009      	beq.n	80046f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
 80046ea:	e005      	b.n	80046f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc ff84 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477c:	ea42 0103 	orr.w	r1, r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	0c1a      	lsrs	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f002 0204 	and.w	r2, r2, #4
 800479e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Transmit+0x22>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e12d      	b.n	8004a46 <HAL_SPI_Transmit+0x27e>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f2:	f7fd f8e9 	bl	80019c8 <HAL_GetTick>
 80047f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d002      	beq.n	800480e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004808:	2302      	movs	r3, #2
 800480a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800480c:	e116      	b.n	8004a3c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_Transmit+0x52>
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800481e:	e10d      	b.n	8004a3c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2203      	movs	r2, #3
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d10f      	bne.n	8004888 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004886:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d007      	beq.n	80048a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d14f      	bne.n	8004950 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_Transmit+0xf6>
 80048b8:	8afb      	ldrh	r3, [r7, #22]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d142      	bne.n	8004944 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048e2:	e02f      	b.n	8004944 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d112      	bne.n	8004918 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	86da      	strh	r2, [r3, #54]	; 0x36
 8004916:	e015      	b.n	8004944 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004918:	f7fd f856 	bl	80019c8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_Transmit+0x168>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x16e>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004942:	e07b      	b.n	8004a3c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ca      	bne.n	80048e4 <HAL_SPI_Transmit+0x11c>
 800494e:	e050      	b.n	80049f2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_SPI_Transmit+0x196>
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d144      	bne.n	80049e8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004984:	e030      	b.n	80049e8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d113      	bne.n	80049bc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80049ba:	e015      	b.n	80049e8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049bc:	f7fd f804 	bl	80019c8 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d803      	bhi.n	80049d4 <HAL_SPI_Transmit+0x20c>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Transmit+0x212>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049e6:	e029      	b.n	8004a3c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1c9      	bne.n	8004986 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fbcc 	bl	8005194 <SPI_EndRxTxTransaction>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e003      	b.n	8004a3c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b088      	sub	sp, #32
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a72:	e0fb      	b.n	8004c6c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7c:	d112      	bne.n	8004aa4 <HAL_SPI_Receive+0x56>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f8ef 	bl	8004c7e <HAL_SPI_TransmitReceive>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	e0e8      	b.n	8004c76 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Receive+0x64>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0e1      	b.n	8004c76 <HAL_SPI_Receive+0x228>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aba:	f7fc ff85 	bl	80019c8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Receive+0x7e>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad0:	e0cc      	b.n	8004c6c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b18:	d10f      	bne.n	8004b3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d007      	beq.n	8004b58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d16a      	bne.n	8004c36 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b60:	e032      	b.n	8004bc8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d115      	bne.n	8004b9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f103 020c 	add.w	r2, r3, #12
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9a:	e015      	b.n	8004bc8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9c:	f7fc ff14 	bl	80019c8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d803      	bhi.n	8004bb4 <HAL_SPI_Receive+0x166>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Receive+0x16c>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bc6:	e051      	b.n	8004c6c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1c7      	bne.n	8004b62 <HAL_SPI_Receive+0x114>
 8004bd2:	e035      	b.n	8004c40 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d113      	bne.n	8004c0a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	b292      	uxth	r2, r2
 8004bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c08:	e015      	b.n	8004c36 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0a:	f7fc fedd 	bl	80019c8 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d803      	bhi.n	8004c22 <HAL_SPI_Receive+0x1d4>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d102      	bne.n	8004c28 <HAL_SPI_Receive+0x1da>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c34:	e01a      	b.n	8004c6c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1c9      	bne.n	8004bd4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fa53 	bl	80050f0 <SPI_EndRxTransaction>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
 8004c62:	e003      	b.n	8004c6c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b08c      	sub	sp, #48	; 0x30
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x26>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e198      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x358>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fc fe8c 	bl	80019c8 <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00f      	beq.n	8004cee <HAL_SPI_TransmitReceive+0x70>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd4:	d107      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x68>
 8004cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cec:	e16d      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x82>
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d06:	e160      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d003      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2205      	movs	r2, #5
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	887a      	ldrh	r2, [r7, #2]
 8004d3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d007      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d17c      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x10a>
 8004d82:	8b7b      	ldrh	r3, [r7, #26]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d16a      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dac:	e057      	b.n	8004e5e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11b      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x176>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x176>
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d113      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d119      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x1b8>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d014      	beq.n	8004e36 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	b292      	uxth	r2, r2
 8004e18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e36:	f7fc fdc7 	bl	80019c8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d80b      	bhi.n	8004e5e <HAL_SPI_TransmitReceive+0x1e0>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d007      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e5c:	e0b5      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1a2      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x130>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d19d      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x130>
 8004e72:	e080      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x204>
 8004e7c:	8b7b      	ldrh	r3, [r7, #26]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d16f      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea8:	e05b      	b.n	8004f62 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11c      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x274>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x274>
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d114      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d119      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x2b6>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f30:	2301      	movs	r3, #1
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f34:	f7fc fd48 	bl	80019c8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d803      	bhi.n	8004f4c <HAL_SPI_TransmitReceive+0x2ce>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d102      	bne.n	8004f52 <HAL_SPI_TransmitReceive+0x2d4>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d107      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f60:	e033      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d19e      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x22c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d199      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f90a 	bl	8005194 <SPI_EndRxTxTransaction>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f92:	e01a      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc0:	e003      	b.n	8004fca <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3730      	adds	r7, #48	; 0x30
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff0:	f7fc fcea 	bl	80019c8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005000:	f7fc fce2 	bl	80019c8 <HAL_GetTick>
 8005004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	015b      	lsls	r3, r3, #5
 800500c:	0d1b      	lsrs	r3, r3, #20
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	e054      	b.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d050      	beq.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005020:	f7fc fcd2 	bl	80019c8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	429a      	cmp	r2, r3
 800502e:	d902      	bls.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d111      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	d004      	beq.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d107      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d10f      	bne.n	800509e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800509c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e017      	b.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3b01      	subs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d19b      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000000 	.word	0x20000000

080050f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d111      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d004      	beq.n	800511a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005118:	d107      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005132:	d117      	bne.n	8005164 <SPI_EndRxTransaction+0x74>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d112      	bne.n	8005164 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	2101      	movs	r1, #1
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff ff49 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e013      	b.n	800518c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff36 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e000      	b.n	800518c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2200      	movs	r2, #0
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff ff18 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e000      	b.n	80051c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e041      	b.n	8005266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fb4a 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 f82e 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <TIM_Base_SetConfig+0xc8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_Base_SetConfig+0x38>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d00b      	beq.n	80052a8 <TIM_Base_SetConfig+0x38>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a2a      	ldr	r2, [pc, #168]	; (800533c <TIM_Base_SetConfig+0xcc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_Base_SetConfig+0x38>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a29      	ldr	r2, [pc, #164]	; (8005340 <TIM_Base_SetConfig+0xd0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x38>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <TIM_Base_SetConfig+0xd4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <TIM_Base_SetConfig+0xc8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00f      	beq.n	80052e2 <TIM_Base_SetConfig+0x72>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d00b      	beq.n	80052e2 <TIM_Base_SetConfig+0x72>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1b      	ldr	r2, [pc, #108]	; (800533c <TIM_Base_SetConfig+0xcc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_Base_SetConfig+0x72>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <TIM_Base_SetConfig+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_Base_SetConfig+0x72>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <TIM_Base_SetConfig+0xd4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d108      	bne.n	80052f4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <TIM_Base_SetConfig+0xc8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40000c00 	.word	0x40000c00

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e04b      	b.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d00e      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a12      	ldr	r2, [pc, #72]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10c      	bne.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00

08005414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005414:	b084      	sub	sp, #16
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	f107 001c 	add.w	r0, r7, #28
 8005422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 f9de 	bl	80067f4 <USB_CoreReset>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005454:	b004      	add	sp, #16
 8005456:	4770      	bx	lr

08005458 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d165      	bne.n	8005538 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <USB_SetTurnaroundTime+0x110>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d906      	bls.n	8005482 <USB_SetTurnaroundTime+0x2a>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a3d      	ldr	r2, [pc, #244]	; (800556c <USB_SetTurnaroundTime+0x114>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d202      	bcs.n	8005482 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800547c:	230f      	movs	r3, #15
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e05c      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a39      	ldr	r2, [pc, #228]	; (800556c <USB_SetTurnaroundTime+0x114>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d306      	bcc.n	8005498 <USB_SetTurnaroundTime+0x40>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a38      	ldr	r2, [pc, #224]	; (8005570 <USB_SetTurnaroundTime+0x118>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d202      	bcs.n	8005498 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005492:	230e      	movs	r3, #14
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e051      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <USB_SetTurnaroundTime+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d306      	bcc.n	80054ae <USB_SetTurnaroundTime+0x56>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <USB_SetTurnaroundTime+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d202      	bcs.n	80054ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054a8:	230d      	movs	r3, #13
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e046      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a30      	ldr	r2, [pc, #192]	; (8005574 <USB_SetTurnaroundTime+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d306      	bcc.n	80054c4 <USB_SetTurnaroundTime+0x6c>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a2f      	ldr	r2, [pc, #188]	; (8005578 <USB_SetTurnaroundTime+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d802      	bhi.n	80054c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054be:	230c      	movs	r3, #12
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e03b      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d906      	bls.n	80054da <USB_SetTurnaroundTime+0x82>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a2b      	ldr	r2, [pc, #172]	; (800557c <USB_SetTurnaroundTime+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d802      	bhi.n	80054da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054d4:	230b      	movs	r3, #11
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e030      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d906      	bls.n	80054f0 <USB_SetTurnaroundTime+0x98>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a26      	ldr	r2, [pc, #152]	; (8005580 <USB_SetTurnaroundTime+0x128>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d802      	bhi.n	80054f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ea:	230a      	movs	r3, #10
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e025      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a23      	ldr	r2, [pc, #140]	; (8005580 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d906      	bls.n	8005506 <USB_SetTurnaroundTime+0xae>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a22      	ldr	r2, [pc, #136]	; (8005584 <USB_SetTurnaroundTime+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d202      	bcs.n	8005506 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005500:	2309      	movs	r3, #9
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e01a      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d306      	bcc.n	800551c <USB_SetTurnaroundTime+0xc4>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <USB_SetTurnaroundTime+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d802      	bhi.n	800551c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005516:	2308      	movs	r3, #8
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e00f      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d906      	bls.n	8005532 <USB_SetTurnaroundTime+0xda>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <USB_SetTurnaroundTime+0x134>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d202      	bcs.n	8005532 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800552c:	2307      	movs	r3, #7
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e004      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005532:	2306      	movs	r3, #6
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e001      	b.n	800553c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005538:	2309      	movs	r3, #9
 800553a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005554:	431a      	orrs	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	00d8acbf 	.word	0x00d8acbf
 800556c:	00e4e1c0 	.word	0x00e4e1c0
 8005570:	00f42400 	.word	0x00f42400
 8005574:	01067380 	.word	0x01067380
 8005578:	011a499f 	.word	0x011a499f
 800557c:	01312cff 	.word	0x01312cff
 8005580:	014ca43f 	.word	0x014ca43f
 8005584:	016e3600 	.word	0x016e3600
 8005588:	01a6ab1f 	.word	0x01a6ab1f
 800558c:	01e84800 	.word	0x01e84800

08005590 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 0201 	bic.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d115      	bne.n	800561e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055fe:	2001      	movs	r0, #1
 8005600:	f7fc f9ec 	bl	80019dc <HAL_Delay>
      ms++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 f87a 	bl	8006704 <USB_GetMode>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d01e      	beq.n	8005654 <USB_SetCurrentMode+0x84>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b31      	cmp	r3, #49	; 0x31
 800561a:	d9f0      	bls.n	80055fe <USB_SetCurrentMode+0x2e>
 800561c:	e01a      	b.n	8005654 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d115      	bne.n	8005650 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005630:	2001      	movs	r0, #1
 8005632:	f7fc f9d3 	bl	80019dc <HAL_Delay>
      ms++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 f861 	bl	8006704 <USB_GetMode>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <USB_SetCurrentMode+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b31      	cmp	r3, #49	; 0x31
 800564c:	d9f0      	bls.n	8005630 <USB_SetCurrentMode+0x60>
 800564e:	e001      	b.n	8005654 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e005      	b.n	8005660 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b32      	cmp	r3, #50	; 0x32
 8005658:	d101      	bne.n	800565e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005668:	b084      	sub	sp, #16
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e009      	b.n	800569c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3340      	adds	r3, #64	; 0x40
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	2200      	movs	r2, #0
 8005694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3301      	adds	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b0e      	cmp	r3, #14
 80056a0:	d9f2      	bls.n	8005688 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b4:	461a      	mov	r2, r3
 80056b6:	2300      	movs	r3, #0
 80056b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ba:	2103      	movs	r1, #3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f959 	bl	8005974 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056c2:	2110      	movs	r1, #16
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8f1 	bl	80058ac <USB_FlushTxFifo>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f91d 	bl	8005914 <USB_FlushRxFifo>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	461a      	mov	r2, r3
 80056f8:	2300      	movs	r3, #0
 80056fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	e043      	b.n	8005796 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005724:	d118      	bne.n	8005758 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	461a      	mov	r2, r3
 800573a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	e013      	b.n	800576a <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	461a      	mov	r2, r3
 8005750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e008      	b.n	800576a <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800578e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3301      	adds	r3, #1
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3b7      	bcc.n	800570e <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e043      	b.n	800582c <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ba:	d118      	bne.n	80057ee <USB_DevInit+0x186>
    {
      if (i == 0U)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e013      	b.n	8005800 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	461a      	mov	r2, r3
 80057e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e008      	b.n	8005800 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3301      	adds	r3, #1
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3b7      	bcc.n	80057a4 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f043 0210 	orr.w	r2, r3, #16
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <USB_DevInit+0x240>)
 8005868:	4313      	orrs	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f043 0208 	orr.w	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a2:	b004      	add	sp, #16
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	803c3800 	.word	0x803c3800

080058ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01b      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf2      	bge.n	80058ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d0f0      	beq.n	80058e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a11      	ldr	r2, [pc, #68]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e018      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	daf2      	bge.n	8005920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2210      	movs	r2, #16
 8005942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d0f0      	beq.n	8005944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0306 	and.w	r3, r3, #6
 80059bc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d002      	beq.n	80059ca <USB_GetDevSpeed+0x26>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d102      	bne.n	80059d0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059ca:	2302      	movs	r3, #2
 80059cc:	75fb      	strb	r3, [r7, #23]
 80059ce:	e001      	b.n	80059d4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059d0:	230f      	movs	r3, #15
 80059d2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d13a      	bne.n	8005a72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d155      	bne.n	8005ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	059b      	lsls	r3, r3, #22
 8005a56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e036      	b.n	8005ae0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	2101      	movs	r1, #1
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11a      	bne.n	8005ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ade:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d161      	bne.n	8005bcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1e:	d11f      	bne.n	8005b60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	2101      	movs	r1, #1
 8005b72:	fa01 f303 	lsl.w	r3, r1, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b80:	4013      	ands	r3, r2
 8005b82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	0159      	lsls	r1, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	440b      	add	r3, r1
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <USB_DeactivateEndpoint+0x1b0>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]
 8005bca:	e060      	b.n	8005c8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be2:	d11f      	bne.n	8005c24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c44:	4013      	ands	r3, r2
 8005c46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	0159      	lsls	r1, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	4619      	mov	r1, r3
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <USB_DeactivateEndpoint+0x1b4>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	ec337800 	.word	0xec337800
 8005ca0:	eff37800 	.word	0xeff37800

08005ca4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	f040 8128 	bne.w	8005f12 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d132      	bne.n	8005d30 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	0cdb      	lsrs	r3, r3, #19
 8005d2a:	04db      	lsls	r3, r3, #19
 8005d2c:	6113      	str	r3, [r2, #16]
 8005d2e:	e092      	b.n	8005e56 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4a:	0cdb      	lsrs	r3, r3, #19
 8005d4c:	04db      	lsls	r3, r3, #19
 8005d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11a      	bne.n	8005db0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d903      	bls.n	8005d8e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dac:	6113      	str	r3, [r2, #16]
 8005dae:	e01b      	b.n	8005de8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6919      	ldr	r1, [r3, #16]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	1e59      	subs	r1, r3, #1
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dd2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dd4:	4b8d      	ldr	r3, [pc, #564]	; (800600c <USB_EPStartXfer+0x368>)
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	0148      	lsls	r0, r1, #5
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	4401      	add	r1, r0
 8005de0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005de4:	4313      	orrs	r3, r2
 8005de6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfe:	6939      	ldr	r1, [r7, #16]
 8005e00:	0148      	lsls	r0, r1, #5
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	4401      	add	r1, r0
 8005e06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d11f      	bne.n	8005e56 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e54:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e74:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d015      	beq.n	8005eaa <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 8139 	beq.w	80060fa <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	634b      	str	r3, [r1, #52]	; 0x34
 8005ea8:	e127      	b.n	80060fa <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d110      	bne.n	8005edc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e00f      	b.n	8005efc <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68d9      	ldr	r1, [r3, #12]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9a5 	bl	800625a <USB_WritePacket>
 8005f10:	e0f3      	b.n	80060fa <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	0cdb      	lsrs	r3, r3, #19
 8005f2e:	04db      	lsls	r3, r3, #19
 8005f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f54:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d12f      	bne.n	8005fbc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8a:	6939      	ldr	r1, [r7, #16]
 8005f8c:	0148      	lsls	r0, r1, #5
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	4401      	add	r1, r0
 8005f92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f96:	4313      	orrs	r3, r2
 8005f98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb8:	6113      	str	r3, [r2, #16]
 8005fba:	e061      	b.n	8006080 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d125      	bne.n	8006010 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fda:	6939      	ldr	r1, [r7, #16]
 8005fdc:	0148      	lsls	r0, r1, #5
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	4401      	add	r1, r0
 8005fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006008:	6113      	str	r3, [r2, #16]
 800600a:	e039      	b.n	8006080 <USB_EPStartXfer+0x3dc>
 800600c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4413      	add	r3, r2
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	89fa      	ldrh	r2, [r7, #14]
 800602c:	fb03 f202 	mul.w	r2, r3, r2
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	89fb      	ldrh	r3, [r7, #14]
 8006044:	04d9      	lsls	r1, r3, #19
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <USB_EPStartXfer+0x460>)
 8006048:	400b      	ands	r3, r1
 800604a:	6939      	ldr	r1, [r7, #16]
 800604c:	0148      	lsls	r0, r1, #5
 800604e:	6979      	ldr	r1, [r7, #20]
 8006050:	4401      	add	r1, r0
 8006052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006056:	4313      	orrs	r3, r2
 8006058:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	0148      	lsls	r0, r1, #5
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	4401      	add	r1, r0
 8006078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800607c:	4313      	orrs	r3, r2
 800607e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	791b      	ldrb	r3, [r3, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d128      	bne.n	80060da <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d110      	bne.n	80060ba <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e00f      	b.n	80060da <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	1ff80000 	.word	0x1ff80000

08006108 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d14a      	bne.n	80061bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613e:	f040 8086 	bne.w	800624e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006164:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f242 7210 	movw	r2, #10000	; 0x2710
 8006196:	4293      	cmp	r3, r2
 8006198:	d902      	bls.n	80061a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
          break;
 800619e:	e056      	b.n	800624e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b8:	d0e7      	beq.n	800618a <USB_EPStopXfer+0x82>
 80061ba:	e048      	b.n	800624e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d4:	d13b      	bne.n	800624e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800621c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f242 7210 	movw	r2, #10000	; 0x2710
 800622a:	4293      	cmp	r3, r2
 800622c:	d902      	bls.n	8006234 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
          break;
 8006232:	e00c      	b.n	800624e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624c:	d0e7      	beq.n	800621e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr

0800625a <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800625a:	b480      	push	{r7}
 800625c:	b089      	sub	sp, #36	; 0x24
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	4611      	mov	r1, r2
 8006266:	461a      	mov	r2, r3
 8006268:	460b      	mov	r3, r1
 800626a:	71fb      	strb	r3, [r7, #7]
 800626c:	4613      	mov	r3, r2
 800626e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006278:	88bb      	ldrh	r3, [r7, #4]
 800627a:	3303      	adds	r3, #3
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e018      	b.n	80062b8 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	031a      	lsls	r2, r3, #12
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006292:	461a      	mov	r2, r3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6013      	str	r3, [r2, #0]
    pSrc++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3301      	adds	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d3e2      	bcc.n	8006286 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	; 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b08b      	sub	sp, #44	; 0x2c
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062f2:	2300      	movs	r3, #0
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	e014      	b.n	8006322 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	601a      	str	r2, [r3, #0]
    pDest++;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	3301      	adds	r3, #1
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	3301      	adds	r3, #1
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	3301      	adds	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	3301      	adds	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	3301      	adds	r3, #1
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	429a      	cmp	r2, r3
 8006328:	d3e6      	bcc.n	80062f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800632a:	8bfb      	ldrh	r3, [r7, #30]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01e      	beq.n	800636e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633a:	461a      	mov	r2, r3
 800633c:	f107 0310 	add.w	r3, r7, #16
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	701a      	strb	r2, [r3, #0]
      i++;
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	3301      	adds	r3, #1
 800635a:	623b      	str	r3, [r7, #32]
      pDest++;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	3301      	adds	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006362:	8bfb      	ldrh	r3, [r7, #30]
 8006364:	3b01      	subs	r3, #1
 8006366:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006368:	8bfb      	ldrh	r3, [r7, #30]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ea      	bne.n	8006344 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006370:	4618      	mov	r0, r3
 8006372:	372c      	adds	r7, #44	; 0x2c
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d12c      	bne.n	80063f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	db12      	blt.n	80063ce <USB_EPSetStall+0x54>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00f      	beq.n	80063ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e02b      	b.n	8006448 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	db12      	blt.n	8006428 <USB_EPSetStall+0xae>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006426:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d128      	bne.n	80064c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d003      	beq.n	80064a0 <USB_EPClearStall+0x4c>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	791b      	ldrb	r3, [r3, #4]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d138      	bne.n	8006512 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e027      	b.n	8006512 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d003      	beq.n	80064f2 <USB_EPClearStall+0x9e>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d10f      	bne.n	8006512 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006540:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006582:	f023 0303 	bic.w	r3, r3, #3
 8006586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006596:	f023 0302 	bic.w	r3, r3, #2
 800659a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d6:	f043 0302 	orr.w	r3, r3, #2
 80065da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	0c1b      	lsrs	r3, r3, #16
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	b29b      	uxth	r3, r3
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800669e:	68bb      	ldr	r3, [r7, #8]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b087      	sub	sp, #28
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	fa22 f303 	lsr.w	r3, r2, r3
 80066da:	01db      	lsls	r3, r3, #7
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4013      	ands	r3, r2
 80066f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f8:	68bb      	ldr	r3, [r7, #8]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0301 	and.w	r3, r3, #1
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr

0800671e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800673c:	f023 0307 	bic.w	r3, r3, #7
 8006740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
	...

08006764 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	333c      	adds	r3, #60	; 0x3c
 8006776:	3304      	adds	r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <USB_EP0_OutStart+0x8c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d90a      	bls.n	800679a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d101      	bne.n	800679a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	e024      	b.n	80067e4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f043 0318 	orr.w	r3, r3, #24
 80067cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067e0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	4f54300a 	.word	0x4f54300a

080067f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <USB_CoreReset+0x60>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e01b      	b.n	800684a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	daf2      	bge.n	8006800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a08      	ldr	r2, [pc, #32]	; (8006854 <USB_CoreReset+0x60>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e006      	b.n	800684a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d0f0      	beq.n	800682a <USB_CoreReset+0x36>

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr
 8006854:	00030d40 	.word	0x00030d40

08006858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7c1b      	ldrb	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d115      	bne.n	800689c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006874:	2202      	movs	r2, #2
 8006876:	2181      	movs	r1, #129	; 0x81
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 ff22 	bl	80086c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006888:	2202      	movs	r2, #2
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 ff18 	bl	80086c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800689a:	e012      	b.n	80068c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	2202      	movs	r2, #2
 80068a0:	2181      	movs	r1, #129	; 0x81
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 ff0d 	bl	80086c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ae:	2340      	movs	r3, #64	; 0x40
 80068b0:	2202      	movs	r2, #2
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 ff04 	bl	80086c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068c2:	2308      	movs	r3, #8
 80068c4:	2203      	movs	r2, #3
 80068c6:	2182      	movs	r1, #130	; 0x82
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fefa 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068d8:	f002 f81a 	bl	8008910 <USBD_static_malloc>
 80068dc:	4602      	mov	r2, r0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
 80068f2:	e026      	b.n	8006942 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7c1b      	ldrb	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 ffb9 	bl	80088a2 <USBD_LL_PrepareReceive>
 8006930:	e007      	b.n	8006942 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 ffb0 	bl	80088a2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800695c:	2181      	movs	r1, #129	; 0x81
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fed5 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800696a:	2101      	movs	r1, #1
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fece 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800697a:	2182      	movs	r1, #130	; 0x82
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fec6 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 ffc0 	bl	8008928 <USBD_static_free>
    pdev->pClassData = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b086      	sub	sp, #24
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d039      	beq.n	8006a58 <USBD_CDC_Setup+0x9e>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d17f      	bne.n	8006ae8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	88db      	ldrh	r3, [r3, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d029      	beq.n	8006a44 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da11      	bge.n	8006a1e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	88d2      	ldrh	r2, [r2, #6]
 8006a0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a0e:	6939      	ldr	r1, [r7, #16]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fa41 	bl	8007e9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a1c:	e06b      	b.n	8006af6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785a      	ldrb	r2, [r3, #1]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	88db      	ldrh	r3, [r3, #6]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a34:	6939      	ldr	r1, [r7, #16]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	88db      	ldrh	r3, [r3, #6]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fa5c 	bl	8007efa <USBD_CtlPrepareRx>
      break;
 8006a42:	e058      	b.n	8006af6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	7850      	ldrb	r0, [r2, #1]
 8006a50:	2200      	movs	r2, #0
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4798      	blx	r3
      break;
 8006a56:	e04e      	b.n	8006af6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b0b      	cmp	r3, #11
 8006a5e:	d02e      	beq.n	8006abe <USBD_CDC_Setup+0x104>
 8006a60:	2b0b      	cmp	r3, #11
 8006a62:	dc38      	bgt.n	8006ad6 <USBD_CDC_Setup+0x11c>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_CDC_Setup+0xb4>
 8006a68:	2b0a      	cmp	r3, #10
 8006a6a:	d014      	beq.n	8006a96 <USBD_CDC_Setup+0xdc>
 8006a6c:	e033      	b.n	8006ad6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d107      	bne.n	8006a88 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fa0c 	bl	8007e9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a86:	e02e      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f99d 	bl	8007dca <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	75fb      	strb	r3, [r7, #23]
          break;
 8006a94:	e027      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa0:	f107 030f 	add.w	r3, r7, #15
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f9f8 	bl	8007e9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aae:	e01a      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f989 	bl	8007dca <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	75fb      	strb	r3, [r7, #23]
          break;
 8006abc:	e013      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d00d      	beq.n	8006ae4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f97d 	bl	8007dca <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ad4:	e006      	b.n	8006ae4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f976 	bl	8007dca <USBD_CtlError>
          ret = USBD_FAIL;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae2:	e000      	b.n	8006ae6 <USBD_CDC_Setup+0x12c>
          break;
 8006ae4:	bf00      	nop
      }
      break;
 8006ae6:	e006      	b.n	8006af6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f96d 	bl	8007dca <USBD_CtlError>
      ret = USBD_FAIL;
 8006af0:	2302      	movs	r3, #2
 8006af2:	75fb      	strb	r3, [r7, #23]
      break;
 8006af4:	bf00      	nop
  }

  return ret;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d03a      	beq.n	8006b9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	331c      	adds	r3, #28
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d029      	beq.n	8006b90 <USBD_CDC_DataIn+0x90>
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	331c      	adds	r3, #28
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	78f9      	ldrb	r1, [r7, #3]
 8006b50:	68b8      	ldr	r0, [r7, #8]
 8006b52:	460b      	mov	r3, r1
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	440b      	add	r3, r1
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4403      	add	r3, r0
 8006b5c:	3344      	adds	r3, #68	; 0x44
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d110      	bne.n	8006b90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	331c      	adds	r3, #28
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b82:	78f9      	ldrb	r1, [r7, #3]
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fe67 	bl	800885c <USBD_LL_Transmit>
 8006b8e:	e003      	b.n	8006b98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fe92 	bl	80088e8 <USBD_LL_GetRxDataSize>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bea:	4611      	mov	r1, r2
 8006bec:	4798      	blx	r3

    return USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e000      	b.n	8006bf4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bf2:	2302      	movs	r3, #2
  }
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d015      	beq.n	8006c42 <USBD_CDC_EP0_RxReady+0x46>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c1c:	2bff      	cmp	r3, #255	; 0xff
 8006c1e:	d010      	beq.n	8006c42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c36:	b292      	uxth	r2, r2
 8006c38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	22ff      	movs	r2, #255	; 0xff
 8006c3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2243      	movs	r2, #67	; 0x43
 8006c58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000094 	.word	0x20000094

08006c6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2243      	movs	r2, #67	; 0x43
 8006c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000050 	.word	0x20000050

08006c8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2243      	movs	r2, #67	; 0x43
 8006c98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c9a:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	200000d8 	.word	0x200000d8

08006cac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006cba:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01c      	beq.n	8006da4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d115      	bne.n	8006da0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2181      	movs	r1, #129	; 0x81
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fd60 	bl	800885c <USBD_LL_Transmit>

      return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e002      	b.n	8006da6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7c1b      	ldrb	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fd60 	bl	80088a2 <USBD_LL_PrepareReceive>
 8006de2:	e007      	b.n	8006df4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dea:	2340      	movs	r3, #64	; 0x40
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fd57 	bl	80088a2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	e01a      	b.n	8006e50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	79fa      	ldrb	r2, [r7, #7]
 8006e46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f001 fbdb 	bl	8008604 <USBD_LL_Init>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e001      	b.n	8006e7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fbfa 	bl	800868c <USBD_LL_Start>

  return USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	4611      	mov	r1, r2
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff10 	bl	8007d52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d016      	beq.n	8006f84 <USBD_LL_SetupStage+0x6a>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d81c      	bhi.n	8006f94 <USBD_LL_SetupStage+0x7a>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBD_LL_SetupStage+0x4a>
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d008      	beq.n	8006f74 <USBD_LL_SetupStage+0x5a>
 8006f62:	e017      	b.n	8006f94 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa03 	bl	8007378 <USBD_StdDevReq>
      break;
 8006f72:	e01a      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa65 	bl	800744c <USBD_StdItfReq>
      break;
 8006f82:	e012      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 faa5 	bl	80074dc <USBD_StdEPReq>
      break;
 8006f92:	e00a      	b.n	8006faa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fbd2 	bl	800874c <USBD_LL_StallEP>
      break;
 8006fa8:	bf00      	nop
  }

  return USBD_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d14b      	bne.n	8007060 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d134      	bne.n	8007044 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d919      	bls.n	800701a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d203      	bcs.n	8007008 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007004:	b29b      	uxth	r3, r3
 8007006:	e002      	b.n	800700e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 ff8f 	bl	8007f36 <USBD_CtlContinueRx>
 8007018:	e038      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800702c:	2b03      	cmp	r3, #3
 800702e:	d105      	bne.n	800703c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 ff8c 	bl	8007f5a <USBD_CtlSendStatus>
 8007042:	e023      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800704a:	2b05      	cmp	r3, #5
 800704c:	d11e      	bne.n	800708c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007056:	2100      	movs	r1, #0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f001 fb77 	bl	800874c <USBD_LL_StallEP>
 800705e:	e015      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007072:	2b03      	cmp	r3, #3
 8007074:	d108      	bne.n	8007088 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	7afa      	ldrb	r2, [r7, #11]
 8007080:	4611      	mov	r1, r2
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	4798      	blx	r3
 8007086:	e001      	b.n	800708c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	e000      	b.n	800708e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	460b      	mov	r3, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d17f      	bne.n	80071aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3314      	adds	r3, #20
 80070ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d15c      	bne.n	8007174 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d915      	bls.n	80070f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fef9 	bl	8007ed6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 fbd9 	bl	80088a2 <USBD_LL_PrepareReceive>
 80070f0:	e04e      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	6912      	ldr	r2, [r2, #16]
 80070fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fe:	fb01 f202 	mul.w	r2, r1, r2
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007110:	429a      	cmp	r2, r3
 8007112:	d316      	bcc.n	8007142 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800711e:	429a      	cmp	r2, r3
 8007120:	d20f      	bcs.n	8007142 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fed5 	bl	8007ed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 fbb1 	bl	80088a2 <USBD_LL_PrepareReceive>
 8007140:	e026      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007154:	2b03      	cmp	r3, #3
 8007156:	d105      	bne.n	8007164 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f001 faf0 	bl	800874c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 ff07 	bl	8007f80 <USBD_CtlReceiveStatus>
 8007172:	e00d      	b.n	8007190 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717a:	2b04      	cmp	r3, #4
 800717c:	d004      	beq.n	8007188 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f001 fade 	bl	800874c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d11d      	bne.n	80071d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fe81 	bl	8006ea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071a8:	e015      	b.n	80071d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d108      	bne.n	80071d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	7afa      	ldrb	r2, [r7, #11]
 80071ca:	4611      	mov	r1, r2
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	4798      	blx	r3
 80071d0:	e001      	b.n	80071d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	e000      	b.n	80071d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e8:	2340      	movs	r3, #64	; 0x40
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fa67 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	2200      	movs	r2, #0
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fa59 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2240      	movs	r2, #64	; 0x40
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	4611      	mov	r1, r2
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	78fa      	ldrb	r2, [r7, #3]
 8007272:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d105      	bne.n	80072c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d10b      	bne.n	80072fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6852      	ldr	r2, [r2, #4]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	4611      	mov	r1, r2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d005      	beq.n	800739e <USBD_StdDevReq+0x26>
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d84f      	bhi.n	8007436 <USBD_StdDevReq+0xbe>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <USBD_StdDevReq+0x36>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d14b      	bne.n	8007436 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
      break;
 80073ac:	e048      	b.n	8007440 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d839      	bhi.n	800742a <USBD_StdDevReq+0xb2>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <USBD_StdDevReq+0x44>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	0800740d 	.word	0x0800740d
 80073c0:	08007421 	.word	0x08007421
 80073c4:	0800742b 	.word	0x0800742b
 80073c8:	08007417 	.word	0x08007417
 80073cc:	0800742b 	.word	0x0800742b
 80073d0:	080073ef 	.word	0x080073ef
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	0800742b 	.word	0x0800742b
 80073dc:	08007403 	.word	0x08007403
 80073e0:	080073f9 	.word	0x080073f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f9dc 	bl	80077a4 <USBD_GetDescriptor>
          break;
 80073ec:	e022      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb3f 	bl	8007a74 <USBD_SetAddress>
          break;
 80073f6:	e01d      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fb7e 	bl	8007afc <USBD_SetConfig>
          break;
 8007400:	e018      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc07 	bl	8007c18 <USBD_GetConfig>
          break;
 800740a:	e013      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc37 	bl	8007c82 <USBD_GetStatus>
          break;
 8007414:	e00e      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc65 	bl	8007ce8 <USBD_SetFeature>
          break;
 800741e:	e009      	b.n	8007434 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fc74 	bl	8007d10 <USBD_ClrFeature>
          break;
 8007428:	e004      	b.n	8007434 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fccc 	bl	8007dca <USBD_CtlError>
          break;
 8007432:	bf00      	nop
      }
      break;
 8007434:	e004      	b.n	8007440 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fcc6 	bl	8007dca <USBD_CtlError>
      break;
 800743e:	bf00      	nop
  }

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop

0800744c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007462:	2b40      	cmp	r3, #64	; 0x40
 8007464:	d005      	beq.n	8007472 <USBD_StdItfReq+0x26>
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d82e      	bhi.n	80074c8 <USBD_StdItfReq+0x7c>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <USBD_StdItfReq+0x26>
 800746e:	2b20      	cmp	r3, #32
 8007470:	d12a      	bne.n	80074c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	3b01      	subs	r3, #1
 800747a:	2b02      	cmp	r3, #2
 800747c:	d81d      	bhi.n	80074ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	889b      	ldrh	r3, [r3, #4]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	d813      	bhi.n	80074b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d110      	bne.n	80074c4 <USBD_StdItfReq+0x78>
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10d      	bne.n	80074c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fd56 	bl	8007f5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074ae:	e009      	b.n	80074c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fc89 	bl	8007dca <USBD_CtlError>
          break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc84 	bl	8007dca <USBD_CtlError>
          break;
 80074c2:	e000      	b.n	80074c6 <USBD_StdItfReq+0x7a>
          break;
 80074c4:	bf00      	nop
      }
      break;
 80074c6:	e004      	b.n	80074d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc7d 	bl	8007dca <USBD_CtlError>
      break;
 80074d0:	bf00      	nop
  }

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	889b      	ldrh	r3, [r3, #4]
 80074ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d007      	beq.n	800750c <USBD_StdEPReq+0x30>
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	f200 8146 	bhi.w	800778e <USBD_StdEPReq+0x2b2>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <USBD_StdEPReq+0x40>
 8007506:	2b20      	cmp	r3, #32
 8007508:	f040 8141 	bne.w	800778e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      break;
 800751a:	e13d      	b.n	8007798 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007524:	2b20      	cmp	r3, #32
 8007526:	d10a      	bne.n	800753e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]

        return ret;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	e12d      	b.n	800779a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b03      	cmp	r3, #3
 8007544:	d007      	beq.n	8007556 <USBD_StdEPReq+0x7a>
 8007546:	2b03      	cmp	r3, #3
 8007548:	f300 811b 	bgt.w	8007782 <USBD_StdEPReq+0x2a6>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d072      	beq.n	8007636 <USBD_StdEPReq+0x15a>
 8007550:	2b01      	cmp	r3, #1
 8007552:	d03a      	beq.n	80075ca <USBD_StdEPReq+0xee>
 8007554:	e115      	b.n	8007782 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	2b02      	cmp	r3, #2
 800755e:	d002      	beq.n	8007566 <USBD_StdEPReq+0x8a>
 8007560:	2b03      	cmp	r3, #3
 8007562:	d015      	beq.n	8007590 <USBD_StdEPReq+0xb4>
 8007564:	e02b      	b.n	80075be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <USBD_StdEPReq+0xaa>
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	d009      	beq.n	8007586 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f8e8 	bl	800874c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800757c:	2180      	movs	r1, #128	; 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f8e4 	bl	800874c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007584:	e020      	b.n	80075c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fc1e 	bl	8007dca <USBD_CtlError>
              break;
 800758e:	e01b      	b.n	80075c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10e      	bne.n	80075b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <USBD_StdEPReq+0xda>
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b80      	cmp	r3, #128	; 0x80
 80075a2:	d008      	beq.n	80075b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	88db      	ldrh	r3, [r3, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f8cb 	bl	800874c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fccf 	bl	8007f5a <USBD_CtlSendStatus>

              break;
 80075bc:	e004      	b.n	80075c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc02 	bl	8007dca <USBD_CtlError>
              break;
 80075c6:	bf00      	nop
          }
          break;
 80075c8:	e0e0      	b.n	800778c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d002      	beq.n	80075da <USBD_StdEPReq+0xfe>
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d015      	beq.n	8007604 <USBD_StdEPReq+0x128>
 80075d8:	e026      	b.n	8007628 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <USBD_StdEPReq+0x11e>
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b80      	cmp	r3, #128	; 0x80
 80075e4:	d009      	beq.n	80075fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f8ae 	bl	800874c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 f8aa 	bl	800874c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075f8:	e01c      	b.n	8007634 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fbe4 	bl	8007dca <USBD_CtlError>
              break;
 8007602:	e017      	b.n	8007634 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d112      	bne.n	8007632 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f8b5 	bl	800878a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc9a 	bl	8007f5a <USBD_CtlSendStatus>
              }
              break;
 8007626:	e004      	b.n	8007632 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fbcd 	bl	8007dca <USBD_CtlError>
              break;
 8007630:	e000      	b.n	8007634 <USBD_StdEPReq+0x158>
              break;
 8007632:	bf00      	nop
          }
          break;
 8007634:	e0aa      	b.n	800778c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	2b02      	cmp	r3, #2
 800763e:	d002      	beq.n	8007646 <USBD_StdEPReq+0x16a>
 8007640:	2b03      	cmp	r3, #3
 8007642:	d032      	beq.n	80076aa <USBD_StdEPReq+0x1ce>
 8007644:	e097      	b.n	8007776 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <USBD_StdEPReq+0x180>
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d004      	beq.n	800765c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fbb8 	bl	8007dca <USBD_CtlError>
                break;
 800765a:	e091      	b.n	8007780 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800765c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da0b      	bge.n	800767c <USBD_StdEPReq+0x1a0>
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	3310      	adds	r3, #16
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	3304      	adds	r3, #4
 800767a:	e00b      	b.n	8007694 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	3304      	adds	r3, #4
 8007694:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2202      	movs	r2, #2
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fbfb 	bl	8007e9e <USBD_CtlSendData>
              break;
 80076a8:	e06a      	b.n	8007780 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	da11      	bge.n	80076d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	f003 020f 	and.w	r2, r3, #15
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	3318      	adds	r3, #24
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d117      	bne.n	80076fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb7b 	bl	8007dca <USBD_CtlError>
                  break;
 80076d4:	e054      	b.n	8007780 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fb68 	bl	8007dca <USBD_CtlError>
                  break;
 80076fa:	e041      	b.n	8007780 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da0b      	bge.n	800771c <USBD_StdEPReq+0x240>
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	3310      	adds	r3, #16
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	3304      	adds	r3, #4
 800771a:	e00b      	b.n	8007734 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	3304      	adds	r3, #4
 8007734:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <USBD_StdEPReq+0x266>
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b80      	cmp	r3, #128	; 0x80
 8007740:	d103      	bne.n	800774a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	e00e      	b.n	8007768 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f83a 	bl	80087c8 <USBD_LL_IsStallEP>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e002      	b.n	8007768 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2202      	movs	r2, #2
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb95 	bl	8007e9e <USBD_CtlSendData>
              break;
 8007774:	e004      	b.n	8007780 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fb26 	bl	8007dca <USBD_CtlError>
              break;
 800777e:	bf00      	nop
          }
          break;
 8007780:	e004      	b.n	800778c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fb20 	bl	8007dca <USBD_CtlError>
          break;
 800778a:	bf00      	nop
      }
      break;
 800778c:	e004      	b.n	8007798 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fb1a 	bl	8007dca <USBD_CtlError>
      break;
 8007796:	bf00      	nop
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	885b      	ldrh	r3, [r3, #2]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	2b06      	cmp	r3, #6
 80077c6:	f200 8128 	bhi.w	8007a1a <USBD_GetDescriptor+0x276>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBD_GetDescriptor+0x2c>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	08007805 	.word	0x08007805
 80077d8:	08007845 	.word	0x08007845
 80077dc:	08007a1b 	.word	0x08007a1b
 80077e0:	08007a1b 	.word	0x08007a1b
 80077e4:	080079bb 	.word	0x080079bb
 80077e8:	080079e7 	.word	0x080079e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7c12      	ldrb	r2, [r2, #16]
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
      break;
 8007802:	e112      	b.n	8007a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7c1b      	ldrb	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10d      	bne.n	8007828 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	f107 0208 	add.w	r2, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	2202      	movs	r2, #2
 8007824:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007826:	e100      	b.n	8007a2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	f107 0208 	add.w	r2, r7, #8
 8007834:	4610      	mov	r0, r2
 8007836:	4798      	blx	r3
 8007838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	2202      	movs	r2, #2
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e0f2      	b.n	8007a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b05      	cmp	r3, #5
 800784c:	f200 80ac 	bhi.w	80079a8 <USBD_GetDescriptor+0x204>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBD_GetDescriptor+0xb4>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007871 	.word	0x08007871
 800785c:	080078a5 	.word	0x080078a5
 8007860:	080078d9 	.word	0x080078d9
 8007864:	0800790d 	.word	0x0800790d
 8007868:	08007941 	.word	0x08007941
 800786c:	08007975 	.word	0x08007975
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e091      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa97 	bl	8007dca <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e089      	b.n	80079b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e077      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa7d 	bl	8007dca <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e06f      	b.n	80079b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e05d      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa63 	bl	8007dca <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e055      	b.n	80079b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e043      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa49 	bl	8007dca <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e03b      	b.n	80079b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e029      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa2f 	bl	8007dca <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e021      	b.n	80079b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007996:	e00f      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa15 	bl	8007dca <USBD_CtlError>
            err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
          break;
 80079a6:	e007      	b.n	80079b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa0d 	bl	8007dca <USBD_CtlError>
          err++;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	3301      	adds	r3, #1
 80079b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80079b6:	e038      	b.n	8007a2a <USBD_GetDescriptor+0x286>
 80079b8:	e037      	b.n	8007a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1b      	ldrb	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	f107 0208 	add.w	r2, r7, #8
 80079ce:	4610      	mov	r0, r2
 80079d0:	4798      	blx	r3
 80079d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d4:	e029      	b.n	8007a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9f6 	bl	8007dca <USBD_CtlError>
        err++;
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	3301      	adds	r3, #1
 80079e2:	72fb      	strb	r3, [r7, #11]
      break;
 80079e4:	e021      	b.n	8007a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7c1b      	ldrb	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10d      	bne.n	8007a0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f107 0208 	add.w	r2, r7, #8
 80079fa:	4610      	mov	r0, r2
 80079fc:	4798      	blx	r3
 80079fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	2207      	movs	r2, #7
 8007a06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a08:	e00f      	b.n	8007a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9dc 	bl	8007dca <USBD_CtlError>
        err++;
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	3301      	adds	r3, #1
 8007a16:	72fb      	strb	r3, [r7, #11]
      break;
 8007a18:	e007      	b.n	8007a2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9d4 	bl	8007dca <USBD_CtlError>
      err++;
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	3301      	adds	r3, #1
 8007a26:	72fb      	strb	r3, [r7, #11]
      break;
 8007a28:	bf00      	nop
  }

  if (err != 0U)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11c      	bne.n	8007a6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a30:	893b      	ldrh	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <USBD_GetDescriptor+0x2b6>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00d      	beq.n	8007a5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88da      	ldrh	r2, [r3, #6]
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	bf28      	it	cs
 8007a48:	4613      	movcs	r3, r2
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a4e:	893b      	ldrh	r3, [r7, #8]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa22 	bl	8007e9e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa79 	bl	8007f5a <USBD_CtlSendStatus>
 8007a68:	e000      	b.n	8007a6c <USBD_GetDescriptor+0x2c8>
    return;
 8007a6a:	bf00      	nop
    }
  }
}
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop

08007a74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d130      	bne.n	8007ae8 <USBD_SetAddress+0x74>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	88db      	ldrh	r3, [r3, #6]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d12c      	bne.n	8007ae8 <USBD_SetAddress+0x74>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	885b      	ldrh	r3, [r3, #2]
 8007a92:	2b7f      	cmp	r3, #127	; 0x7f
 8007a94:	d828      	bhi.n	8007ae8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d104      	bne.n	8007ab6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f98b 	bl	8007dca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab4:	e01d      	b.n	8007af2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7bfa      	ldrb	r2, [r7, #15]
 8007aba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 feab 	bl	800881e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fa46 	bl	8007f5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	e009      	b.n	8007af2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	e004      	b.n	8007af2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f96d 	bl	8007dca <USBD_CtlError>
  }
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	4b41      	ldr	r3, [pc, #260]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b10:	4b40      	ldr	r3, [pc, #256]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d904      	bls.n	8007b22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f955 	bl	8007dca <USBD_CtlError>
 8007b20:	e075      	b.n	8007c0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d002      	beq.n	8007b32 <USBD_SetConfig+0x36>
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d023      	beq.n	8007b78 <USBD_SetConfig+0x7c>
 8007b30:	e062      	b.n	8007bf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b32:	4b38      	ldr	r3, [pc, #224]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d01a      	beq.n	8007b70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b3a:	4b36      	ldr	r3, [pc, #216]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2203      	movs	r2, #3
 8007b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b4c:	4b31      	ldr	r3, [pc, #196]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f9af 	bl	8006eb6 <USBD_SetClassConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d104      	bne.n	8007b68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f932 	bl	8007dca <USBD_CtlError>
            return;
 8007b66:	e052      	b.n	8007c0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9f6 	bl	8007f5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b6e:	e04e      	b.n	8007c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9f2 	bl	8007f5a <USBD_CtlSendStatus>
        break;
 8007b76:	e04a      	b.n	8007c0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b78:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d112      	bne.n	8007ba6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b88:	4b22      	ldr	r3, [pc, #136]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <USBD_SetConfig+0x118>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff f9ab 	bl	8006ef4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9db 	bl	8007f5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ba4:	e033      	b.n	8007c0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <USBD_SetConfig+0x118>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d01d      	beq.n	8007bf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff f999 	bl	8006ef4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bc2:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <USBD_SetConfig+0x118>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <USBD_SetConfig+0x118>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f96f 	bl	8006eb6 <USBD_SetClassConfig>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d104      	bne.n	8007be8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8f2 	bl	8007dca <USBD_CtlError>
            return;
 8007be6:	e012      	b.n	8007c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f9b6 	bl	8007f5a <USBD_CtlSendStatus>
        break;
 8007bee:	e00e      	b.n	8007c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f9b2 	bl	8007f5a <USBD_CtlSendStatus>
        break;
 8007bf6:	e00a      	b.n	8007c0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8e5 	bl	8007dca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <USBD_SetConfig+0x118>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff f974 	bl	8006ef4 <USBD_ClrClassConfig>
        break;
 8007c0c:	bf00      	nop
    }
  }
}
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000340 	.word	0x20000340

08007c18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d004      	beq.n	8007c34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8cc 	bl	8007dca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c32:	e022      	b.n	8007c7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	dc02      	bgt.n	8007c44 <USBD_GetConfig+0x2c>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dc03      	bgt.n	8007c4a <USBD_GetConfig+0x32>
 8007c42:	e015      	b.n	8007c70 <USBD_GetConfig+0x58>
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d00b      	beq.n	8007c60 <USBD_GetConfig+0x48>
 8007c48:	e012      	b.n	8007c70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3308      	adds	r3, #8
 8007c54:	2201      	movs	r2, #1
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f920 	bl	8007e9e <USBD_CtlSendData>
        break;
 8007c5e:	e00c      	b.n	8007c7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	2201      	movs	r2, #1
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f918 	bl	8007e9e <USBD_CtlSendData>
        break;
 8007c6e:	e004      	b.n	8007c7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f8a9 	bl	8007dca <USBD_CtlError>
        break;
 8007c78:	bf00      	nop
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d81e      	bhi.n	8007cd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d004      	beq.n	8007caa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f891 	bl	8007dca <USBD_CtlError>
        break;
 8007ca8:	e01a      	b.n	8007ce0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f043 0202 	orr.w	r2, r3, #2
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f8e5 	bl	8007e9e <USBD_CtlSendData>
      break;
 8007cd4:	e004      	b.n	8007ce0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f876 	bl	8007dca <USBD_CtlError>
      break;
 8007cde:	bf00      	nop
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d106      	bne.n	8007d08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f929 	bl	8007f5a <USBD_CtlSendStatus>
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d80b      	bhi.n	8007d3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10c      	bne.n	8007d48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f90f 	bl	8007f5a <USBD_CtlSendStatus>
      }
      break;
 8007d3c:	e004      	b.n	8007d48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f842 	bl	8007dca <USBD_CtlError>
      break;
 8007d46:	e000      	b.n	8007d4a <USBD_ClrFeature+0x3a>
      break;
 8007d48:	bf00      	nop
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	785a      	ldrb	r2, [r3, #1]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3303      	adds	r3, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3305      	adds	r3, #5
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	3306      	adds	r3, #6
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	3307      	adds	r3, #7
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	80da      	strh	r2, [r3, #6]

}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007dd4:	2180      	movs	r1, #128	; 0x80
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fcb8 	bl	800874c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fcb4 	bl	800874c <USBD_LL_StallEP>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d032      	beq.n	8007e68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f834 	bl	8007e70 <USBD_GetLen>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	75fa      	strb	r2, [r7, #23]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	75fa      	strb	r2, [r7, #23]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4413      	add	r3, r2
 8007e34:	2203      	movs	r2, #3
 8007e36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e38:	e012      	b.n	8007e60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	60fa      	str	r2, [r7, #12]
 8007e40:	7dfa      	ldrb	r2, [r7, #23]
 8007e42:	1c51      	adds	r1, r2, #1
 8007e44:	75f9      	strb	r1, [r7, #23]
 8007e46:	4611      	mov	r1, r2
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	75fa      	strb	r2, [r7, #23]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e8      	bne.n	8007e3a <USBD_GetString+0x4e>
    }
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e7c:	e005      	b.n	8007e8a <USBD_GetLen+0x1a>
  {
    len++;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	3301      	adds	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3301      	adds	r3, #1
 8007e88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f5      	bne.n	8007e7e <USBD_GetLen+0xe>
  }

  return len;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr

08007e9e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 fcc8 	bl	800885c <USBD_LL_Transmit>

  return USBD_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fcb6 	bl	800885c <USBD_LL_Transmit>

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fcbb 	bl	80088a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	4613      	mov	r3, r2
 8007f42:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fca9 	bl	80088a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2204      	movs	r2, #4
 8007f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fc73 	bl	800885c <USBD_LL_Transmit>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f90:	2300      	movs	r3, #0
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fc83 	bl	80088a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007fb2:	887b      	ldrh	r3, [r7, #2]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8c2 	bl	8008140 <CDC_Transmit_FS>
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4912      	ldr	r1, [pc, #72]	; (8008014 <MX_USB_DEVICE_Init+0x50>)
 8007fcc:	4812      	ldr	r0, [pc, #72]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fce:	f7fe ff18 	bl	8006e02 <USBD_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fd8:	f7f9 fae6 	bl	80015a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fdc:	490f      	ldr	r1, [pc, #60]	; (800801c <MX_USB_DEVICE_Init+0x58>)
 8007fde:	480e      	ldr	r0, [pc, #56]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fe0:	f7fe ff3a 	bl	8006e58 <USBD_RegisterClass>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fea:	f7f9 fadd 	bl	80015a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fee:	490c      	ldr	r1, [pc, #48]	; (8008020 <MX_USB_DEVICE_Init+0x5c>)
 8007ff0:	4809      	ldr	r0, [pc, #36]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007ff2:	f7fe fe6b 	bl	8006ccc <USBD_CDC_RegisterInterface>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ffc:	f7f9 fad4 	bl	80015a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8008002:	f7fe ff42 	bl	8006e8a <USBD_Start>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800800c:	f7f9 facc 	bl	80015a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008010:	bf00      	nop
 8008012:	bd80      	pop	{r7, pc}
 8008014:	2000012c 	.word	0x2000012c
 8008018:	20000344 	.word	0x20000344
 800801c:	20000018 	.word	0x20000018
 8008020:	2000011c 	.word	0x2000011c

08008024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008028:	2200      	movs	r2, #0
 800802a:	4905      	ldr	r1, [pc, #20]	; (8008040 <CDC_Init_FS+0x1c>)
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <CDC_Init_FS+0x20>)
 800802e:	f7fe fe63 	bl	8006cf8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008032:	4905      	ldr	r1, [pc, #20]	; (8008048 <CDC_Init_FS+0x24>)
 8008034:	4803      	ldr	r0, [pc, #12]	; (8008044 <CDC_Init_FS+0x20>)
 8008036:	f7fe fe78 	bl	8006d2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800803a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000a08 	.word	0x20000a08
 8008044:	20000344 	.word	0x20000344
 8008048:	20000608 	.word	0x20000608

0800804c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
	...

0800805c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	4613      	mov	r3, r2
 800806a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b23      	cmp	r3, #35	; 0x23
 8008070:	d84a      	bhi.n	8008108 <CDC_Control_FS+0xac>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <CDC_Control_FS+0x1c>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008109 	.word	0x08008109
 800807c:	08008109 	.word	0x08008109
 8008080:	08008109 	.word	0x08008109
 8008084:	08008109 	.word	0x08008109
 8008088:	08008109 	.word	0x08008109
 800808c:	08008109 	.word	0x08008109
 8008090:	08008109 	.word	0x08008109
 8008094:	08008109 	.word	0x08008109
 8008098:	08008109 	.word	0x08008109
 800809c:	08008109 	.word	0x08008109
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008109 	.word	0x08008109
 80080a8:	08008109 	.word	0x08008109
 80080ac:	08008109 	.word	0x08008109
 80080b0:	08008109 	.word	0x08008109
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008109 	.word	0x08008109
 80080bc:	08008109 	.word	0x08008109
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008109 	.word	0x08008109
 80080c8:	08008109 	.word	0x08008109
 80080cc:	08008109 	.word	0x08008109
 80080d0:	08008109 	.word	0x08008109
 80080d4:	08008109 	.word	0x08008109
 80080d8:	08008109 	.word	0x08008109
 80080dc:	08008109 	.word	0x08008109
 80080e0:	08008109 	.word	0x08008109
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008109 	.word	0x08008109
 80080ec:	08008109 	.word	0x08008109
 80080f0:	08008109 	.word	0x08008109
 80080f4:	08008109 	.word	0x08008109
 80080f8:	08008109 	.word	0x08008109
 80080fc:	08008109 	.word	0x08008109
 8008100:	08008109 	.word	0x08008109
 8008104:	08008109 	.word	0x08008109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008108:	bf00      	nop
  }

  return (USBD_OK);
 800810a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop

08008118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	4805      	ldr	r0, [pc, #20]	; (800813c <CDC_Receive_FS+0x24>)
 8008126:	f7fe fe00 	bl	8006d2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800812a:	4804      	ldr	r0, [pc, #16]	; (800813c <CDC_Receive_FS+0x24>)
 800812c:	f7fe fe3f 	bl	8006dae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000344 	.word	0x20000344

08008140 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <CDC_Transmit_FS+0x48>)
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008162:	2301      	movs	r3, #1
 8008164:	e00b      	b.n	800817e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008166:	887b      	ldrh	r3, [r7, #2]
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4806      	ldr	r0, [pc, #24]	; (8008188 <CDC_Transmit_FS+0x48>)
 800816e:	f7fe fdc3 	bl	8006cf8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008172:	4805      	ldr	r0, [pc, #20]	; (8008188 <CDC_Transmit_FS+0x48>)
 8008174:	f7fe fdec 	bl	8006d50 <USBD_CDC_TransmitPacket>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000344 	.word	0x20000344

0800818c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2212      	movs	r2, #18
 800819c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000148 	.word	0x20000148

080081b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2204      	movs	r2, #4
 80081c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081c2:	4b03      	ldr	r3, [pc, #12]	; (80081d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	2000015c 	.word	0x2000015c

080081d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <USBD_FS_ProductStrDescriptor+0x38>)
 80081ec:	f7ff fdfe 	bl	8007dec <USBD_GetString>
 80081f0:	e004      	b.n	80081fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <USBD_FS_ProductStrDescriptor+0x38>)
 80081f8:	f7ff fdf8 	bl	8007dec <USBD_GetString>
  }
  return USBD_StrDesc;
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000e08 	.word	0x20000e08
 800820c:	08009368 	.word	0x08009368

08008210 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008220:	4804      	ldr	r0, [pc, #16]	; (8008234 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008222:	f7ff fde3 	bl	8007dec <USBD_GetString>
  return USBD_StrDesc;
 8008226:	4b02      	ldr	r3, [pc, #8]	; (8008230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000e08 	.word	0x20000e08
 8008234:	08009380 	.word	0x08009380

08008238 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	221a      	movs	r2, #26
 8008248:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800824a:	f000 f843 	bl	80082d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800824e:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000160 	.word	0x20000160

0800825c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4907      	ldr	r1, [pc, #28]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008272:	4808      	ldr	r0, [pc, #32]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008274:	f7ff fdba 	bl	8007dec <USBD_GetString>
 8008278:	e004      	b.n	8008284 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4904      	ldr	r1, [pc, #16]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008280:	f7ff fdb4 	bl	8007dec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000e08 	.word	0x20000e08
 8008294:	08009394 	.word	0x08009394

08008298 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4907      	ldr	r1, [pc, #28]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ae:	4808      	ldr	r0, [pc, #32]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082b0:	f7ff fd9c 	bl	8007dec <USBD_GetString>
 80082b4:	e004      	b.n	80082c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4904      	ldr	r1, [pc, #16]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ba:	4805      	ldr	r0, [pc, #20]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082bc:	f7ff fd96 	bl	8007dec <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000e08 	.word	0x20000e08
 80082d0:	080093a0 	.word	0x080093a0

080082d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <Get_SerialNum+0x44>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082e0:	4b0e      	ldr	r3, [pc, #56]	; (800831c <Get_SerialNum+0x48>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082e6:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <Get_SerialNum+0x4c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082fa:	2208      	movs	r2, #8
 80082fc:	4909      	ldr	r1, [pc, #36]	; (8008324 <Get_SerialNum+0x50>)
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f814 	bl	800832c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008304:	2204      	movs	r2, #4
 8008306:	4908      	ldr	r1, [pc, #32]	; (8008328 <Get_SerialNum+0x54>)
 8008308:	68b8      	ldr	r0, [r7, #8]
 800830a:	f000 f80f 	bl	800832c <IntToUnicode>
  }
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	1ffff7e8 	.word	0x1ffff7e8
 800831c:	1ffff7ec 	.word	0x1ffff7ec
 8008320:	1ffff7f0 	.word	0x1ffff7f0
 8008324:	20000162 	.word	0x20000162
 8008328:	20000172 	.word	0x20000172

0800832c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]
 8008342:	e027      	b.n	8008394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	0f1b      	lsrs	r3, r3, #28
 8008348:	2b09      	cmp	r3, #9
 800834a:	d80b      	bhi.n	8008364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	b2da      	uxtb	r2, r3
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4619      	mov	r1, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	440b      	add	r3, r1
 800835c:	3230      	adds	r2, #48	; 0x30
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	e00a      	b.n	800837a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	0f1b      	lsrs	r3, r3, #28
 8008368:	b2da      	uxtb	r2, r3
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	4619      	mov	r1, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	440b      	add	r3, r1
 8008374:	3237      	adds	r2, #55	; 0x37
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	3301      	adds	r3, #1
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	3301      	adds	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
 8008394:	7dfa      	ldrb	r2, [r7, #23]
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d3d3      	bcc.n	8008344 <IntToUnicode+0x18>
  }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b0:	f107 0310 	add.w	r3, r7, #16
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c6:	d12c      	bne.n	8008422 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c8:	4b18      	ldr	r3, [pc, #96]	; (800842c <HAL_PCD_MspInit+0x84>)
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	4a17      	ldr	r2, [pc, #92]	; (800842c <HAL_PCD_MspInit+0x84>)
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	6193      	str	r3, [r2, #24]
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <HAL_PCD_MspInit+0x84>)
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80083e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ee:	f107 0310 	add.w	r3, r7, #16
 80083f2:	4619      	mov	r1, r3
 80083f4:	480e      	ldr	r0, [pc, #56]	; (8008430 <HAL_PCD_MspInit+0x88>)
 80083f6:	f7fa f867 	bl	80024c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <HAL_PCD_MspInit+0x84>)
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	4a0b      	ldr	r2, [pc, #44]	; (800842c <HAL_PCD_MspInit+0x84>)
 8008400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008404:	6153      	str	r3, [r2, #20]
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <HAL_PCD_MspInit+0x84>)
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	2043      	movs	r0, #67	; 0x43
 8008418:	f7fa f81f 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800841c:	2043      	movs	r0, #67	; 0x43
 800841e:	f7fa f838 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008422:	bf00      	nop
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40021000 	.word	0x40021000
 8008430:	40010800 	.word	0x40010800

08008434 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fd65 	bl	8006f1a <USBD_LL_SetupStage>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	4619      	mov	r1, r3
 8008482:	f7fe fd97 	bl	8006fb4 <USBD_LL_DataOutStage>
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	3348      	adds	r3, #72	; 0x48
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	4619      	mov	r1, r3
 80084b6:	f7fe fdee 	bl	8007096 <USBD_LL_DataInStage>
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fefe 	bl	80072d2 <USBD_LL_SOF>
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084e6:	2301      	movs	r3, #1
 80084e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d001      	beq.n	80084f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084f2:	f7f9 f859 	bl	80015a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80084fc:	7bfa      	ldrb	r2, [r7, #15]
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe feae 	bl	8007262 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fe67 	bl	80071e0 <USBD_LL_Reset>
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fea8 	bl	8007280 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <HAL_PCD_SuspendCallback+0x48>)
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	4a03      	ldr	r2, [pc, #12]	; (8008564 <HAL_PCD_SuspendCallback+0x48>)
 8008556:	f043 0306 	orr.w	r3, r3, #6
 800855a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fe96 	bl	80072a8 <USBD_LL_Resume>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe febf 	bl	800731e <USBD_LL_IsoOUTIncomplete>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fea1 	bl	8007306 <USBD_LL_IsoINIncomplete>
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe feab 	bl	8007336 <USBD_LL_DevConnected>
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fea7 	bl	800734a <USBD_LL_DevDisconnected>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d133      	bne.n	800867c <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008614:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <USBD_LL_Init+0x84>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a1a      	ldr	r2, [pc, #104]	; (8008688 <USBD_LL_Init+0x84>)
 8008620:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008624:	4b18      	ldr	r3, [pc, #96]	; (8008688 <USBD_LL_Init+0x84>)
 8008626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800862a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800862c:	4b16      	ldr	r3, [pc, #88]	; (8008688 <USBD_LL_Init+0x84>)
 800862e:	2204      	movs	r2, #4
 8008630:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <USBD_LL_Init+0x84>)
 8008634:	2202      	movs	r2, #2
 8008636:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008638:	4b13      	ldr	r3, [pc, #76]	; (8008688 <USBD_LL_Init+0x84>)
 800863a:	2202      	movs	r2, #2
 800863c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <USBD_LL_Init+0x84>)
 8008640:	2200      	movs	r2, #0
 8008642:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008644:	4b10      	ldr	r3, [pc, #64]	; (8008688 <USBD_LL_Init+0x84>)
 8008646:	2200      	movs	r2, #0
 8008648:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <USBD_LL_Init+0x84>)
 800864c:	2201      	movs	r2, #1
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008650:	480d      	ldr	r0, [pc, #52]	; (8008688 <USBD_LL_Init+0x84>)
 8008652:	f7fa f8ee 	bl	8002832 <HAL_PCD_Init>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800865c:	f7f8 ffa4 	bl	80015a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008660:	2180      	movs	r1, #128	; 0x80
 8008662:	4809      	ldr	r0, [pc, #36]	; (8008688 <USBD_LL_Init+0x84>)
 8008664:	f7fb fa06 	bl	8003a74 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008668:	2240      	movs	r2, #64	; 0x40
 800866a:	2100      	movs	r1, #0
 800866c:	4806      	ldr	r0, [pc, #24]	; (8008688 <USBD_LL_Init+0x84>)
 800866e:	f7fb f9bb 	bl	80039e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008672:	2280      	movs	r2, #128	; 0x80
 8008674:	2101      	movs	r1, #1
 8008676:	4804      	ldr	r0, [pc, #16]	; (8008688 <USBD_LL_Init+0x84>)
 8008678:	f7fb f9b6 	bl	80039e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20001008 	.word	0x20001008

0800868c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fa f9e2 	bl	8002a6c <HAL_PCD_Start>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f944 	bl	800893c <USBD_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	461a      	mov	r2, r3
 80086d0:	4603      	mov	r3, r0
 80086d2:	70fb      	strb	r3, [r7, #3]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70bb      	strb	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086ea:	78bb      	ldrb	r3, [r7, #2]
 80086ec:	883a      	ldrh	r2, [r7, #0]
 80086ee:	78f9      	ldrb	r1, [r7, #3]
 80086f0:	f7fa fe5b 	bl	80033aa <HAL_PCD_EP_Open>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f91e 	bl	800893c <USBD_Get_USB_Status>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008704:	7bbb      	ldrb	r3, [r7, #14]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7fa fea4 	bl	800347a <HAL_PCD_EP_Close>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f8ff 	bl	800893c <USBD_Get_USB_Status>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008742:	7bbb      	ldrb	r3, [r7, #14]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7fa ff49 	bl	8003602 <HAL_PCD_EP_SetStall>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f8e0 	bl	800893c <USBD_Get_USB_Status>
 800877c:	4603      	mov	r3, r0
 800877e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008780:	7bbb      	ldrb	r3, [r7, #14]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fa ff8c 	bl	80036c6 <HAL_PCD_EP_ClrStall>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 f8c1 	bl	800893c <USBD_Get_USB_Status>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087be:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0b      	bge.n	80087fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	333e      	adds	r3, #62	; 0x3e
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	e00b      	b.n	8008814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008812:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fa fd8f 	bl	8003360 <HAL_PCD_SetAddress>
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f877 	bl	800893c <USBD_Get_USB_Status>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008852:	7bbb      	ldrb	r3, [r7, #14]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	461a      	mov	r2, r3
 8008868:	460b      	mov	r3, r1
 800886a:	72fb      	strb	r3, [r7, #11]
 800886c:	4613      	mov	r3, r2
 800886e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800887e:	893b      	ldrh	r3, [r7, #8]
 8008880:	7af9      	ldrb	r1, [r7, #11]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	f7fa fe8c 	bl	80035a0 <HAL_PCD_EP_Transmit>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f854 	bl	800893c <USBD_Get_USB_Status>
 8008894:	4603      	mov	r3, r0
 8008896:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008898:	7dbb      	ldrb	r3, [r7, #22]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	461a      	mov	r2, r3
 80088ae:	460b      	mov	r3, r1
 80088b0:	72fb      	strb	r3, [r7, #11]
 80088b2:	4613      	mov	r3, r2
 80088b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088c4:	893b      	ldrh	r3, [r7, #8]
 80088c6:	7af9      	ldrb	r1, [r7, #11]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	f7fa fe20 	bl	800350e <HAL_PCD_EP_Receive>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f831 	bl	800893c <USBD_Get_USB_Status>
 80088da:	4603      	mov	r3, r0
 80088dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088de:	7dbb      	ldrb	r3, [r7, #22]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fa fe37 	bl	8003572 <HAL_PCD_EP_GetRxCount>
 8008904:	4603      	mov	r3, r0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <USBD_static_malloc+0x14>)
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr
 8008924:	2000150c 	.word	0x2000150c

08008928 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]

}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
	...

0800893c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d817      	bhi.n	8008980 <USBD_Get_USB_Status+0x44>
 8008950:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <USBD_Get_USB_Status+0x1c>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	08008969 	.word	0x08008969
 800895c:	0800896f 	.word	0x0800896f
 8008960:	08008975 	.word	0x08008975
 8008964:	0800897b 	.word	0x0800897b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
    break;
 800896c:	e00b      	b.n	8008986 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800896e:	2302      	movs	r3, #2
 8008970:	73fb      	strb	r3, [r7, #15]
    break;
 8008972:	e008      	b.n	8008986 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008974:	2301      	movs	r3, #1
 8008976:	73fb      	strb	r3, [r7, #15]
    break;
 8008978:	e005      	b.n	8008986 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800897a:	2302      	movs	r3, #2
 800897c:	73fb      	strb	r3, [r7, #15]
    break;
 800897e:	e002      	b.n	8008986 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008980:	2302      	movs	r3, #2
 8008982:	73fb      	strb	r3, [r7, #15]
    break;
 8008984:	bf00      	nop
  }
  return usb_status;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <malloc>:
 8008994:	4b02      	ldr	r3, [pc, #8]	; (80089a0 <malloc+0xc>)
 8008996:	4601      	mov	r1, r0
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	f000 b82b 	b.w	80089f4 <_malloc_r>
 800899e:	bf00      	nop
 80089a0:	200001c8 	.word	0x200001c8

080089a4 <free>:
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <free+0xc>)
 80089a6:	4601      	mov	r1, r0
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f000 b935 	b.w	8008c18 <_free_r>
 80089ae:	bf00      	nop
 80089b0:	200001c8 	.word	0x200001c8

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0e      	ldr	r6, [pc, #56]	; (80089f0 <sbrk_aligned+0x3c>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	4605      	mov	r5, r0
 80089be:	b911      	cbnz	r1, 80089c6 <sbrk_aligned+0x12>
 80089c0:	f000 f8e0 	bl	8008b84 <_sbrk_r>
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f8db 	bl	8008b84 <_sbrk_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d00a      	beq.n	80089e8 <sbrk_aligned+0x34>
 80089d2:	1cc4      	adds	r4, r0, #3
 80089d4:	f024 0403 	bic.w	r4, r4, #3
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d007      	beq.n	80089ec <sbrk_aligned+0x38>
 80089dc:	1a21      	subs	r1, r4, r0
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f8d0 	bl	8008b84 <_sbrk_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d101      	bne.n	80089ec <sbrk_aligned+0x38>
 80089e8:	f04f 34ff 	mov.w	r4, #4294967295
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	20001730 	.word	0x20001730

080089f4 <_malloc_r>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	1ccd      	adds	r5, r1, #3
 80089fa:	f025 0503 	bic.w	r5, r5, #3
 80089fe:	3508      	adds	r5, #8
 8008a00:	2d0c      	cmp	r5, #12
 8008a02:	bf38      	it	cc
 8008a04:	250c      	movcc	r5, #12
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	4607      	mov	r7, r0
 8008a0a:	db01      	blt.n	8008a10 <_malloc_r+0x1c>
 8008a0c:	42a9      	cmp	r1, r5
 8008a0e:	d905      	bls.n	8008a1c <_malloc_r+0x28>
 8008a10:	230c      	movs	r3, #12
 8008a12:	2600      	movs	r6, #0
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4630      	mov	r0, r6
 8008a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008af0 <_malloc_r+0xfc>
 8008a20:	f000 f868 	bl	8008af4 <__malloc_lock>
 8008a24:	f8d8 3000 	ldr.w	r3, [r8]
 8008a28:	461c      	mov	r4, r3
 8008a2a:	bb5c      	cbnz	r4, 8008a84 <_malloc_r+0x90>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f7ff ffc0 	bl	80089b4 <sbrk_aligned>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	4604      	mov	r4, r0
 8008a38:	d155      	bne.n	8008ae6 <_malloc_r+0xf2>
 8008a3a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a3e:	4626      	mov	r6, r4
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d145      	bne.n	8008ad0 <_malloc_r+0xdc>
 8008a44:	2c00      	cmp	r4, #0
 8008a46:	d048      	beq.n	8008ada <_malloc_r+0xe6>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	eb04 0903 	add.w	r9, r4, r3
 8008a52:	f000 f897 	bl	8008b84 <_sbrk_r>
 8008a56:	4581      	cmp	r9, r0
 8008a58:	d13f      	bne.n	8008ada <_malloc_r+0xe6>
 8008a5a:	6821      	ldr	r1, [r4, #0]
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	1a6d      	subs	r5, r5, r1
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7ff ffa7 	bl	80089b4 <sbrk_aligned>
 8008a66:	3001      	adds	r0, #1
 8008a68:	d037      	beq.n	8008ada <_malloc_r+0xe6>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	442b      	add	r3, r5
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	f8d8 3000 	ldr.w	r3, [r8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d038      	beq.n	8008aea <_malloc_r+0xf6>
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	42a2      	cmp	r2, r4
 8008a7c:	d12b      	bne.n	8008ad6 <_malloc_r+0xe2>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	605a      	str	r2, [r3, #4]
 8008a82:	e00f      	b.n	8008aa4 <_malloc_r+0xb0>
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	1b52      	subs	r2, r2, r5
 8008a88:	d41f      	bmi.n	8008aca <_malloc_r+0xd6>
 8008a8a:	2a0b      	cmp	r2, #11
 8008a8c:	d917      	bls.n	8008abe <_malloc_r+0xca>
 8008a8e:	1961      	adds	r1, r4, r5
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	6025      	str	r5, [r4, #0]
 8008a94:	bf18      	it	ne
 8008a96:	6059      	strne	r1, [r3, #4]
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	bf08      	it	eq
 8008a9c:	f8c8 1000 	streq.w	r1, [r8]
 8008aa0:	5162      	str	r2, [r4, r5]
 8008aa2:	604b      	str	r3, [r1, #4]
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f104 060b 	add.w	r6, r4, #11
 8008aaa:	f000 f829 	bl	8008b00 <__malloc_unlock>
 8008aae:	f026 0607 	bic.w	r6, r6, #7
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	1af2      	subs	r2, r6, r3
 8008ab6:	d0ae      	beq.n	8008a16 <_malloc_r+0x22>
 8008ab8:	1b9b      	subs	r3, r3, r6
 8008aba:	50a3      	str	r3, [r4, r2]
 8008abc:	e7ab      	b.n	8008a16 <_malloc_r+0x22>
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6862      	ldr	r2, [r4, #4]
 8008ac2:	d1dd      	bne.n	8008a80 <_malloc_r+0x8c>
 8008ac4:	f8c8 2000 	str.w	r2, [r8]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xb0>
 8008aca:	4623      	mov	r3, r4
 8008acc:	6864      	ldr	r4, [r4, #4]
 8008ace:	e7ac      	b.n	8008a2a <_malloc_r+0x36>
 8008ad0:	4634      	mov	r4, r6
 8008ad2:	6876      	ldr	r6, [r6, #4]
 8008ad4:	e7b4      	b.n	8008a40 <_malloc_r+0x4c>
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	e7cc      	b.n	8008a74 <_malloc_r+0x80>
 8008ada:	230c      	movs	r3, #12
 8008adc:	4638      	mov	r0, r7
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	f000 f80e 	bl	8008b00 <__malloc_unlock>
 8008ae4:	e797      	b.n	8008a16 <_malloc_r+0x22>
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	e7dc      	b.n	8008aa4 <_malloc_r+0xb0>
 8008aea:	605b      	str	r3, [r3, #4]
 8008aec:	deff      	udf	#255	; 0xff
 8008aee:	bf00      	nop
 8008af0:	2000172c 	.word	0x2000172c

08008af4 <__malloc_lock>:
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <__malloc_lock+0x8>)
 8008af6:	f000 b87f 	b.w	8008bf8 <__retarget_lock_acquire_recursive>
 8008afa:	bf00      	nop
 8008afc:	20001870 	.word	0x20001870

08008b00 <__malloc_unlock>:
 8008b00:	4801      	ldr	r0, [pc, #4]	; (8008b08 <__malloc_unlock+0x8>)
 8008b02:	f000 b87a 	b.w	8008bfa <__retarget_lock_release_recursive>
 8008b06:	bf00      	nop
 8008b08:	20001870 	.word	0x20001870

08008b0c <siprintf>:
 8008b0c:	b40e      	push	{r1, r2, r3}
 8008b0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b12:	b500      	push	{lr}
 8008b14:	b09c      	sub	sp, #112	; 0x70
 8008b16:	ab1d      	add	r3, sp, #116	; 0x74
 8008b18:	9002      	str	r0, [sp, #8]
 8008b1a:	9006      	str	r0, [sp, #24]
 8008b1c:	9107      	str	r1, [sp, #28]
 8008b1e:	9104      	str	r1, [sp, #16]
 8008b20:	4808      	ldr	r0, [pc, #32]	; (8008b44 <siprintf+0x38>)
 8008b22:	4909      	ldr	r1, [pc, #36]	; (8008b48 <siprintf+0x3c>)
 8008b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b28:	9105      	str	r1, [sp, #20]
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	a902      	add	r1, sp, #8
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f000 f914 	bl	8008d5c <_svfiprintf_r>
 8008b34:	2200      	movs	r2, #0
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	b01c      	add	sp, #112	; 0x70
 8008b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b40:	b003      	add	sp, #12
 8008b42:	4770      	bx	lr
 8008b44:	200001c8 	.word	0x200001c8
 8008b48:	ffff0208 	.word	0xffff0208

08008b4c <memset>:
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	4402      	add	r2, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d100      	bne.n	8008b56 <memset+0xa>
 8008b54:	4770      	bx	lr
 8008b56:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5a:	e7f9      	b.n	8008b50 <memset+0x4>

08008b5c <strncat>:
 8008b5c:	b530      	push	{r4, r5, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	7825      	ldrb	r5, [r4, #0]
 8008b62:	4623      	mov	r3, r4
 8008b64:	3401      	adds	r4, #1
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	d1fa      	bne.n	8008b60 <strncat+0x4>
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	d304      	bcc.n	8008b78 <strncat+0x1c>
 8008b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b72:	f803 4b01 	strb.w	r4, [r3], #1
 8008b76:	b904      	cbnz	r4, 8008b7a <strncat+0x1e>
 8008b78:	bd30      	pop	{r4, r5, pc}
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d1f5      	bne.n	8008b6a <strncat+0xe>
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e7f3      	b.n	8008b6a <strncat+0xe>
	...

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	2300      	movs	r3, #0
 8008b88:	4d05      	ldr	r5, [pc, #20]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f8 fe0c 	bl	80017ac <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2000186c 	.word	0x2000186c

08008ba4 <__errno>:
 8008ba4:	4b01      	ldr	r3, [pc, #4]	; (8008bac <__errno+0x8>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	200001c8 	.word	0x200001c8

08008bb0 <__libc_init_array>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	4d0c      	ldr	r5, [pc, #48]	; (8008be8 <__libc_init_array+0x38>)
 8008bb6:	4c0d      	ldr	r4, [pc, #52]	; (8008bec <__libc_init_array+0x3c>)
 8008bb8:	1b64      	subs	r4, r4, r5
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	42a6      	cmp	r6, r4
 8008bbe:	d109      	bne.n	8008bd4 <__libc_init_array+0x24>
 8008bc0:	f000 fbbe 	bl	8009340 <_init>
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	4d0a      	ldr	r5, [pc, #40]	; (8008bf0 <__libc_init_array+0x40>)
 8008bc8:	4c0a      	ldr	r4, [pc, #40]	; (8008bf4 <__libc_init_array+0x44>)
 8008bca:	1b64      	subs	r4, r4, r5
 8008bcc:	10a4      	asrs	r4, r4, #2
 8008bce:	42a6      	cmp	r6, r4
 8008bd0:	d105      	bne.n	8008bde <__libc_init_array+0x2e>
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd8:	4798      	blx	r3
 8008bda:	3601      	adds	r6, #1
 8008bdc:	e7ee      	b.n	8008bbc <__libc_init_array+0xc>
 8008bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be2:	4798      	blx	r3
 8008be4:	3601      	adds	r6, #1
 8008be6:	e7f2      	b.n	8008bce <__libc_init_array+0x1e>
 8008be8:	08009820 	.word	0x08009820
 8008bec:	08009820 	.word	0x08009820
 8008bf0:	08009820 	.word	0x08009820
 8008bf4:	08009824 	.word	0x08009824

08008bf8 <__retarget_lock_acquire_recursive>:
 8008bf8:	4770      	bx	lr

08008bfa <__retarget_lock_release_recursive>:
 8008bfa:	4770      	bx	lr

08008bfc <memcpy>:
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c04:	d100      	bne.n	8008c08 <memcpy+0xc>
 8008c06:	4770      	bx	lr
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0e:	4291      	cmp	r1, r2
 8008c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c14:	d1f9      	bne.n	8008c0a <memcpy+0xe>
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <_free_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d040      	beq.n	8008ca2 <_free_r+0x8a>
 8008c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c24:	1f0c      	subs	r4, r1, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfb8      	it	lt
 8008c2a:	18e4      	addlt	r4, r4, r3
 8008c2c:	f7ff ff62 	bl	8008af4 <__malloc_lock>
 8008c30:	4a1c      	ldr	r2, [pc, #112]	; (8008ca4 <_free_r+0x8c>)
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	b933      	cbnz	r3, 8008c44 <_free_r+0x2c>
 8008c36:	6063      	str	r3, [r4, #4]
 8008c38:	6014      	str	r4, [r2, #0]
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c40:	f7ff bf5e 	b.w	8008b00 <__malloc_unlock>
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	d908      	bls.n	8008c5a <_free_r+0x42>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	1821      	adds	r1, r4, r0
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	bf01      	itttt	eq
 8008c50:	6819      	ldreq	r1, [r3, #0]
 8008c52:	685b      	ldreq	r3, [r3, #4]
 8008c54:	1809      	addeq	r1, r1, r0
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	e7ed      	b.n	8008c36 <_free_r+0x1e>
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b10b      	cbz	r3, 8008c64 <_free_r+0x4c>
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d9fa      	bls.n	8008c5a <_free_r+0x42>
 8008c64:	6811      	ldr	r1, [r2, #0]
 8008c66:	1850      	adds	r0, r2, r1
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d10b      	bne.n	8008c84 <_free_r+0x6c>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	4401      	add	r1, r0
 8008c70:	1850      	adds	r0, r2, r1
 8008c72:	4283      	cmp	r3, r0
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	d1e0      	bne.n	8008c3a <_free_r+0x22>
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4408      	add	r0, r1
 8008c7e:	6010      	str	r0, [r2, #0]
 8008c80:	6053      	str	r3, [r2, #4]
 8008c82:	e7da      	b.n	8008c3a <_free_r+0x22>
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x74>
 8008c86:	230c      	movs	r3, #12
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	e7d6      	b.n	8008c3a <_free_r+0x22>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	1821      	adds	r1, r4, r0
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf01      	itttt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	1809      	addeq	r1, r1, r0
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	6054      	str	r4, [r2, #4]
 8008ca0:	e7cb      	b.n	8008c3a <_free_r+0x22>
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	2000172c 	.word	0x2000172c

08008ca8 <__ssputs_r>:
 8008ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	461f      	mov	r7, r3
 8008cae:	688e      	ldr	r6, [r1, #8]
 8008cb0:	4682      	mov	sl, r0
 8008cb2:	42be      	cmp	r6, r7
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4690      	mov	r8, r2
 8008cb8:	680b      	ldr	r3, [r1, #0]
 8008cba:	d82c      	bhi.n	8008d16 <__ssputs_r+0x6e>
 8008cbc:	898a      	ldrh	r2, [r1, #12]
 8008cbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cc2:	d026      	beq.n	8008d12 <__ssputs_r+0x6a>
 8008cc4:	6965      	ldr	r5, [r4, #20]
 8008cc6:	6909      	ldr	r1, [r1, #16]
 8008cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ccc:	eba3 0901 	sub.w	r9, r3, r1
 8008cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cd4:	1c7b      	adds	r3, r7, #1
 8008cd6:	444b      	add	r3, r9
 8008cd8:	106d      	asrs	r5, r5, #1
 8008cda:	429d      	cmp	r5, r3
 8008cdc:	bf38      	it	cc
 8008cde:	461d      	movcc	r5, r3
 8008ce0:	0553      	lsls	r3, r2, #21
 8008ce2:	d527      	bpl.n	8008d34 <__ssputs_r+0x8c>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7ff fe85 	bl	80089f4 <_malloc_r>
 8008cea:	4606      	mov	r6, r0
 8008cec:	b360      	cbz	r0, 8008d48 <__ssputs_r+0xa0>
 8008cee:	464a      	mov	r2, r9
 8008cf0:	6921      	ldr	r1, [r4, #16]
 8008cf2:	f7ff ff83 	bl	8008bfc <memcpy>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	6126      	str	r6, [r4, #16]
 8008d04:	444e      	add	r6, r9
 8008d06:	6026      	str	r6, [r4, #0]
 8008d08:	463e      	mov	r6, r7
 8008d0a:	6165      	str	r5, [r4, #20]
 8008d0c:	eba5 0509 	sub.w	r5, r5, r9
 8008d10:	60a5      	str	r5, [r4, #8]
 8008d12:	42be      	cmp	r6, r7
 8008d14:	d900      	bls.n	8008d18 <__ssputs_r+0x70>
 8008d16:	463e      	mov	r6, r7
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	f000 faaf 	bl	8009280 <memmove>
 8008d22:	2000      	movs	r0, #0
 8008d24:	68a3      	ldr	r3, [r4, #8]
 8008d26:	1b9b      	subs	r3, r3, r6
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	4433      	add	r3, r6
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d34:	462a      	mov	r2, r5
 8008d36:	f000 facb 	bl	80092d0 <_realloc_r>
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d1e0      	bne.n	8008d02 <__ssputs_r+0x5a>
 8008d40:	4650      	mov	r0, sl
 8008d42:	6921      	ldr	r1, [r4, #16]
 8008d44:	f7ff ff68 	bl	8008c18 <_free_r>
 8008d48:	230c      	movs	r3, #12
 8008d4a:	f8ca 3000 	str.w	r3, [sl]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	e7e9      	b.n	8008d30 <__ssputs_r+0x88>

08008d5c <_svfiprintf_r>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	4698      	mov	r8, r3
 8008d62:	898b      	ldrh	r3, [r1, #12]
 8008d64:	4607      	mov	r7, r0
 8008d66:	061b      	lsls	r3, r3, #24
 8008d68:	460d      	mov	r5, r1
 8008d6a:	4614      	mov	r4, r2
 8008d6c:	b09d      	sub	sp, #116	; 0x74
 8008d6e:	d50e      	bpl.n	8008d8e <_svfiprintf_r+0x32>
 8008d70:	690b      	ldr	r3, [r1, #16]
 8008d72:	b963      	cbnz	r3, 8008d8e <_svfiprintf_r+0x32>
 8008d74:	2140      	movs	r1, #64	; 0x40
 8008d76:	f7ff fe3d 	bl	80089f4 <_malloc_r>
 8008d7a:	6028      	str	r0, [r5, #0]
 8008d7c:	6128      	str	r0, [r5, #16]
 8008d7e:	b920      	cbnz	r0, 8008d8a <_svfiprintf_r+0x2e>
 8008d80:	230c      	movs	r3, #12
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	e0d0      	b.n	8008f2c <_svfiprintf_r+0x1d0>
 8008d8a:	2340      	movs	r3, #64	; 0x40
 8008d8c:	616b      	str	r3, [r5, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9309      	str	r3, [sp, #36]	; 0x24
 8008d92:	2320      	movs	r3, #32
 8008d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d98:	2330      	movs	r3, #48	; 0x30
 8008d9a:	f04f 0901 	mov.w	r9, #1
 8008d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008f44 <_svfiprintf_r+0x1e8>
 8008da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008daa:	4623      	mov	r3, r4
 8008dac:	469a      	mov	sl, r3
 8008dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db2:	b10a      	cbz	r2, 8008db8 <_svfiprintf_r+0x5c>
 8008db4:	2a25      	cmp	r2, #37	; 0x25
 8008db6:	d1f9      	bne.n	8008dac <_svfiprintf_r+0x50>
 8008db8:	ebba 0b04 	subs.w	fp, sl, r4
 8008dbc:	d00b      	beq.n	8008dd6 <_svfiprintf_r+0x7a>
 8008dbe:	465b      	mov	r3, fp
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff ff6f 	bl	8008ca8 <__ssputs_r>
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f000 80a9 	beq.w	8008f22 <_svfiprintf_r+0x1c6>
 8008dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd2:	445a      	add	r2, fp
 8008dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 80a1 	beq.w	8008f22 <_svfiprintf_r+0x1c6>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295
 8008de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dea:	f10a 0a01 	add.w	sl, sl, #1
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	9307      	str	r3, [sp, #28]
 8008df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df6:	931a      	str	r3, [sp, #104]	; 0x68
 8008df8:	4654      	mov	r4, sl
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	4850      	ldr	r0, [pc, #320]	; (8008f44 <_svfiprintf_r+0x1e8>)
 8008e02:	f000 fa57 	bl	80092b4 <memchr>
 8008e06:	9a04      	ldr	r2, [sp, #16]
 8008e08:	b9d8      	cbnz	r0, 8008e42 <_svfiprintf_r+0xe6>
 8008e0a:	06d0      	lsls	r0, r2, #27
 8008e0c:	bf44      	itt	mi
 8008e0e:	2320      	movmi	r3, #32
 8008e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e14:	0711      	lsls	r1, r2, #28
 8008e16:	bf44      	itt	mi
 8008e18:	232b      	movmi	r3, #43	; 0x2b
 8008e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e22:	2b2a      	cmp	r3, #42	; 0x2a
 8008e24:	d015      	beq.n	8008e52 <_svfiprintf_r+0xf6>
 8008e26:	4654      	mov	r4, sl
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	9a07      	ldr	r2, [sp, #28]
 8008e30:	4621      	mov	r1, r4
 8008e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e36:	3b30      	subs	r3, #48	; 0x30
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	d94d      	bls.n	8008ed8 <_svfiprintf_r+0x17c>
 8008e3c:	b1b0      	cbz	r0, 8008e6c <_svfiprintf_r+0x110>
 8008e3e:	9207      	str	r2, [sp, #28]
 8008e40:	e014      	b.n	8008e6c <_svfiprintf_r+0x110>
 8008e42:	eba0 0308 	sub.w	r3, r0, r8
 8008e46:	fa09 f303 	lsl.w	r3, r9, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	46a2      	mov	sl, r4
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	e7d2      	b.n	8008df8 <_svfiprintf_r+0x9c>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	1d19      	adds	r1, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	9103      	str	r1, [sp, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfbb      	ittet	lt
 8008e5e:	425b      	neglt	r3, r3
 8008e60:	f042 0202 	orrlt.w	r2, r2, #2
 8008e64:	9307      	strge	r3, [sp, #28]
 8008e66:	9307      	strlt	r3, [sp, #28]
 8008e68:	bfb8      	it	lt
 8008e6a:	9204      	strlt	r2, [sp, #16]
 8008e6c:	7823      	ldrb	r3, [r4, #0]
 8008e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e70:	d10c      	bne.n	8008e8c <_svfiprintf_r+0x130>
 8008e72:	7863      	ldrb	r3, [r4, #1]
 8008e74:	2b2a      	cmp	r3, #42	; 0x2a
 8008e76:	d134      	bne.n	8008ee2 <_svfiprintf_r+0x186>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	3402      	adds	r4, #2
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9203      	str	r2, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfb8      	it	lt
 8008e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008f48 <_svfiprintf_r+0x1ec>
 8008e90:	2203      	movs	r2, #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	7821      	ldrb	r1, [r4, #0]
 8008e96:	f000 fa0d 	bl	80092b4 <memchr>
 8008e9a:	b138      	cbz	r0, 8008eac <_svfiprintf_r+0x150>
 8008e9c:	2240      	movs	r2, #64	; 0x40
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	eba0 000a 	sub.w	r0, r0, sl
 8008ea4:	4082      	lsls	r2, r0
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	3401      	adds	r4, #1
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb0:	2206      	movs	r2, #6
 8008eb2:	4826      	ldr	r0, [pc, #152]	; (8008f4c <_svfiprintf_r+0x1f0>)
 8008eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb8:	f000 f9fc 	bl	80092b4 <memchr>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d038      	beq.n	8008f32 <_svfiprintf_r+0x1d6>
 8008ec0:	4b23      	ldr	r3, [pc, #140]	; (8008f50 <_svfiprintf_r+0x1f4>)
 8008ec2:	bb1b      	cbnz	r3, 8008f0c <_svfiprintf_r+0x1b0>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	f023 0307 	bic.w	r3, r3, #7
 8008ecc:	3308      	adds	r3, #8
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	4433      	add	r3, r6
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	e768      	b.n	8008daa <_svfiprintf_r+0x4e>
 8008ed8:	460c      	mov	r4, r1
 8008eda:	2001      	movs	r0, #1
 8008edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee0:	e7a6      	b.n	8008e30 <_svfiprintf_r+0xd4>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f04f 0c0a 	mov.w	ip, #10
 8008ee8:	4619      	mov	r1, r3
 8008eea:	3401      	adds	r4, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef4:	3a30      	subs	r2, #48	; 0x30
 8008ef6:	2a09      	cmp	r2, #9
 8008ef8:	d903      	bls.n	8008f02 <_svfiprintf_r+0x1a6>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c6      	beq.n	8008e8c <_svfiprintf_r+0x130>
 8008efe:	9105      	str	r1, [sp, #20]
 8008f00:	e7c4      	b.n	8008e8c <_svfiprintf_r+0x130>
 8008f02:	4604      	mov	r4, r0
 8008f04:	2301      	movs	r3, #1
 8008f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f0a:	e7f0      	b.n	8008eee <_svfiprintf_r+0x192>
 8008f0c:	ab03      	add	r3, sp, #12
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4638      	mov	r0, r7
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <_svfiprintf_r+0x1f8>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	f3af 8000 	nop.w
 8008f1c:	1c42      	adds	r2, r0, #1
 8008f1e:	4606      	mov	r6, r0
 8008f20:	d1d6      	bne.n	8008ed0 <_svfiprintf_r+0x174>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	065b      	lsls	r3, r3, #25
 8008f26:	f53f af2d 	bmi.w	8008d84 <_svfiprintf_r+0x28>
 8008f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f2c:	b01d      	add	sp, #116	; 0x74
 8008f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f32:	ab03      	add	r3, sp, #12
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	462a      	mov	r2, r5
 8008f38:	4638      	mov	r0, r7
 8008f3a:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <_svfiprintf_r+0x1f8>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	f000 f87d 	bl	800903c <_printf_i>
 8008f42:	e7eb      	b.n	8008f1c <_svfiprintf_r+0x1c0>
 8008f44:	080097e4 	.word	0x080097e4
 8008f48:	080097ea 	.word	0x080097ea
 8008f4c:	080097ee 	.word	0x080097ee
 8008f50:	00000000 	.word	0x00000000
 8008f54:	08008ca9 	.word	0x08008ca9

08008f58 <_printf_common>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	4699      	mov	r9, r3
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4607      	mov	r7, r0
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bfb8      	it	lt
 8008f6a:	4613      	movlt	r3, r2
 8008f6c:	6033      	str	r3, [r6, #0]
 8008f6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f72:	460c      	mov	r4, r1
 8008f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f78:	b10a      	cbz	r2, 8008f7e <_printf_common+0x26>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0699      	lsls	r1, r3, #26
 8008f82:	bf42      	ittt	mi
 8008f84:	6833      	ldrmi	r3, [r6, #0]
 8008f86:	3302      	addmi	r3, #2
 8008f88:	6033      	strmi	r3, [r6, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	f015 0506 	ands.w	r5, r5, #6
 8008f90:	d106      	bne.n	8008fa0 <_printf_common+0x48>
 8008f92:	f104 0a19 	add.w	sl, r4, #25
 8008f96:	68e3      	ldr	r3, [r4, #12]
 8008f98:	6832      	ldr	r2, [r6, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc2b      	bgt.n	8008ff8 <_printf_common+0xa0>
 8008fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fa4:	1e13      	subs	r3, r2, #0
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	0692      	lsls	r2, r2, #26
 8008fae:	d430      	bmi.n	8009012 <_printf_common+0xba>
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d023      	beq.n	8009006 <_printf_common+0xae>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	f003 0306 	and.w	r3, r3, #6
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	bf14      	ite	ne
 8008fca:	2500      	movne	r5, #0
 8008fcc:	6833      	ldreq	r3, [r6, #0]
 8008fce:	f04f 0600 	mov.w	r6, #0
 8008fd2:	bf08      	it	eq
 8008fd4:	68e5      	ldreq	r5, [r4, #12]
 8008fd6:	f104 041a 	add.w	r4, r4, #26
 8008fda:	bf08      	it	eq
 8008fdc:	1aed      	subeq	r5, r5, r3
 8008fde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008fe2:	bf08      	it	eq
 8008fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	bfc4      	itt	gt
 8008fec:	1a9b      	subgt	r3, r3, r2
 8008fee:	18ed      	addgt	r5, r5, r3
 8008ff0:	42b5      	cmp	r5, r6
 8008ff2:	d11a      	bne.n	800902a <_printf_common+0xd2>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e008      	b.n	800900a <_printf_common+0xb2>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4652      	mov	r2, sl
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c0      	blx	r8
 8009002:	3001      	adds	r0, #1
 8009004:	d103      	bne.n	800900e <_printf_common+0xb6>
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900e:	3501      	adds	r5, #1
 8009010:	e7c1      	b.n	8008f96 <_printf_common+0x3e>
 8009012:	2030      	movs	r0, #48	; 0x30
 8009014:	18e1      	adds	r1, r4, r3
 8009016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009020:	4422      	add	r2, r4
 8009022:	3302      	adds	r3, #2
 8009024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009028:	e7c2      	b.n	8008fb0 <_printf_common+0x58>
 800902a:	2301      	movs	r3, #1
 800902c:	4622      	mov	r2, r4
 800902e:	4649      	mov	r1, r9
 8009030:	4638      	mov	r0, r7
 8009032:	47c0      	blx	r8
 8009034:	3001      	adds	r0, #1
 8009036:	d0e6      	beq.n	8009006 <_printf_common+0xae>
 8009038:	3601      	adds	r6, #1
 800903a:	e7d9      	b.n	8008ff0 <_printf_common+0x98>

0800903c <_printf_i>:
 800903c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	7e0f      	ldrb	r7, [r1, #24]
 8009042:	4691      	mov	r9, r2
 8009044:	2f78      	cmp	r7, #120	; 0x78
 8009046:	4680      	mov	r8, r0
 8009048:	460c      	mov	r4, r1
 800904a:	469a      	mov	sl, r3
 800904c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800904e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009052:	d807      	bhi.n	8009064 <_printf_i+0x28>
 8009054:	2f62      	cmp	r7, #98	; 0x62
 8009056:	d80a      	bhi.n	800906e <_printf_i+0x32>
 8009058:	2f00      	cmp	r7, #0
 800905a:	f000 80d5 	beq.w	8009208 <_printf_i+0x1cc>
 800905e:	2f58      	cmp	r7, #88	; 0x58
 8009060:	f000 80c1 	beq.w	80091e6 <_printf_i+0x1aa>
 8009064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800906c:	e03a      	b.n	80090e4 <_printf_i+0xa8>
 800906e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009072:	2b15      	cmp	r3, #21
 8009074:	d8f6      	bhi.n	8009064 <_printf_i+0x28>
 8009076:	a101      	add	r1, pc, #4	; (adr r1, 800907c <_printf_i+0x40>)
 8009078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090e9 	.word	0x080090e9
 8009084:	08009065 	.word	0x08009065
 8009088:	08009065 	.word	0x08009065
 800908c:	08009065 	.word	0x08009065
 8009090:	08009065 	.word	0x08009065
 8009094:	080090e9 	.word	0x080090e9
 8009098:	08009065 	.word	0x08009065
 800909c:	08009065 	.word	0x08009065
 80090a0:	08009065 	.word	0x08009065
 80090a4:	08009065 	.word	0x08009065
 80090a8:	080091ef 	.word	0x080091ef
 80090ac:	08009115 	.word	0x08009115
 80090b0:	080091a9 	.word	0x080091a9
 80090b4:	08009065 	.word	0x08009065
 80090b8:	08009065 	.word	0x08009065
 80090bc:	08009211 	.word	0x08009211
 80090c0:	08009065 	.word	0x08009065
 80090c4:	08009115 	.word	0x08009115
 80090c8:	08009065 	.word	0x08009065
 80090cc:	08009065 	.word	0x08009065
 80090d0:	080091b1 	.word	0x080091b1
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	602a      	str	r2, [r5, #0]
 80090dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0a0      	b.n	800922a <_printf_i+0x1ee>
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	0607      	lsls	r7, r0, #24
 80090ee:	f103 0104 	add.w	r1, r3, #4
 80090f2:	6029      	str	r1, [r5, #0]
 80090f4:	d501      	bpl.n	80090fa <_printf_i+0xbe>
 80090f6:	681e      	ldr	r6, [r3, #0]
 80090f8:	e003      	b.n	8009102 <_printf_i+0xc6>
 80090fa:	0646      	lsls	r6, r0, #25
 80090fc:	d5fb      	bpl.n	80090f6 <_printf_i+0xba>
 80090fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009102:	2e00      	cmp	r6, #0
 8009104:	da03      	bge.n	800910e <_printf_i+0xd2>
 8009106:	232d      	movs	r3, #45	; 0x2d
 8009108:	4276      	negs	r6, r6
 800910a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910e:	230a      	movs	r3, #10
 8009110:	4859      	ldr	r0, [pc, #356]	; (8009278 <_printf_i+0x23c>)
 8009112:	e012      	b.n	800913a <_printf_i+0xfe>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	6820      	ldr	r0, [r4, #0]
 8009118:	1d19      	adds	r1, r3, #4
 800911a:	6029      	str	r1, [r5, #0]
 800911c:	0605      	lsls	r5, r0, #24
 800911e:	d501      	bpl.n	8009124 <_printf_i+0xe8>
 8009120:	681e      	ldr	r6, [r3, #0]
 8009122:	e002      	b.n	800912a <_printf_i+0xee>
 8009124:	0641      	lsls	r1, r0, #25
 8009126:	d5fb      	bpl.n	8009120 <_printf_i+0xe4>
 8009128:	881e      	ldrh	r6, [r3, #0]
 800912a:	2f6f      	cmp	r7, #111	; 0x6f
 800912c:	bf0c      	ite	eq
 800912e:	2308      	moveq	r3, #8
 8009130:	230a      	movne	r3, #10
 8009132:	4851      	ldr	r0, [pc, #324]	; (8009278 <_printf_i+0x23c>)
 8009134:	2100      	movs	r1, #0
 8009136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800913a:	6865      	ldr	r5, [r4, #4]
 800913c:	2d00      	cmp	r5, #0
 800913e:	bfa8      	it	ge
 8009140:	6821      	ldrge	r1, [r4, #0]
 8009142:	60a5      	str	r5, [r4, #8]
 8009144:	bfa4      	itt	ge
 8009146:	f021 0104 	bicge.w	r1, r1, #4
 800914a:	6021      	strge	r1, [r4, #0]
 800914c:	b90e      	cbnz	r6, 8009152 <_printf_i+0x116>
 800914e:	2d00      	cmp	r5, #0
 8009150:	d04b      	beq.n	80091ea <_printf_i+0x1ae>
 8009152:	4615      	mov	r5, r2
 8009154:	fbb6 f1f3 	udiv	r1, r6, r3
 8009158:	fb03 6711 	mls	r7, r3, r1, r6
 800915c:	5dc7      	ldrb	r7, [r0, r7]
 800915e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009162:	4637      	mov	r7, r6
 8009164:	42bb      	cmp	r3, r7
 8009166:	460e      	mov	r6, r1
 8009168:	d9f4      	bls.n	8009154 <_printf_i+0x118>
 800916a:	2b08      	cmp	r3, #8
 800916c:	d10b      	bne.n	8009186 <_printf_i+0x14a>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	07de      	lsls	r6, r3, #31
 8009172:	d508      	bpl.n	8009186 <_printf_i+0x14a>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	6861      	ldr	r1, [r4, #4]
 8009178:	4299      	cmp	r1, r3
 800917a:	bfde      	ittt	le
 800917c:	2330      	movle	r3, #48	; 0x30
 800917e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009186:	1b52      	subs	r2, r2, r5
 8009188:	6122      	str	r2, [r4, #16]
 800918a:	464b      	mov	r3, r9
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f8cd a000 	str.w	sl, [sp]
 8009194:	aa03      	add	r2, sp, #12
 8009196:	f7ff fedf 	bl	8008f58 <_printf_common>
 800919a:	3001      	adds	r0, #1
 800919c:	d14a      	bne.n	8009234 <_printf_i+0x1f8>
 800919e:	f04f 30ff 	mov.w	r0, #4294967295
 80091a2:	b004      	add	sp, #16
 80091a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	f043 0320 	orr.w	r3, r3, #32
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	2778      	movs	r7, #120	; 0x78
 80091b2:	4832      	ldr	r0, [pc, #200]	; (800927c <_printf_i+0x240>)
 80091b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	6829      	ldr	r1, [r5, #0]
 80091bc:	061f      	lsls	r7, r3, #24
 80091be:	f851 6b04 	ldr.w	r6, [r1], #4
 80091c2:	d402      	bmi.n	80091ca <_printf_i+0x18e>
 80091c4:	065f      	lsls	r7, r3, #25
 80091c6:	bf48      	it	mi
 80091c8:	b2b6      	uxthmi	r6, r6
 80091ca:	07df      	lsls	r7, r3, #31
 80091cc:	bf48      	it	mi
 80091ce:	f043 0320 	orrmi.w	r3, r3, #32
 80091d2:	6029      	str	r1, [r5, #0]
 80091d4:	bf48      	it	mi
 80091d6:	6023      	strmi	r3, [r4, #0]
 80091d8:	b91e      	cbnz	r6, 80091e2 <_printf_i+0x1a6>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f023 0320 	bic.w	r3, r3, #32
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2310      	movs	r3, #16
 80091e4:	e7a6      	b.n	8009134 <_printf_i+0xf8>
 80091e6:	4824      	ldr	r0, [pc, #144]	; (8009278 <_printf_i+0x23c>)
 80091e8:	e7e4      	b.n	80091b4 <_printf_i+0x178>
 80091ea:	4615      	mov	r5, r2
 80091ec:	e7bd      	b.n	800916a <_printf_i+0x12e>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	6826      	ldr	r6, [r4, #0]
 80091f2:	1d18      	adds	r0, r3, #4
 80091f4:	6961      	ldr	r1, [r4, #20]
 80091f6:	6028      	str	r0, [r5, #0]
 80091f8:	0635      	lsls	r5, r6, #24
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	d501      	bpl.n	8009202 <_printf_i+0x1c6>
 80091fe:	6019      	str	r1, [r3, #0]
 8009200:	e002      	b.n	8009208 <_printf_i+0x1cc>
 8009202:	0670      	lsls	r0, r6, #25
 8009204:	d5fb      	bpl.n	80091fe <_printf_i+0x1c2>
 8009206:	8019      	strh	r1, [r3, #0]
 8009208:	2300      	movs	r3, #0
 800920a:	4615      	mov	r5, r2
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	e7bc      	b.n	800918a <_printf_i+0x14e>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	2100      	movs	r1, #0
 8009214:	1d1a      	adds	r2, r3, #4
 8009216:	602a      	str	r2, [r5, #0]
 8009218:	681d      	ldr	r5, [r3, #0]
 800921a:	6862      	ldr	r2, [r4, #4]
 800921c:	4628      	mov	r0, r5
 800921e:	f000 f849 	bl	80092b4 <memchr>
 8009222:	b108      	cbz	r0, 8009228 <_printf_i+0x1ec>
 8009224:	1b40      	subs	r0, r0, r5
 8009226:	6060      	str	r0, [r4, #4]
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	6123      	str	r3, [r4, #16]
 800922c:	2300      	movs	r3, #0
 800922e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009232:	e7aa      	b.n	800918a <_printf_i+0x14e>
 8009234:	462a      	mov	r2, r5
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	47d0      	blx	sl
 800923e:	3001      	adds	r0, #1
 8009240:	d0ad      	beq.n	800919e <_printf_i+0x162>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	079b      	lsls	r3, r3, #30
 8009246:	d413      	bmi.n	8009270 <_printf_i+0x234>
 8009248:	68e0      	ldr	r0, [r4, #12]
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	4298      	cmp	r0, r3
 800924e:	bfb8      	it	lt
 8009250:	4618      	movlt	r0, r3
 8009252:	e7a6      	b.n	80091a2 <_printf_i+0x166>
 8009254:	2301      	movs	r3, #1
 8009256:	4632      	mov	r2, r6
 8009258:	4649      	mov	r1, r9
 800925a:	4640      	mov	r0, r8
 800925c:	47d0      	blx	sl
 800925e:	3001      	adds	r0, #1
 8009260:	d09d      	beq.n	800919e <_printf_i+0x162>
 8009262:	3501      	adds	r5, #1
 8009264:	68e3      	ldr	r3, [r4, #12]
 8009266:	9903      	ldr	r1, [sp, #12]
 8009268:	1a5b      	subs	r3, r3, r1
 800926a:	42ab      	cmp	r3, r5
 800926c:	dcf2      	bgt.n	8009254 <_printf_i+0x218>
 800926e:	e7eb      	b.n	8009248 <_printf_i+0x20c>
 8009270:	2500      	movs	r5, #0
 8009272:	f104 0619 	add.w	r6, r4, #25
 8009276:	e7f5      	b.n	8009264 <_printf_i+0x228>
 8009278:	080097f5 	.word	0x080097f5
 800927c:	08009806 	.word	0x08009806

08009280 <memmove>:
 8009280:	4288      	cmp	r0, r1
 8009282:	b510      	push	{r4, lr}
 8009284:	eb01 0402 	add.w	r4, r1, r2
 8009288:	d902      	bls.n	8009290 <memmove+0x10>
 800928a:	4284      	cmp	r4, r0
 800928c:	4623      	mov	r3, r4
 800928e:	d807      	bhi.n	80092a0 <memmove+0x20>
 8009290:	1e43      	subs	r3, r0, #1
 8009292:	42a1      	cmp	r1, r4
 8009294:	d008      	beq.n	80092a8 <memmove+0x28>
 8009296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800929a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800929e:	e7f8      	b.n	8009292 <memmove+0x12>
 80092a0:	4601      	mov	r1, r0
 80092a2:	4402      	add	r2, r0
 80092a4:	428a      	cmp	r2, r1
 80092a6:	d100      	bne.n	80092aa <memmove+0x2a>
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092b2:	e7f7      	b.n	80092a4 <memmove+0x24>

080092b4 <memchr>:
 80092b4:	4603      	mov	r3, r0
 80092b6:	b510      	push	{r4, lr}
 80092b8:	b2c9      	uxtb	r1, r1
 80092ba:	4402      	add	r2, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	d101      	bne.n	80092c6 <memchr+0x12>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e003      	b.n	80092ce <memchr+0x1a>
 80092c6:	7804      	ldrb	r4, [r0, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	428c      	cmp	r4, r1
 80092cc:	d1f6      	bne.n	80092bc <memchr+0x8>
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <_realloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4680      	mov	r8, r0
 80092d6:	4614      	mov	r4, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	b921      	cbnz	r1, 80092e6 <_realloc_r+0x16>
 80092dc:	4611      	mov	r1, r2
 80092de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e2:	f7ff bb87 	b.w	80089f4 <_malloc_r>
 80092e6:	b92a      	cbnz	r2, 80092f4 <_realloc_r+0x24>
 80092e8:	f7ff fc96 	bl	8008c18 <_free_r>
 80092ec:	4625      	mov	r5, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	f000 f81b 	bl	800932e <_malloc_usable_size_r>
 80092f8:	4284      	cmp	r4, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	d802      	bhi.n	8009304 <_realloc_r+0x34>
 80092fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009302:	d812      	bhi.n	800932a <_realloc_r+0x5a>
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7ff fb74 	bl	80089f4 <_malloc_r>
 800930c:	4605      	mov	r5, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d0ed      	beq.n	80092ee <_realloc_r+0x1e>
 8009312:	42bc      	cmp	r4, r7
 8009314:	4622      	mov	r2, r4
 8009316:	4631      	mov	r1, r6
 8009318:	bf28      	it	cs
 800931a:	463a      	movcs	r2, r7
 800931c:	f7ff fc6e 	bl	8008bfc <memcpy>
 8009320:	4631      	mov	r1, r6
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fc78 	bl	8008c18 <_free_r>
 8009328:	e7e1      	b.n	80092ee <_realloc_r+0x1e>
 800932a:	4635      	mov	r5, r6
 800932c:	e7df      	b.n	80092ee <_realloc_r+0x1e>

0800932e <_malloc_usable_size_r>:
 800932e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009332:	1f18      	subs	r0, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfbc      	itt	lt
 8009338:	580b      	ldrlt	r3, [r1, r0]
 800933a:	18c0      	addlt	r0, r0, r3
 800933c:	4770      	bx	lr
	...

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
