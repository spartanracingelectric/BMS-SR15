
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009654  08009654  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800965c  0800965c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009660  08009660  00019660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  20000214  08009878  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018bc  08009878  000218bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016aa0  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046fc  00000000  00000000  00036d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111d  00000000  00000000  0003cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c62  00000000  00000000  0003dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dac0  00000000  00000000  0006183f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee96  00000000  00000000  0007f2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006254  00000000  00000000  0013e198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001443ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000214 	.word	0x20000214
 8000200:	00000000 	.word	0x00000000
 8000204:	08009174 	.word	0x08009174

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000218 	.word	0x20000218
 8000220:	08009174 	.word	0x08009174

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_Set_Num_Devices>:
static const uint8_t num_aux_series_groups = 6; //Number of series groups
static uint8_t num_devices; //Keep visibility within this file
static uint8_t num_series_groups; //Number of series groups

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if (num)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <LTC_Set_Num_Devices+0x20>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7013      	strb	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000230 	.word	0x20000230

08000558 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	return num_devices;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <LTC_Get_Num_Devices+0x10>)
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000230 	.word	0x20000230

0800056c <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d802      	bhi.n	8000588 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <LTC_Set_Num_Series_Groups+0x28>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	7013      	strb	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000231 	.word	0x20000231

08000598 <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	return num_series_groups;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <LTC_Get_Num_Series_Groups+0x10>)
 800059e:	781b      	ldrb	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000231 	.word	0x20000231

080005ac <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
void LTC_Wakeup_Idle(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 80005b2:	23ff      	movs	r3, #255	; 0xff
 80005b4:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e00c      	b.n	80005d6 <LTC_Wakeup_Idle+0x2a>
		LTC_nCS_Low(); //Pull CS low
 80005bc:	f001 f86e 	bl	800169c <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 80005c0:	1cf9      	adds	r1, r7, #3
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2201      	movs	r2, #1
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <LTC_Wakeup_Idle+0x44>)
 80005c8:	f004 f818 	bl	80045fc <HAL_SPI_Transmit>
		LTC_nCS_High(); //Pull CS high
 80005cc:	f001 f85a 	bl	8001684 <LTC_nCS_High>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	f7ff ffbf 	bl	8000558 <LTC_Get_Num_Devices>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4293      	cmp	r3, r2
 80005e2:	dbeb      	blt.n	80005bc <LTC_Wakeup_Idle+0x10>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200002e0 	.word	0x200002e0

080005f4 <LTC_Wakeup_Sleep>:

//wake up sleep
void LTC_Wakeup_Sleep(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e00e      	b.n	800061e <LTC_Wakeup_Sleep+0x2a>
		LTC_nCS_Low();
 8000600:	f001 f84c 	bl	800169c <LTC_nCS_Low>
		HAL_Delay(300);
 8000604:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000608:	f001 f9d0 	bl	80019ac <HAL_Delay>
		LTC_nCS_High();
 800060c:	f001 f83a 	bl	8001684 <LTC_nCS_High>
		HAL_Delay(300);
 8000610:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000614:	f001 f9ca 	bl	80019ac <HAL_Delay>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	f7ff ff9b 	bl	8000558 <LTC_Get_Num_Devices>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4293      	cmp	r3, r2
 800062a:	dbe9      	blt.n	8000600 <LTC_Wakeup_Sleep+0xc>
	}
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <LTC_ReadRawCellVoltages>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 8000638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800063c:	b089      	sub	sp, #36	; 0x24
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	466b      	mov	r3, sp
 8000644:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 800064a:	f7ff ff85 	bl	8000558 <LTC_Get_Num_Devices>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	2308      	movs	r3, #8
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800065a:	7f3b      	ldrb	r3, [r7, #28]
 800065c:	3b01      	subs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	7f3b      	ldrb	r3, [r7, #28]
 8000662:	2200      	movs	r2, #0
 8000664:	4698      	mov	r8, r3
 8000666:	4691      	mov	r9, r2
 8000668:	f04f 0200 	mov.w	r2, #0
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000674:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000678:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800067c:	7f3b      	ldrb	r3, [r7, #28]
 800067e:	2200      	movs	r2, #0
 8000680:	461c      	mov	r4, r3
 8000682:	4615      	mov	r5, r2
 8000684:	f04f 0200 	mov.w	r2, #0
 8000688:	f04f 0300 	mov.w	r3, #0
 800068c:	00eb      	lsls	r3, r5, #3
 800068e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000692:	00e2      	lsls	r2, r4, #3
 8000694:	7f3b      	ldrb	r3, [r7, #28]
 8000696:	3307      	adds	r3, #7
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	ebad 0d03 	sub.w	sp, sp, r3
 80006a0:	466b      	mov	r3, sp
 80006a2:	3300      	adds	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	77bb      	strb	r3, [r7, #30]
 80006aa:	e07e      	b.n	80007aa <LTC_ReadRawCellVoltages+0x172>
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 80006ac:	7fbb      	ldrb	r3, [r7, #30]
 80006ae:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <LTC_ReadRawCellVoltages+0x198>)
 80006b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 80006bc:	7fbb      	ldrb	r3, [r7, #30]
 80006be:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <LTC_ReadRawCellVoltages+0x198>)
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 face 	bl	8000c70 <LTC_PEC15_Calc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80006d8:	8a7b      	ldrh	r3, [r7, #18]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80006e2:	8a7b      	ldrh	r3, [r7, #18]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 80006e8:	f7ff ff60 	bl	80005ac <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 80006ec:	f000 ffd6 	bl	800169c <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80006f0:	f107 0108 	add.w	r1, r7, #8
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	2204      	movs	r2, #4
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <LTC_ReadRawCellVoltages+0x19c>)
 80006fa:	f003 ff7f 	bl	80045fc <HAL_SPI_Transmit>
 80006fe:	4603      	mov	r3, r0
 8000700:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8000702:	7c7b      	ldrb	r3, [r7, #17]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <LTC_ReadRawCellVoltages+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000708:	7c7b      	ldrb	r3, [r7, #17]
 800070a:	2200      	movs	r2, #0
 800070c:	4413      	add	r3, r2
 800070e:	2201      	movs	r2, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	b25a      	sxtb	r2, r3
 8000716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800071a:	4313      	orrs	r3, r2
 800071c:	b25b      	sxtb	r3, r3
 800071e:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 8000720:	7f3b      	ldrb	r3, [r7, #28]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	6979      	ldr	r1, [r7, #20]
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <LTC_ReadRawCellVoltages+0x19c>)
 800072a:	f004 f8aa 	bl	8004882 <HAL_SPI_Receive>
 800072e:	4603      	mov	r3, r0
 8000730:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8000732:	7c7b      	ldrb	r3, [r7, #17]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00b      	beq.n	8000750 <LTC_ReadRawCellVoltages+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 8000738:	7c7b      	ldrb	r3, [r7, #17]
 800073a:	2204      	movs	r2, #4
 800073c:	4413      	add	r3, r2
 800073e:	2201      	movs	r2, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	b25a      	sxtb	r2, r3
 8000746:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800074a:	4313      	orrs	r3, r2
 800074c:	b25b      	sxtb	r3, r3
 800074e:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000750:	2300      	movs	r3, #0
 8000752:	777b      	strb	r3, [r7, #29]
 8000754:	e01d      	b.n	8000792 <LTC_ReadRawCellVoltages+0x15a>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8000756:	7f7b      	ldrb	r3, [r7, #29]
 8000758:	2208      	movs	r2, #8
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 8000764:	7f7c      	ldrb	r4, [r7, #29]
 8000766:	f7ff ff17 	bl	8000598 <LTC_Get_Num_Series_Groups>
 800076a:	4603      	mov	r3, r0
 800076c:	fb03 f204 	mul.w	r2, r3, r4
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8000770:	7fbb      	ldrb	r3, [r7, #30]
 8000772:	2103      	movs	r1, #3
 8000774:	fb01 f303 	mul.w	r3, r1, r3
 8000778:	4413      	add	r3, r2
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
					REG_LEN - 2);
 8000780:	2208      	movs	r2, #8
 8000782:	3a02      	subs	r2, #2
			memcpy(
 8000784:	68f9      	ldr	r1, [r7, #12]
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f952 	bl	8008a30 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800078c:	7f7b      	ldrb	r3, [r7, #29]
 800078e:	3301      	adds	r3, #1
 8000790:	777b      	strb	r3, [r7, #29]
 8000792:	f7ff fee1 	bl	8000558 <LTC_Get_Num_Devices>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	7f7b      	ldrb	r3, [r7, #29]
 800079c:	4293      	cmp	r3, r2
 800079e:	d3da      	bcc.n	8000756 <LTC_ReadRawCellVoltages+0x11e>

		}

		LTC_nCS_High(); //Pull CS high
 80007a0:	f000 ff70 	bl	8001684 <LTC_nCS_High>
			i++) {
 80007a4:	7fbb      	ldrb	r3, [r7, #30]
 80007a6:	3301      	adds	r3, #1
 80007a8:	77bb      	strb	r3, [r7, #30]
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
 80007aa:	f7ff fef5 	bl	8000598 <LTC_Get_Num_Series_Groups>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	2303      	movs	r3, #3
 80007b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	7fba      	ldrb	r2, [r7, #30]
 80007bc:	429a      	cmp	r2, r3
 80007be:	f4ff af75 	bcc.w	80006ac <LTC_ReadRawCellVoltages+0x74>
	}

	return ret;
 80007c2:	7ffb      	ldrb	r3, [r7, #31]
 80007c4:	46b5      	mov	sp, r6
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007d0:	080091e4 	.word	0x080091e4
 80007d4:	200002e0 	.word	0x200002e0

080007d8 <ltc6811_wrcomm>:

void ltc6811_wrcomm(uint8_t total_ic, //The number of ICs being written to
		uint8_t comm[6] //A two dimensional array of the comm data that will be written
		) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80007e4:	2306      	movs	r3, #6
 80007e6:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	3304      	adds	r3, #4
 80007f0:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 80007f2:	7cfb      	ldrb	r3, [r7, #19]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 ffe7 	bl	80087c8 <malloc>
 80007fa:	4603      	mov	r3, r0
 80007fc:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2207      	movs	r2, #7
 8000802:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	2221      	movs	r2, #33	; 0x21
 800080a:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800080c:	68f9      	ldr	r1, [r7, #12]
 800080e:	2002      	movs	r0, #2
 8000810:	f000 fa2e 	bl	8000c70 <LTC_PEC15_Calc>
 8000814:	4603      	mov	r3, r0
 8000816:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000818:	897b      	ldrh	r3, [r7, #10]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29a      	uxth	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3302      	adds	r3, #2
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3303      	adds	r3, #3
 800082a:	897a      	ldrh	r2, [r7, #10]
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	75bb      	strb	r3, [r7, #22]
 8000838:	e030      	b.n	800089c <ltc6811_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 800083a:	2300      	movs	r3, #0
 800083c:	757b      	strb	r3, [r7, #21]
 800083e:	e00d      	b.n	800085c <ltc6811_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; //adding the config data to the array to be sent
 8000840:	7d7b      	ldrb	r3, [r7, #21]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	441a      	add	r2, r3
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	440b      	add	r3, r1
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	3301      	adds	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	3301      	adds	r3, #1
 800085a:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 800085c:	7d7a      	ldrb	r2, [r7, #21]
 800085e:	7d3b      	ldrb	r3, [r7, #20]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3ed      	bcc.n	8000840 <ltc6811_wrcomm+0x68>
		}
		comm_pec = (uint16_t) LTC_PEC15_Calc(BYTES_IN_REG,
 8000864:	7d3b      	ldrb	r3, [r7, #20]
 8000866:	6839      	ldr	r1, [r7, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa01 	bl	8000c70 <LTC_PEC15_Calc>
 800086e:	4603      	mov	r3, r0
 8000870:	813b      	strh	r3, [r7, #8]
				&comm[0]); // calculating the PEC for each ICs configuration register data
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b299      	uxth	r1, r3
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	b2ca      	uxtb	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	3301      	adds	r3, #1
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	893a      	ldrh	r2, [r7, #8]
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	3302      	adds	r3, #2
 8000894:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8000896:	7dbb      	ldrb	r3, [r7, #22]
 8000898:	3b01      	subs	r3, #1
 800089a:	75bb      	strb	r3, [r7, #22]
 800089c:	7dbb      	ldrb	r3, [r7, #22]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1cb      	bne.n	800083a <ltc6811_wrcomm+0x62>
	}

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80008a2:	f7ff fe83 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80008a6:	f000 fef9 	bl	800169c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80008aa:	7cfb      	ldrb	r3, [r7, #19]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <ltc6811_wrcomm+0xf4>)
 80008b4:	f003 fea2 	bl	80045fc <HAL_SPI_Transmit>
	LTC_nCS_High();
 80008b8:	f000 fee4 	bl	8001684 <LTC_nCS_High>
	free(cmd);
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f007 ff8b 	bl	80087d8 <free>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002e0 	.word	0x200002e0

080008d0 <ltc6811_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc6811_stcomm() {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80008d6:	2307      	movs	r3, #7
 80008d8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x23;
 80008da:	2323      	movs	r3, #35	; 0x23
 80008dc:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	2002      	movs	r0, #2
 80008e4:	f000 f9c4 	bl	8000c70 <LTC_PEC15_Calc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80008ec:	897b      	ldrh	r3, [r7, #10]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 80008f6:	897b      	ldrh	r3, [r7, #10]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80008fc:	f7ff fe56 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000900:	f000 fecc 	bl	800169c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2204      	movs	r2, #4
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <ltc6811_stcomm+0x6c>)
 800090c:	f003 fe76 	bl	80045fc <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e008      	b.n	8000928 <ltc6811_stcomm+0x58>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	2201      	movs	r2, #1
 800091a:	21ff      	movs	r1, #255	; 0xff
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <ltc6811_stcomm+0x6c>)
 800091e:	f003 fe6d 	bl	80045fc <HAL_SPI_Transmit>
	for (int i = 0; i < 9; i++) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b08      	cmp	r3, #8
 800092c:	ddf3      	ble.n	8000916 <ltc6811_stcomm+0x46>
	}
	LTC_nCS_High();
 800092e:	f000 fea9 	bl	8001684 <LTC_nCS_High>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200002e0 	.word	0x200002e0

08000940 <LTC_ReadRawCellTemps>:

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 8000940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000944:	b089      	sub	sp, #36	; 0x24
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	466b      	mov	r3, sp
 800094c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 8000952:	f7ff fe01 	bl	8000558 <LTC_Get_Num_Devices>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	2308      	movs	r3, #8
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8000962:	7f3b      	ldrb	r3, [r7, #28]
 8000964:	3b01      	subs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	7f3b      	ldrb	r3, [r7, #28]
 800096a:	2200      	movs	r2, #0
 800096c:	4698      	mov	r8, r3
 800096e:	4691      	mov	r9, r2
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000984:	7f3b      	ldrb	r3, [r7, #28]
 8000986:	2200      	movs	r2, #0
 8000988:	461c      	mov	r4, r3
 800098a:	4615      	mov	r5, r2
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	00eb      	lsls	r3, r5, #3
 8000996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800099a:	00e2      	lsls	r2, r4, #3
 800099c:	7f3b      	ldrb	r3, [r7, #28]
 800099e:	3307      	adds	r3, #7
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	ebad 0d03 	sub.w	sp, sp, r3
 80009a8:	466b      	mov	r3, sp
 80009aa:	3300      	adds	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	77bb      	strb	r3, [r7, #30]
 80009b2:	e07c      	b.n	8000aae <LTC_ReadRawCellTemps+0x16e>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 80009b4:	7fbb      	ldrb	r3, [r7, #30]
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <LTC_ReadRawCellTemps+0x190>)
 80009b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 80009c4:	7fbb      	ldrb	r3, [r7, #30]
 80009c6:	4a42      	ldr	r2, [pc, #264]	; (8000ad0 <LTC_ReadRawCellTemps+0x190>)
 80009c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	2002      	movs	r0, #2
 80009d8:	f000 f94a 	bl	8000c70 <LTC_PEC15_Calc>
 80009dc:	4603      	mov	r3, r0
 80009de:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80009e0:	8a7b      	ldrh	r3, [r7, #18]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80009ea:	8a7b      	ldrh	r3, [r7, #18]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 80009f0:	f7ff fddc 	bl	80005ac <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 80009f4:	f000 fe52 	bl	800169c <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80009f8:	f107 0108 	add.w	r1, r7, #8
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	2204      	movs	r2, #4
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <LTC_ReadRawCellTemps+0x194>)
 8000a02:	f003 fdfb 	bl	80045fc <HAL_SPI_Transmit>
 8000a06:	4603      	mov	r3, r0
 8000a08:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8000a0a:	7c7b      	ldrb	r3, [r7, #17]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00b      	beq.n	8000a28 <LTC_ReadRawCellTemps+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000a10:	7c7b      	ldrb	r3, [r7, #17]
 8000a12:	2200      	movs	r2, #0
 8000a14:	4413      	add	r3, r2
 8000a16:	2201      	movs	r2, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000a28:	7f3b      	ldrb	r3, [r7, #28]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	6979      	ldr	r1, [r7, #20]
 8000a30:	4828      	ldr	r0, [pc, #160]	; (8000ad4 <LTC_ReadRawCellTemps+0x194>)
 8000a32:	f003 ff26 	bl	8004882 <HAL_SPI_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8000a3a:	7c7b      	ldrb	r3, [r7, #17]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00b      	beq.n	8000a58 <LTC_ReadRawCellTemps+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 8000a40:	7c7b      	ldrb	r3, [r7, #17]
 8000a42:	2204      	movs	r2, #4
 8000a44:	4413      	add	r3, r2
 8000a46:	2201      	movs	r2, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	777b      	strb	r3, [r7, #29]
 8000a5c:	e01b      	b.n	8000a96 <LTC_ReadRawCellTemps+0x156>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 8000a5e:	7f7b      	ldrb	r3, [r7, #29]
 8000a60:	2208      	movs	r2, #8
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	4413      	add	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 8000a6c:	7f7b      	ldrb	r3, [r7, #29]
 8000a6e:	2206      	movs	r2, #6
 8000a70:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8000a74:	7fbb      	ldrb	r3, [r7, #30]
 8000a76:	2103      	movs	r1, #3
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
					REG_LEN - 2);
 8000a84:	2208      	movs	r2, #8
 8000a86:	3a02      	subs	r2, #2
			memcpy(
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 ffd0 	bl	8008a30 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000a90:	7f7b      	ldrb	r3, [r7, #29]
 8000a92:	3301      	adds	r3, #1
 8000a94:	777b      	strb	r3, [r7, #29]
 8000a96:	f7ff fd5f 	bl	8000558 <LTC_Get_Num_Devices>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	7f7b      	ldrb	r3, [r7, #29]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d3dc      	bcc.n	8000a5e <LTC_ReadRawCellTemps+0x11e>
		}

		LTC_nCS_High(); //Pull CS high
 8000aa4:	f000 fdee 	bl	8001684 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8000aa8:	7fbb      	ldrb	r3, [r7, #30]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	77bb      	strb	r3, [r7, #30]
 8000aae:	2206      	movs	r2, #6
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	7fba      	ldrb	r2, [r7, #30]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	f4ff af7a 	bcc.w	80009b4 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
 8000ac2:	46b5      	mov	sp, r6
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3724      	adds	r7, #36	; 0x24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ace:	bf00      	nop
 8000ad0:	080091ec 	.word	0x080091ec
 8000ad4:	200002e0 	.word	0x200002e0

08000ad8 <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	71bb      	strb	r3, [r7, #6]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	105b      	asrs	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	3302      	adds	r3, #2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	01db      	lsls	r3, r3, #7
 8000b02:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	797b      	ldrb	r3, [r7, #5]
 8000b12:	4413      	add	r3, r2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	3360      	adds	r3, #96	; 0x60
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 f8a4 	bl	8000c70 <LTC_PEC15_Calc>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000b2c:	89bb      	ldrh	r3, [r7, #12]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	72fb      	strb	r3, [r7, #11]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000b3c:	f7ff fd36 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000b40:	f000 fdac 	bl	800169c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000b44:	f107 0108 	add.w	r1, r7, #8
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <LTC_ADCV+0x88>)
 8000b4e:	f003 fd55 	bl	80045fc <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000b52:	f000 fd97 	bl	8001684 <LTC_nCS_High>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002e0 	.word	0x200002e0

08000b64 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	105b      	asrs	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	3304      	adds	r3, #4
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	4413      	add	r3, r2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	3360      	adds	r3, #96	; 0x60
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f000 f864 	bl	8000c70 <LTC_PEC15_Calc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000bbc:	f7ff fcf6 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8000bc0:	f000 fd6c 	bl	800169c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2204      	movs	r2, #4
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <LTC_ADAX+0x7c>)
 8000bce:	f003 fd15 	bl	80045fc <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000bd2:	f000 fd57 	bl	8001684 <LTC_nCS_High>
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002e0 	.word	0x200002e0

08000be4 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 f834 	bl	8000c70 <LTC_PEC15_Calc>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000c0c:	893b      	ldrh	r3, [r7, #8]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000c16:	893b      	ldrh	r3, [r7, #8]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000c1c:	f7ff fcc6 	bl	80005ac <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 8000c20:	f000 fd3c 	bl	800169c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000c24:	1d39      	adds	r1, r7, #4
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	2204      	movs	r2, #4
 8000c2a:	480f      	ldr	r0, [pc, #60]	; (8000c68 <LTC_PollAdc+0x84>)
 8000c2c:	f003 fce6 	bl	80045fc <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8000c30:	e00c      	b.n	8000c4c <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 8000c32:	f000 feb1 	bl	8001998 <HAL_GetTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8000c3a:	7abb      	ldrb	r3, [r7, #10]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <LTC_PollAdc+0x62>
			finished = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	72fb      	strb	r3, [r7, #11]
 8000c44:	e002      	b.n	8000c4c <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	330a      	adds	r3, #10
 8000c4a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <LTC_PollAdc+0x88>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d802      	bhi.n	8000c5a <LTC_PollAdc+0x76>
 8000c54:	7afb      	ldrb	r3, [r7, #11]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0eb      	beq.n	8000c32 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8000c5a:	f000 fd13 	bl	8001684 <LTC_nCS_High>
	return (counter);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200002e0 	.word	0x200002e0
 8000c6c:	00030d3f 	.word	0x00030d3f

08000c70 <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000c80:	2300      	movs	r3, #0
 8000c82:	737b      	strb	r3, [r7, #13]
 8000c84:	e018      	b.n	8000cb8 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	09db      	lsrs	r3, r3, #7
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	440b      	add	r3, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4053      	eors	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	897b      	ldrh	r3, [r7, #10]
 8000ca6:	490a      	ldr	r1, [pc, #40]	; (8000cd0 <LTC_PEC15_Calc+0x60>)
 8000ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4053      	eors	r3, r2
 8000cb0:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000cb2:	7b7b      	ldrb	r3, [r7, #13]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	737b      	strb	r3, [r7, #13]
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d3e2      	bcc.n	8000c86 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	b29b      	uxth	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	080091f0 	.word	0x080091f0

08000cd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000ce6:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <MX_ADC1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000cfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000d12:	f000 fe6f 	bl	80019f4 <HAL_ADC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 fb60 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d20:	230e      	movs	r3, #14
 8000d22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0x74>)
 8000d32:	f000 ff37 	bl	8001ba4 <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d3c:	f000 fb50 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000234 	.word	0x20000234
 8000d4c:	40012400 	.word	0x40012400

08000d50 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <MX_ADC2_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d7e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000d8e:	f000 fe31 	bl	80019f4 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d98:	f000 fb22 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_ADC2_Init+0x74>)
 8000dae:	f000 fef9 	bl	8001ba4 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000db8:	f000 fb12 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000264 	.word	0x20000264
 8000dc8:	40012800 	.word	0x40012800

08000dcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <HAL_ADC_MspInit+0xbc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d122      	bne.n	8000e32 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e1c:	2330      	movs	r3, #48	; 0x30
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0xc4>)
 8000e2c:	f001 fa66 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e30:	e026      	b.n	8000e80 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d121      	bne.n	8000e80 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0xc4>)
 8000e7c:	f001 fa3e 	bl	80022fc <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40012800 	.word	0x40012800

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_CAN1_Init+0x64>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <MX_CAN1_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ebe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ec2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eea:	f000 ff94 	bl	8001e16 <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 fa74 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002b8 	.word	0x200002b8
 8000f00:	40006400 	.word	0x40006400

08000f04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <HAL_CAN_MspInit+0xb0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d143      	bne.n	8000fac <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	61d3      	str	r3, [r2, #28]
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_CAN_MspInit+0xb4>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <HAL_CAN_MspInit+0xb8>)
 8000f6a:	f001 f9c7 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <HAL_CAN_MspInit+0xb8>)
 8000f84:	f001 f9ba 	bl	80022fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_CAN_MspInit+0xbc>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_CAN_MspInit+0xbc>)
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40006400 	.word	0x40006400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <CAN1_Start+0x10>)
 8000fca:	f001 f81f 	bl	800200c <HAL_CAN_Start>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002b8 	.word	0x200002b8

08000fd8 <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <CAN1_Activate+0x14>)
 8000fe0:	f001 f858 	bl	8002094 <HAL_CAN_ActivateNotification>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002b8 	.word	0x200002b8

08000ff0 <CAN1_SettingsInit>:

HAL_StatusTypeDef CAN1_Send(){
	return HAL_CAN_AddTxMessage(&hcan1, &msg.TxHeader, msg.data, &msg.TxMailbox);
}

void CAN1_SettingsInit(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	CAN1_Start();
 8000ff4:	f7ff ffe6 	bl	8000fc4 <CAN1_Start>
	CAN1_Activate();
 8000ff8:	f7ff ffee 	bl	8000fd8 <CAN1_Activate>
	msg.TxHeader.IDE= CAN_ID_STD;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <CAN1_SettingsInit+0x28>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
	msg.TxHeader.StdId = 0x00;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <CAN1_SettingsInit+0x28>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
	msg.TxHeader.RTR = CAN_RTR_DATA;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <CAN1_SettingsInit+0x28>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
	msg.TxHeader.DLC = 8;
 800100e:	4b02      	ldr	r3, [pc, #8]	; (8001018 <CAN1_SettingsInit+0x28>)
 8001010:	2208      	movs	r2, #8
 8001012:	611a      	str	r2, [r3, #16]
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000294 	.word	0x20000294

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a32      	ldr	r2, [pc, #200]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_GPIO_Init+0xe4>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_GPIO_Init+0xe4>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <MX_GPIO_Init+0xe4>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0320 	and.w	r3, r3, #32
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_GPIO_Init+0xe4>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_GPIO_Init+0xe4>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <MX_GPIO_Init+0xe4>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_GPIO_Init+0xe4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001096:	f001 fab5 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <MX_GPIO_Init+0xec>)
 80010a0:	f001 fab0 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80010a4:	2310      	movs	r3, #16
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <MX_GPIO_Init+0xe8>)
 80010bc:	f001 f91e 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_GPIO_Init+0xec>)
 80010d8:	f001 f910 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_GPIO_Init+0xec>)
 80010f2:	f001 f903 	bl	80022fc <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	40011000 	.word	0x40011000

0800110c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b092      	sub	sp, #72	; 0x48
 8001110:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc1;
	TimerPacket timerpacket_ltc2;
	TimerPacket timerpacket_can1;

	uint16_t *read_volt = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 8001112:	2018      	movs	r0, #24
 8001114:	f007 fb58 	bl	80087c8 <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t *read_temp = (uint16_t*) malloc(NUM_CELLS * sizeof(uint16_t));
 800111c:	2018      	movs	r0, #24
 800111e:	f007 fb53 	bl	80087c8 <malloc>
 8001122:	4603      	mov	r3, r0
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t *read_auxreg = (uint16_t*) malloc(6 * sizeof(uint16_t));
 8001126:	200c      	movs	r0, #12
 8001128:	f007 fb4e 	bl	80087c8 <malloc>
 800112c:	4603      	mov	r3, r0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001130:	f000 fbda 	bl	80018e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001134:	f000 f878 	bl	8001228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001138:	f7ff ff70 	bl	800101c <MX_GPIO_Init>
	MX_ADC1_Init();
 800113c:	f7ff fdca 	bl	8000cd4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001140:	f7ff fe06 	bl	8000d50 <MX_ADC2_Init>
	MX_CAN1_Init();
 8001144:	f7ff fea8 	bl	8000e98 <MX_CAN1_Init>
	MX_TIM7_Init();
 8001148:	f000 fb54 	bl	80017f4 <MX_TIM7_Init>
	MX_SPI1_Init();
 800114c:	f000 fa1a 	bl	8001584 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8001150:	f006 fe52 	bl	8007df8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	CAN1_SettingsInit(); // Start CAN at 0x00
 8001154:	f7ff ff4c 	bl	8000ff0 <CAN1_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8001158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	4931      	ldr	r1, [pc, #196]	; (8001224 <main+0x118>)
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f8cd 	bl	8001300 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc1, LTC_DELAY1);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f906 	bl	8001380 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_ltc2, LTC_DELAY2);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f8ff 	bl	8001380 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can1, CAN1_DELAY);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	210a      	movs	r1, #10
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f8fa 	bl	8001380 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800118c:	f000 fa7a 	bl	8001684 <LTC_nCS_High>
	LTC_Set_Num_Devices(NUM_DEVICES);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff f9cf 	bl	8000534 <LTC_Set_Num_Devices>
	LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8001196:	200c      	movs	r0, #12
 8001198:	f7ff f9e8 	bl	800056c <LTC_Set_Num_Series_Groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f8c5 	bl	800133a <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc1)) {
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f8f6 	bl	80013a6 <TimerPacket_FixedPulse>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <main+0xbe>
			LTC_Wakeup_Sleep();
 80011c0:	f7ff fa18 	bl	80005f4 <LTC_Wakeup_Sleep>
			readVolt(read_volt);
 80011c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011c6:	f000 f910 	bl	80013ea <readVolt>
		}
		if (TimerPacket_FixedPulse(&timerpacket_ltc2)) {
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f8e9 	bl	80013a6 <TimerPacket_FixedPulse>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0e3      	beq.n	80011a2 <main+0x96>
			//start sending to mux to read temperatures
			LTC_Wakeup_Sleep();
 80011da:	f7ff fa0b 	bl	80005f4 <LTC_Wakeup_Sleep>
			readTemp(tempindex, read_temp, read_auxreg);
 80011de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f917 	bl	800141c <readTemp>
			tempindex++;
 80011ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011f2:	3301      	adds	r3, #1
 80011f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (tempindex == 12) {
 80011f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	d107      	bne.n	8001210 <main+0x104>
				tempindex = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				HAL_Delay(2300);
 8001206:	f640 00fc 	movw	r0, #2300	; 0x8fc
 800120a:	f000 fbcf 	bl	80019ac <HAL_Delay>
 800120e:	e7c8      	b.n	80011a2 <main+0x96>
			}
			else if(tempindex == 8){
 8001210:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001214:	2b08      	cmp	r3, #8
 8001216:	d1c4      	bne.n	80011a2 <main+0x96>
				HAL_Delay(2300);
 8001218:	f640 00fc 	movw	r0, #2300	; 0x8fc
 800121c:	f000 fbc6 	bl	80019ac <HAL_Delay>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001220:	e7bf      	b.n	80011a2 <main+0x96>
 8001222:	bf00      	nop
 8001224:	40011000 	.word	0x40011000

08001228 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b09c      	sub	sp, #112	; 0x70
 800122c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f007 fba2 	bl	8008980 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2220      	movs	r2, #32
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fb94 	bl	8008980 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001258:	2301      	movs	r3, #1
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001262:	2304      	movs	r3, #4
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001266:	2301      	movs	r3, #1
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800126a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800127a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800127e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001284:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001288:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800128a:	2340      	movs	r3, #64	; 0x40
 800128c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800128e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fb18 	bl	80038c8 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x7a>
		Error_Handler();
 800129e:	f000 f89f 	bl	80013e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fe18 	bl	8003ef4 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xa6>
		Error_Handler();
 80012ca:	f000 f889 	bl	80013e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80012ce:	2312      	movs	r3, #18
 80012d0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d6:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ffd6 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
		Error_Handler();
 80012ea:	f000 f879 	bl	80013e0 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80012ee:	4b03      	ldr	r3, [pc, #12]	; (80012fc <SystemClock_Config+0xd4>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3770      	adds	r7, #112	; 0x70
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	42420070 	.word	0x42420070

08001300 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4613      	mov	r3, r2
 800130c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f001 f975 	bl	8002604 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001346:	f000 fb27 	bl	8001998 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	429a      	cmp	r2, r3
 800135e:	d90b      	bls.n	8001378 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f001 f962 	bl	8002634 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80013ae:	f000 faf3 	bl	8001998 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1ad2      	subs	r2, r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d905      	bls.n	80013d6 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>

080013ea <readVolt>:

	actual_temp[index] = steinhart;

}

void readVolt(uint16_t *read_volt) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	LTC_Wakeup_Idle();
 80013f2:	f7ff f8db 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_ADCV(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 80013f6:	2302      	movs	r3, #2
 80013f8:	2100      	movs	r1, #0
 80013fa:	2200      	movs	r2, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fb6b 	bl	8000ad8 <LTC_ADCV>
	LTC_PollAdc();
 8001402:	f7ff fbef 	bl	8000be4 <LTC_PollAdc>
	LTC_ReadRawCellVoltages((uint16_t*) read_volt);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f916 	bl	8000638 <LTC_ReadRawCellVoltages>
	print(12, (uint16_t*) read_volt);
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	200c      	movs	r0, #12
 8001410:	f000 f83e 	bl	8001490 <print>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <readTemp>:

void readTemp(uint16_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	81fb      	strh	r3, [r7, #14]
	LTC_Wakeup_Idle();
 800142a:	f7ff f8bf 	bl	80005ac <LTC_Wakeup_Idle>
	ltc6811_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 800142e:	89fa      	ldrh	r2, [r7, #14]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <readTemp+0x70>)
 800143a:	4413      	add	r3, r2
 800143c:	4619      	mov	r1, r3
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff f9ca 	bl	80007d8 <ltc6811_wrcomm>
	LTC_Wakeup_Idle();
 8001444:	f7ff f8b2 	bl	80005ac <LTC_Wakeup_Idle>
	ltc6811_stcomm();
 8001448:	f7ff fa42 	bl	80008d0 <ltc6811_stcomm>
	//end sending to mux to read temperatures

	LTC_Wakeup_Idle();
 800144c:	f7ff f8ae 	bl	80005ac <LTC_Wakeup_Idle>
	LTC_ADAX(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 8001450:	2302      	movs	r3, #2
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb85 	bl	8000b64 <LTC_ADAX>
	LTC_PollAdc();
 800145a:	f7ff fbc3 	bl	8000be4 <LTC_PollAdc>
	if (!LTC_ReadRawCellTemps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fa6e 	bl	8000940 <LTC_ReadRawCellTemps>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10c      	bne.n	8001484 <readTemp+0x68>
			{
		uint16_t data = read_auxreg[0];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	82fb      	strh	r3, [r7, #22]
		//getActualTemps(tempindex, (uint16_t *) read_temp, data);
		read_temp[tempindex] = data;
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	4413      	add	r3, r2
 8001478:	8afa      	ldrh	r2, [r7, #22]
 800147a:	801a      	strh	r2, [r3, #0]

		//start for printing over serial for voltages
		print(12, (uint16_t*) read_temp);
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	200c      	movs	r0, #12
 8001480:	f000 f806 	bl	8001490 <print>
		//end for printing over serial for voltages
	}
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000

08001490 <print>:
 *      Author: karth
 */

#include "print.h"

void print(uint8_t len, uint16_t *read_temp) {
 8001490:	b580      	push	{r7, lr}
 8001492:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8001496:	af00      	add	r7, sp, #0
 8001498:	4602      	mov	r2, r0
 800149a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800149e:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80014a2:	6019      	str	r1, [r3, #0]
 80014a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014a8:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 80014ac:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 80014ae:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014b2:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	3304      	adds	r3, #4
 80014bc:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 fa5c 	bl	8008980 <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 80014c8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014cc:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80014d0:	220a      	movs	r2, #10
 80014d2:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 80014d4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014d8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80014dc:	2200      	movs	r2, #0
 80014de:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < len; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 80014e6:	e027      	b.n	8001538 <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 80014e8:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80014ec:	1c59      	adds	r1, r3, #1
 80014ee:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80014f8:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 8001506:	460a      	mov	r2, r1
 8001508:	491d      	ldr	r1, [pc, #116]	; (8001580 <print+0xf0>)
 800150a:	f007 fa19 	bl	8008940 <siprintf>
		strncat(out_buf, buf, 20);
 800150e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	2214      	movs	r2, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fa39 	bl	8008990 <strncat>
		strncat(out_buf, char_to_str, 2);
 800151e:	f107 010c 	add.w	r1, r7, #12
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	2202      	movs	r2, #2
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fa31 	bl	8008990 <strncat>
	for (uint8_t i = 0; i < len; i++) {
 800152e:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001532:	3301      	adds	r3, #1
 8001534:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8001538:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800153c:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8001540:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3ce      	bcc.n	80014e8 <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	2202      	movs	r2, #2
 8001554:	4618      	mov	r0, r3
 8001556:	f007 fa1b 	bl	8008990 <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe60 	bl	8000224 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f006 fc33 	bl	8007dda <USB_Transmit>
}
 8001574:	bf00      	nop
 8001576:	f607 0728 	addw	r7, r7, #2088	; 0x828
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	0800918c 	.word	0x0800918c

08001584 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2228      	movs	r2, #40	; 0x28
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f002 ff8d 	bl	80044f4 <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f7ff fefe 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002e0 	.word	0x200002e0
 80015ec:	40013000 	.word	0x40013000

080015f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_SPI_MspInit+0x88>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d12f      	bne.n	8001670 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_SPI_MspInit+0x8c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_SPI_MspInit+0x8c>)
 8001616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_SPI_MspInit+0x8c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_SPI_MspInit+0x8c>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_SPI_MspInit+0x8c>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_SPI_MspInit+0x8c>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001640:	23a0      	movs	r3, #160	; 0xa0
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4619      	mov	r1, r3
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <HAL_SPI_MspInit+0x90>)
 8001654:	f000 fe52 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_SPI_MspInit+0x90>)
 800166c:	f000 fe46 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40013000 	.word	0x40013000
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800

08001684 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001688:	2201      	movs	r2, #1
 800168a:	2110      	movs	r1, #16
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <LTC_nCS_High+0x14>)
 800168e:	f000 ffb9 	bl	8002604 <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40010800 	.word	0x40010800

0800169c <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <LTC_nCS_Low+0x14>)
 80016a6:	f000 ffad 	bl	8002604 <HAL_GPIO_WritePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010800 	.word	0x40010800

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f000 f909 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <OTG_FS_IRQHandler+0x10>)
 800176e:	f001 f8b9 	bl	80028e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20001050 	.word	0x20001050

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f007 f914 	bl	80089d8 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20010000 	.word	0x20010000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	20000338 	.word	0x20000338
 80017e4:	200018c0 	.word	0x200018c0

080017e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_TIM7_Init+0x64>)
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <MX_TIM7_Init+0x68>)
 8001806:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_TIM7_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_TIM7_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_TIM7_Init+0x64>)
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_TIM7_Init+0x64>)
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_TIM7_Init+0x64>)
 8001824:	f003 fbee 	bl	8005004 <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800182e:	f7ff fdd7 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_TIM7_Init+0x64>)
 8001840:	f003 fc9c 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800184a:	f7ff fdc9 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000033c 	.word	0x2000033c
 800185c:	40001400 	.word	0x40001400

08001860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0x34>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x38>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_TIM_Base_MspInit+0x38>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_TIM_Base_MspInit+0x38>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40001400 	.word	0x40001400
 8001898:	40021000 	.word	0x40021000

0800189c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800189c:	f7ff ffa4 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a2:	490c      	ldr	r1, [pc, #48]	; (80018d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018b8:	4c09      	ldr	r4, [pc, #36]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018c6:	f007 f88d 	bl	80089e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ca:	f7ff fc1f 	bl	800110c <main>
  bx lr
 80018ce:	4770      	bx	lr
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80018d8:	08009664 	.word	0x08009664
  ldr r2, =_sbss
 80018dc:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80018e0:	200018bc 	.word	0x200018bc

080018e4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x28>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fcbd 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fed6 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fcd5 	bl	80022e2 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 fc9d 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000048 	.word	0x20000048
 800196c:	20000050 	.word	0x20000050
 8001970:	2000004c 	.word	0x2000004c

08001974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000050 	.word	0x20000050
 8001994:	20000384 	.word	0x20000384

08001998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000384 	.word	0x20000384

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fff0 	bl	8001998 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffe0 	bl	8001998 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000050 	.word	0x20000050

080019f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0be      	b.n	8001b94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff f9ca 	bl	8000dcc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f9ab 	bl	8001d94 <ADC_ConversionStop_Disable>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8099 	bne.w	8001b82 <HAL_ADC_Init+0x18e>
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 8095 	bne.w	8001b82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a60:	f023 0302 	bic.w	r3, r3, #2
 8001a64:	f043 0202 	orr.w	r2, r3, #2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7b1b      	ldrb	r3, [r3, #12]
 8001a7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_Init+0xa2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_ADC_Init+0xa8>
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_Init+0xaa>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7d1b      	ldrb	r3, [r3, #20]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d119      	bne.n	8001ae0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b1b      	ldrb	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	035a      	lsls	r2, r3, #13
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_ADC_Init+0x1a8>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b10:	d003      	beq.n	8001b1a <HAL_ADC_Init+0x126>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d104      	bne.n	8001b24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	051b      	lsls	r3, r3, #20
 8001b22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_ADC_Init+0x1ac>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d10b      	bne.n	8001b60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	f023 0303 	bic.w	r3, r3, #3
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b5e:	e018      	b.n	8001b92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f023 0312 	bic.w	r3, r3, #18
 8001b68:	f043 0210 	orr.w	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b80:	e007      	b.n	8001b92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	ffe1f7fd 	.word	0xffe1f7fd
 8001ba0:	ff1f0efe 	.word	0xff1f0efe

08001ba4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x20>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0dc      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1da>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d81c      	bhi.n	8001c0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b05      	subs	r3, #5
 8001be6:	221f      	movs	r2, #31
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4019      	ands	r1, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c0c:	e03c      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d81c      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b23      	subs	r3, #35	; 0x23
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4019      	ands	r1, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b23      	subs	r3, #35	; 0x23
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4e:	e01b      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b41      	subs	r3, #65	; 0x41
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	; 0x41
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d91c      	bls.n	8001cca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4019      	ands	r1, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6898      	ldr	r0, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	e019      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6919      	ldr	r1, [r3, #16]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d132      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d125      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d11a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x1b2>
 8001d62:	e007      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40012400 	.word	0x40012400
 8001d8c:	20000048 	.word	0x20000048
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d12e      	bne.n	8001e0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dbe:	f7ff fdeb 	bl	8001998 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dc4:	e01b      	b.n	8001dfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dc6:	f7ff fde7 	bl	8001998 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d914      	bls.n	8001dfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10d      	bne.n	8001dfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e007      	b.n	8001e0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d0dc      	beq.n	8001dc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0ed      	b.n	8002004 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff f865 	bl	8000f04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4a:	f7ff fda5 	bl	8001998 <HAL_GetTick>
 8001e4e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e50:	e012      	b.n	8001e78 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e52:	f7ff fda1 	bl	8001998 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d90b      	bls.n	8001e78 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2205      	movs	r2, #5
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0c5      	b.n	8002004 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0e5      	beq.n	8001e52 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0202 	bic.w	r2, r2, #2
 8001e94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e96:	f7ff fd7f 	bl	8001998 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e9c:	e012      	b.n	8001ec4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e9e:	f7ff fd7b 	bl	8001998 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b0a      	cmp	r3, #10
 8001eaa:	d90b      	bls.n	8001ec4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2205      	movs	r2, #5
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e09f      	b.n	8002004 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e5      	bne.n	8001e9e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7e1b      	ldrb	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d108      	bne.n	8001eec <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e007      	b.n	8001efc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7e5b      	ldrb	r3, [r3, #25]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d108      	bne.n	8001f16 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e007      	b.n	8001f26 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7e9b      	ldrb	r3, [r3, #26]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e007      	b.n	8001f50 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0220 	bic.w	r2, r2, #32
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7edb      	ldrb	r3, [r3, #27]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d108      	bne.n	8001f6a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0210 	bic.w	r2, r2, #16
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e007      	b.n	8001f7a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0210 	orr.w	r2, r2, #16
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0208 	orr.w	r2, r2, #8
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e007      	b.n	8001fa4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0208 	bic.w	r2, r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7f5b      	ldrb	r3, [r3, #29]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d108      	bne.n	8001fbe <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0204 	orr.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e007      	b.n	8001fce <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0204 	bic.w	r2, r2, #4
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	ea42 0103 	orr.w	r1, r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	1e5a      	subs	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d12e      	bne.n	800207e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fcae 	bl	8001998 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800203e:	e012      	b.n	8002066 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002040:	f7ff fcaa 	bl	8001998 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b0a      	cmp	r3, #10
 800204c:	d90b      	bls.n	8002066 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e012      	b.n	800208c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e006      	b.n	800208c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <HAL_CAN_ActivateNotification+0x1e>
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d109      	bne.n	80020c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e006      	b.n	80020d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
	...

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <__NVIC_EnableIRQ+0x34>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff90 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff2d 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff42 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff90 	bl	80021d0 <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5f 	bl	800217c <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff35 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b08b      	sub	sp, #44	; 0x2c
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	e169      	b.n	80025e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002310:	2201      	movs	r2, #1
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	429a      	cmp	r2, r3
 800232a:	f040 8158 	bne.w	80025de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4a9a      	ldr	r2, [pc, #616]	; (800259c <HAL_GPIO_Init+0x2a0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d05e      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002338:	4a98      	ldr	r2, [pc, #608]	; (800259c <HAL_GPIO_Init+0x2a0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d875      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800233e:	4a98      	ldr	r2, [pc, #608]	; (80025a0 <HAL_GPIO_Init+0x2a4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d058      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002344:	4a96      	ldr	r2, [pc, #600]	; (80025a0 <HAL_GPIO_Init+0x2a4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d86f      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800234a:	4a96      	ldr	r2, [pc, #600]	; (80025a4 <HAL_GPIO_Init+0x2a8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d052      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002350:	4a94      	ldr	r2, [pc, #592]	; (80025a4 <HAL_GPIO_Init+0x2a8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d869      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002356:	4a94      	ldr	r2, [pc, #592]	; (80025a8 <HAL_GPIO_Init+0x2ac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d04c      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_GPIO_Init+0x2ac>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d863      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002362:	4a92      	ldr	r2, [pc, #584]	; (80025ac <HAL_GPIO_Init+0x2b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d046      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002368:	4a90      	ldr	r2, [pc, #576]	; (80025ac <HAL_GPIO_Init+0x2b0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d85d      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800236e:	2b12      	cmp	r3, #18
 8002370:	d82a      	bhi.n	80023c8 <HAL_GPIO_Init+0xcc>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d859      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_GPIO_Init+0x80>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023f7 	.word	0x080023f7
 8002380:	080023d1 	.word	0x080023d1
 8002384:	080023e3 	.word	0x080023e3
 8002388:	08002425 	.word	0x08002425
 800238c:	0800242b 	.word	0x0800242b
 8002390:	0800242b 	.word	0x0800242b
 8002394:	0800242b 	.word	0x0800242b
 8002398:	0800242b 	.word	0x0800242b
 800239c:	0800242b 	.word	0x0800242b
 80023a0:	0800242b 	.word	0x0800242b
 80023a4:	0800242b 	.word	0x0800242b
 80023a8:	0800242b 	.word	0x0800242b
 80023ac:	0800242b 	.word	0x0800242b
 80023b0:	0800242b 	.word	0x0800242b
 80023b4:	0800242b 	.word	0x0800242b
 80023b8:	0800242b 	.word	0x0800242b
 80023bc:	0800242b 	.word	0x0800242b
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_GPIO_Init+0x2b4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ce:	e02c      	b.n	800242a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	623b      	str	r3, [r7, #32]
          break;
 80023d6:	e029      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	3304      	adds	r3, #4
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	e024      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	3308      	adds	r3, #8
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e01f      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	330c      	adds	r3, #12
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e01a      	b.n	800242c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023fe:	2304      	movs	r3, #4
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e013      	b.n	800242c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	611a      	str	r2, [r3, #16]
          break;
 8002416:	e009      	b.n	800242c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	615a      	str	r2, [r3, #20]
          break;
 8002422:	e003      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x130>
          break;
 800242a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2bff      	cmp	r3, #255	; 0xff
 8002430:	d801      	bhi.n	8002436 <HAL_GPIO_Init+0x13a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	e001      	b.n	800243a <HAL_GPIO_Init+0x13e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2bff      	cmp	r3, #255	; 0xff
 8002440:	d802      	bhi.n	8002448 <HAL_GPIO_Init+0x14c>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x152>
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3b08      	subs	r3, #8
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	210f      	movs	r1, #15
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80b1 	beq.w	80025de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800247c:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a4c      	ldr	r2, [pc, #304]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a40      	ldr	r2, [pc, #256]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_GPIO_Init+0x1ec>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3f      	ldr	r2, [pc, #252]	; (80025c0 <HAL_GPIO_Init+0x2c4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00d      	beq.n	80024e4 <HAL_GPIO_Init+0x1e8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_GPIO_Init+0x2c8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_Init+0x1e4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3d      	ldr	r2, [pc, #244]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_GPIO_Init+0x1e0>
 80024d8:	2303      	movs	r3, #3
 80024da:	e006      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024dc:	2304      	movs	r3, #4
 80024de:	e004      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e8:	2300      	movs	r3, #0
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	f002 0203 	and.w	r2, r2, #3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4093      	lsls	r3, r2
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024fa:	492f      	ldr	r1, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	492c      	ldr	r1, [pc, #176]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4928      	ldr	r1, [pc, #160]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4922      	ldr	r1, [pc, #136]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	491e      	ldr	r1, [pc, #120]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002554:	4013      	ands	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4918      	ldr	r1, [pc, #96]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	43db      	mvns	r3, r3
 800257a:	4914      	ldr	r1, [pc, #80]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800257c:	4013      	ands	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d021      	beq.n	80025d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e021      	b.n	80025de <HAL_GPIO_Init+0x2e2>
 800259a:	bf00      	nop
 800259c:	10320000 	.word	0x10320000
 80025a0:	10310000 	.word	0x10310000
 80025a4:	10220000 	.word	0x10220000
 80025a8:	10210000 	.word	0x10210000
 80025ac:	10120000 	.word	0x10120000
 80025b0:	10110000 	.word	0x10110000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010c00 	.word	0x40010c00
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40011400 	.word	0x40011400
 80025cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_GPIO_Init+0x304>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	4909      	ldr	r1, [pc, #36]	; (8002600 <HAL_GPIO_Init+0x304>)
 80025da:	4013      	ands	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f47f ae8e 	bne.w	8002310 <HAL_GPIO_Init+0x14>
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	372c      	adds	r7, #44	; 0x2c
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002620:	e003      	b.n	800262a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43d9      	mvns	r1, r3
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	400b      	ands	r3, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002668:	b08f      	sub	sp, #60	; 0x3c
 800266a:	af0a      	add	r7, sp, #40	; 0x28
 800266c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e10f      	b.n	8002898 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f005 fda2 	bl	80081dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2203      	movs	r2, #3
 800269c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fe94 	bl	80053e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	687e      	ldr	r6, [r7, #4]
 80026c4:	466d      	mov	r5, sp
 80026c6:	f106 0410 	add.w	r4, r6, #16
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026da:	1d33      	adds	r3, r6, #4
 80026dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f002 fdb2 	bl	8005248 <USB_CoreInit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0d0      	b.n	8002898 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fe81 	bl	8005404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e04a      	b.n	800279e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	333d      	adds	r3, #61	; 0x3d
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	333c      	adds	r3, #60	; 0x3c
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	b298      	uxth	r0, r3
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3356      	adds	r3, #86	; 0x56
 8002744:	4602      	mov	r2, r0
 8002746:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3340      	adds	r3, #64	; 0x40
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3344      	adds	r3, #68	; 0x44
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3348      	adds	r3, #72	; 0x48
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334c      	adds	r3, #76	; 0x4c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	3301      	adds	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3af      	bcc.n	8002708 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e044      	b.n	8002838 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	3301      	adds	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3b5      	bcc.n	80027ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	687e      	ldr	r6, [r7, #4]
 800284a:	466d      	mov	r5, sp
 800284c:	f106 0410 	add.w	r4, r6, #16
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800285c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002860:	1d33      	adds	r3, r6, #4
 8002862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f002 fe19 	bl	800549c <USB_DevInit>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e00d      	b.n	8002898 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fda3 	bl	80063dc <USB_DevDisconnect>

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_Start+0x16>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e012      	b.n	80028dc <HAL_PCD_Start+0x3c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fd7e 	bl	80053c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fd65 	bl	800639c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b08d      	sub	sp, #52	; 0x34
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fe1c 	bl	8006538 <USB_GetMode>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 8443 	bne.w	800318e <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fd85 	bl	800641c <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8439 	beq.w	800318c <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fd72 	bl	800641c <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f002 0202 	and.w	r2, r2, #2
 8002950:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fd60 	bl	800641c <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b10      	cmp	r3, #16
 8002964:	d161      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0210 	bic.w	r2, r2, #16
 8002974:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	0c5b      	lsrs	r3, r3, #17
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d124      	bne.n	80029ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d035      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6a38      	ldr	r0, [r7, #32]
 80029c2:	f003 fb9d 	bl	8006100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	441a      	add	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e4:	441a      	add	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	e016      	b.n	8002a1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	0c5b      	lsrs	r3, r3, #17
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d110      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029fe:	2208      	movs	r2, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	6a38      	ldr	r0, [r7, #32]
 8002a04:	f003 fb7c 	bl	8006100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a14:	441a      	add	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0210 	orr.w	r2, r2, #16
 8002a28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fcf4 	bl	800641c <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3e:	f040 80a7 	bne.w	8002b90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fcf8 	bl	8006440 <USB_ReadDevAllOutEpInterrupt>
 8002a50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a52:	e099      	b.n	8002b88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 808e 	beq.w	8002b7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd1a 	bl	80064a4 <USB_ReadDevOutEPInterrupt>
 8002a70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fe41 	bl	8003718 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00c      	beq.n	8002aba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aac:	461a      	mov	r2, r3
 8002aae:	2308      	movs	r3, #8
 8002ab0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fe7d 	bl	80037b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d030      	beq.n	8002b42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d109      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	78db      	ldrb	r3, [r3, #3]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 fc44 	bl	80083b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2302      	movs	r3, #2
 8002b40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f47f af62 	bne.w	8002a54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fc41 	bl	800641c <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba4:	f040 80a4 	bne.w	8002cf0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fc60 	bl	8006472 <USB_ReadDevAllInEpInterrupt>
 8002bb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bb8:	e096      	b.n	8002ce8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 808b 	beq.w	8002cdc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fc84 	bl	80064de <USB_ReadDevInEPInterrupt>
 8002bd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d020      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c02:	4013      	ands	r3, r2
 8002c04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f005 fb4f 	bl	80082c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2310      	movs	r3, #16
 8002c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c72:	461a      	mov	r2, r3
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d023      	beq.n	8002cca <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c84:	6a38      	ldr	r0, [r7, #32]
 8002c86:	f002 fd2b 	bl	80056e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3338      	adds	r3, #56	; 0x38
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d108      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f005 fb92 	bl	80083dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fc96 	bl	8003608 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3301      	adds	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f af65 	bne.w	8002bba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fb91 	bl	800641c <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d04:	d114      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f005 fb3e 	bl	800839c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fb71 	bl	800641c <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d112      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f005 fafa 	bl	8008350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d6a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fb53 	bl	800641c <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	f040 80b5 	bne.w	8002eee <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fc9e 	bl	80056e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	e046      	b.n	8002e38 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db6:	461a      	mov	r2, r3
 8002db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ddc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3301      	adds	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3b3      	bcc.n	8002daa <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6e:	f043 030b 	orr.w	r3, r3, #11
 8002e72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e84:	f043 030b 	orr.w	r3, r3, #11
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	e015      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ea2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb2:	f043 030b 	orr.w	r3, r3, #11
 8002eb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f003 fb5d 	bl	8006598 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fa92 	bl	800641c <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	d124      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fb22 	bl	8006552 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fc60 	bl	80057d8 <USB_GetDevSpeed>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681c      	ldr	r4, [r3, #0]
 8002f24:	f001 f98c 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8002f28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4620      	mov	r0, r4
 8002f34:	f002 f9aa 	bl	800528c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f005 f9ea 	bl	8008312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fa62 	bl	800641c <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d10a      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f005 f9c7 	bl	80082f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f002 0208 	and.w	r2, r2, #8
 8002f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fa4d 	bl	800641c <USB_ReadInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d122      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f98:	2301      	movs	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9c:	e014      	b.n	8002fc8 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 faf2 	bl	80035a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d3e5      	bcc.n	8002f9e <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fa20 	bl	800641c <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe6:	d13b      	bne.n	8003060 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe8:	2301      	movs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	e02b      	b.n	8003046 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3340      	adds	r3, #64	; 0x40
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d115      	bne.n	8003040 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003014:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	da12      	bge.n	8003040 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	333f      	adds	r3, #63	; 0x3f
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fab3 	bl	80035a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	3301      	adds	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	429a      	cmp	r2, r3
 800304e:	d3ce      	bcc.n	8002fee <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800305e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f003 f9d9 	bl	800641c <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003074:	d155      	bne.n	8003122 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e045      	b.n	8003108 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d12e      	bne.n	8003102 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da2b      	bge.n	8003102 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d121      	bne.n	8003102 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	6053      	str	r3, [r2, #4]
            break;
 8003100:	e007      	b.n	8003112 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	429a      	cmp	r2, r3
 8003110:	d3b4      	bcc.n	800307c <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f978 	bl	800641c <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d10a      	bne.n	800314e <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f005 f961 	bl	8008400 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800314c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 f962 	bl	800641c <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d115      	bne.n	800318e <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f005 f951 	bl	800841c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e000      	b.n	800318e <HAL_PCD_IRQHandler+0x8aa>
      return;
 800318c:	bf00      	nop
    }
  }
}
 800318e:	3734      	adds	r7, #52	; 0x34
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_SetAddress+0x1a>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e013      	b.n	80031d6 <HAL_PCD_SetAddress+0x42>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 f8c3 	bl	8006352 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	4608      	mov	r0, r1
 80031e8:	4611      	mov	r1, r2
 80031ea:	461a      	mov	r2, r3
 80031ec:	4603      	mov	r3, r0
 80031ee:	70fb      	strb	r3, [r7, #3]
 80031f0:	460b      	mov	r3, r1
 80031f2:	803b      	strh	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da0f      	bge.n	8003224 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00f      	b.n	8003244 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003250:	883a      	ldrh	r2, [r7, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	78ba      	ldrb	r2, [r7, #2]
 800325a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d102      	bne.n	800327a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_PCD_EP_Open+0xaa>
 8003284:	2302      	movs	r3, #2
 8003286:	e00e      	b.n	80032a6 <HAL_PCD_EP_Open+0xc8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fabc 	bl	8005814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032a4:	7afb      	ldrb	r3, [r7, #11]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da0f      	bge.n	80032e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3338      	adds	r3, #56	; 0x38
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	e00f      	b.n	8003302 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_Close+0x6e>
 8003318:	2302      	movs	r3, #2
 800331a:	e00e      	b.n	800333a <HAL_PCD_EP_Close+0x8c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f002 faf8 	bl	8005920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	460b      	mov	r3, r1
 8003350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	b2da      	uxtb	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fb9e 	bl	8005ad8 <USB_EPStartXfer>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80033c8:	681b      	ldr	r3, [r3, #0]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	460b      	mov	r3, r1
 80033e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3338      	adds	r3, #56	; 0x38
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2201      	movs	r2, #1
 8003412:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	b2da      	uxtb	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6979      	ldr	r1, [r7, #20]
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fb56 	bl	8005ad8 <USB_EPStartXfer>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d901      	bls.n	8003454 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04e      	b.n	80034f2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da0f      	bge.n	800347c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	3338      	adds	r3, #56	; 0x38
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	3304      	adds	r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	705a      	strb	r2, [r3, #1]
 800347a:	e00d      	b.n	8003498 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_PCD_EP_SetStall+0x82>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e01c      	b.n	80034f2 <HAL_PCD_EP_SetStall+0xbc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fe71 	bl	80061ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f003 f858 	bl	8006598 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d901      	bls.n	8003518 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e042      	b.n	800359e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da0f      	bge.n	8003540 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	f003 020f 	and.w	r2, r3, #15
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3338      	adds	r3, #56	; 0x38
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	705a      	strb	r2, [r3, #1]
 800353e:	e00f      	b.n	8003560 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_PCD_EP_ClrStall+0x86>
 800357c:	2302      	movs	r3, #2
 800357e:	e00e      	b.n	800359e <HAL_PCD_EP_ClrStall+0xa4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fe7a 	bl	8006288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da0c      	bge.n	80035d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3338      	adds	r3, #56	; 0x38
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e00c      	b.n	80035ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3304      	adds	r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 fca1 	bl	8005f3c <USB_EPStopXfer>
 80035fa:	4603      	mov	r3, r0
 80035fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3338      	adds	r3, #56	; 0x38
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d901      	bls.n	8003640 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e067      	b.n	8003710 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	429a      	cmp	r2, r3
 8003654:	d902      	bls.n	800365c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3303      	adds	r3, #3
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003664:	e026      	b.n	80036b4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	429a      	cmp	r2, r3
 800367a:	d902      	bls.n	8003682 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3303      	adds	r3, #3
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	b29b      	uxth	r3, r3
 8003696:	6978      	ldr	r0, [r7, #20]
 8003698:	f002 fcf9 	bl	800608e <USB_WritePacket>

    ep->xfer_buff  += len;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d809      	bhi.n	80036de <PCD_WriteEmptyTxFifo+0xd6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d203      	bcs.n	80036de <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1c3      	bne.n	8003666 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d811      	bhi.n	800370e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	2201      	movs	r2, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	43db      	mvns	r3, r3
 8003704:	6939      	ldr	r1, [r7, #16]
 8003706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800370a:	4013      	ands	r3, r2
 800370c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	333c      	adds	r3, #60	; 0x3c
 8003730:	3304      	adds	r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <PCD_EP_OutXfrComplete_int+0x98>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d124      	bne.n	8003798 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	e01a      	b.n	80037a4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	461a      	mov	r2, r3
 8003786:	2320      	movs	r3, #32
 8003788:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f004 fd7b 	bl	800828c <HAL_PCD_DataOutStageCallback>
 8003796:	e005      	b.n	80037a4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f004 fd74 	bl	800828c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	4f54310a 	.word	0x4f54310a

080037b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	333c      	adds	r3, #60	; 0x3c
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <PCD_EP_OutSetupPacket_int+0x64>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d90e      	bls.n	8003808 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 fd2d 	bl	8008268 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	4f54300a 	.word	0x4f54300a

0800381c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
 8003828:	4613      	mov	r3, r2
 800382a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800383a:	883b      	ldrh	r3, [r7, #0]
 800383c:	0419      	lsls	r1, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	430a      	orrs	r2, r1
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
 8003848:	e028      	b.n	800389c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4413      	add	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e00d      	b.n	800387a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3340      	adds	r3, #64	; 0x40
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	3301      	adds	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	3b01      	subs	r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d3ec      	bcc.n	800385e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003884:	883b      	ldrh	r3, [r7, #0]
 8003886:	0418      	lsls	r0, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	3b01      	subs	r3, #1
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4302      	orrs	r2, r0
 8003894:	3340      	adds	r3, #64	; 0x40
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e304      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8087 	beq.w	80039f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e8:	4b92      	ldr	r3, [pc, #584]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d00c      	beq.n	800390e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f4:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d112      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d10b      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390e:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x12c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d168      	bne.n	80039f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e2de      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x76>
 8003930:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7f      	ldr	r2, [pc, #508]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e02e      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7a      	ldr	r2, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b78      	ldr	r3, [pc, #480]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0xbc>
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a71      	ldr	r2, [pc, #452]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003984:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fd fff8 	bl	8001998 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd fff4 	bl	8001998 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e292      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xe4>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fd ffe4 	bl	8001998 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fd ffe0 	bl	8001998 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e27e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x10c>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e252      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4939      	ldr	r1, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd ff99 	bl	8001998 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd ff95 	bl	8001998 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e233      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4927      	ldr	r1, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff78 	bl	8001998 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fd ff74 	bl	8001998 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e212      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd ff58 	bl	8001998 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd ff54 	bl	8001998 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1f2      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f000 fba2 	bl	8004254 <RCC_Delay>
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fd ff3e 	bl	8001998 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fd ff3a 	bl	8001998 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d908      	bls.n	8003b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1d8      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	42420000 	.word	0x42420000
 8003b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e9      	bne.n	8003b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a6 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a90      	ldr	r2, [pc, #576]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	61d3      	str	r3, [r2, #28]
 8003b76:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fefb 	bl	8001998 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fd fef7 	bl	8001998 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e195      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x312>
 8003bcc:	4b78      	ldr	r3, [pc, #480]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a77      	ldr	r2, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	e02d      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	e01c      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x356>
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a66      	ldr	r2, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	e00b      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003c1e:	4b64      	ldr	r3, [pc, #400]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a63      	ldr	r2, [pc, #396]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6213      	str	r3, [r2, #32]
 8003c2a:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd feab 	bl	8001998 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fea7 	bl	8001998 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e143      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <HAL_RCC_OscConfig+0x37e>
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fe95 	bl	8001998 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fe91 	bl	8001998 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e12d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ee      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b45      	ldr	r3, [pc, #276]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 808c 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d10e      	bne.n	8003cdc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d108      	bne.n	8003cdc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e103      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d14e      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0ef      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <HAL_RCC_OscConfig+0x4f0>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fe45 	bl	8001998 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d12:	f7fd fe41 	bl	8001998 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	; 0x64
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0df      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003d30:	4b1f      	ldr	r3, [pc, #124]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	491c      	ldr	r1, [pc, #112]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4918      	ldr	r1, [pc, #96]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_RCC_OscConfig+0x4f0>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fe1d 	bl	8001998 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d62:	f7fd fe19 	bl	8001998 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0b7      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x49a>
 8003d80:	e022      	b.n	8003dc8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_RCC_OscConfig+0x4e8>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_RCC_OscConfig+0x4f0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fd fe00 	bl	8001998 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d9a:	e00f      	b.n	8003dbc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d9c:	f7fd fdfc 	bl	8001998 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d908      	bls.n	8003dbc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e09a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e9      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8088 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd2:	4b46      	ldr	r3, [pc, #280]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d068      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d14d      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <HAL_RCC_OscConfig+0x628>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd fdd4 	bl	8001998 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd fdd0 	bl	8001998 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e06e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1a:	d10f      	bne.n	8003e3c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4931      	ldr	r1, [pc, #196]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	492d      	ldr	r1, [pc, #180]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	4927      	ldr	r1, [pc, #156]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <HAL_RCC_OscConfig+0x628>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fd9d 	bl	8001998 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd fd99 	bl	8001998 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e037      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x59a>
 8003e80:	e02f      	b.n	8003ee2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x628>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd86 	bl	8001998 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fd82 	bl	8001998 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e020      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x5c8>
 8003eae:	e018      	b.n	8003ee2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e013      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_OscConfig+0x624>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	42420060 	.word	0x42420060

08003ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d0      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4965      	ldr	r1, [pc, #404]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b8      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f50:	4b59      	ldr	r3, [pc, #356]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a58      	ldr	r2, [pc, #352]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f68:	4b53      	ldr	r3, [pc, #332]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a52      	ldr	r2, [pc, #328]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b50      	ldr	r3, [pc, #320]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	494d      	ldr	r1, [pc, #308]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d040      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e073      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4936      	ldr	r1, [pc, #216]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fcd8 	bl	8001998 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fd fcd4 	bl	8001998 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e053      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d210      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0207 	bic.w	r2, r3, #7
 800402a:	4922      	ldr	r1, [pc, #136]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e032      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4916      	ldr	r1, [pc, #88]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f821 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	490a      	ldr	r1, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fc36 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40021000 	.word	0x40021000
 80040bc:	080095f0 	.word	0x080095f0
 80040c0:	20000048 	.word	0x20000048
 80040c4:	2000004c 	.word	0x2000004c

080040c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b08e      	sub	sp, #56	; 0x38
 80040ce:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d4:	2300      	movs	r3, #0
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d8:	2300      	movs	r3, #0
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ec:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d002      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d003      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x40>
 8004100:	e089      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCC_GetSysClockFreq+0x164>)
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004106:	e089      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	0c9b      	lsrs	r3, r3, #18
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_GetSysClockFreq+0x168>)
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d072      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_GetSysClockFreq+0x160>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCC_GetSysClockFreq+0x16c>)
 800412a:	5c9b      	ldrb	r3, [r3, r2]
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800412e:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <HAL_RCC_GetSysClockFreq+0x160>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d053      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_GetSysClockFreq+0x160>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	3301      	adds	r3, #1
 8004146:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004148:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_GetSysClockFreq+0x160>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	3302      	adds	r3, #2
 8004154:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2200      	movs	r2, #0
 800415a:	469a      	mov	sl, r3
 800415c:	4693      	mov	fp, r2
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2200      	movs	r2, #0
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	617a      	str	r2, [r7, #20]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	fb03 f20b 	mul.w	r2, r3, fp
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fb0a f303 	mul.w	r3, sl, r3
 8004172:	4413      	add	r3, r2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	fbaa 0102 	umull	r0, r1, sl, r2
 800417a:	440b      	add	r3, r1
 800417c:	4619      	mov	r1, r3
 800417e:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_GetSysClockFreq+0x164>)
 8004180:	fb03 f201 	mul.w	r2, r3, r1
 8004184:	2300      	movs	r3, #0
 8004186:	fb00 f303 	mul.w	r3, r0, r3
 800418a:	4413      	add	r3, r2
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <HAL_RCC_GetSysClockFreq+0x164>)
 800418e:	fba0 4502 	umull	r4, r5, r0, r2
 8004192:	442b      	add	r3, r5
 8004194:	461d      	mov	r5, r3
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2200      	movs	r2, #0
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	60fa      	str	r2, [r7, #12]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2200      	movs	r2, #0
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041aa:	460b      	mov	r3, r1
 80041ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b0:	4652      	mov	r2, sl
 80041b2:	fb02 f203 	mul.w	r2, r2, r3
 80041b6:	465b      	mov	r3, fp
 80041b8:	4684      	mov	ip, r0
 80041ba:	fb0c f303 	mul.w	r3, ip, r3
 80041be:	4413      	add	r3, r2
 80041c0:	4602      	mov	r2, r0
 80041c2:	4651      	mov	r1, sl
 80041c4:	fba2 8901 	umull	r8, r9, r2, r1
 80041c8:	444b      	add	r3, r9
 80041ca:	4699      	mov	r9, r3
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fc f82e 	bl	8000234 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
 80041e0:	e007      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <HAL_RCC_GetSysClockFreq+0x164>)
 80041e6:	fb03 f202 	mul.w	r2, r3, r2
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCC_GetSysClockFreq+0x168>)
 80041f4:	7b5b      	ldrb	r3, [r3, #13]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	e004      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <HAL_RCC_GetSysClockFreq+0x170>)
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004214:	e002      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_GetSysClockFreq+0x174>)
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800421a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800421e:	4618      	mov	r0, r3
 8004220:	3738      	adds	r7, #56	; 0x38
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	017d7840 	.word	0x017d7840
 8004230:	08009600 	.word	0x08009600
 8004234:	08009610 	.word	0x08009610
 8004238:	003d0900 	.word	0x003d0900
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b02      	ldr	r3, [pc, #8]	; (8004250 <HAL_RCC_GetHCLKFreq+0x10>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	20000048 	.word	0x20000048

08004254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <RCC_Delay+0x34>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <RCC_Delay+0x38>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0a5b      	lsrs	r3, r3, #9
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004270:	bf00      	nop
  }
  while (Delay --);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f9      	bne.n	8004270 <RCC_Delay+0x1c>
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	20000048 	.word	0x20000048
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d07d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b4:	4b8b      	ldr	r3, [pc, #556]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
 80042cc:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e8:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7e      	ldr	r2, [pc, #504]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fd fb50 	bl	8001998 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fd fb4c 	bl	8001998 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0e5      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800431a:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d027      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004338:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800434e:	4a65      	ldr	r2, [pc, #404]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd fb1b 	bl	8001998 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fb17 	bl	8001998 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0ae      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b59      	ldr	r3, [pc, #356]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004388:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4953      	ldr	r1, [pc, #332]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004396:	4313      	orrs	r3, r2
 8004398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800439a:	7efb      	ldrb	r3, [r7, #27]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4a4f      	ldr	r2, [pc, #316]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b8:	4b4a      	ldr	r3, [pc, #296]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4947      	ldr	r1, [pc, #284]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4940      	ldr	r1, [pc, #256]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4938      	ldr	r1, [pc, #224]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004402:	4313      	orrs	r3, r2
 8004404:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004412:	4b34      	ldr	r3, [pc, #208]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d148      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004428:	4b2e      	ldr	r3, [pc, #184]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d138      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e042      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4920      	ldr	r1, [pc, #128]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004462:	4313      	orrs	r3, r2
 8004464:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	491c      	ldr	r1, [pc, #112]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004474:	4313      	orrs	r3, r2
 8004476:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd fa8b 	bl	8001998 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004486:	f7fd fa87 	bl	8001998 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b64      	cmp	r3, #100	; 0x64
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e020      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00f      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
 80044ec:	42420440 	.word	0x42420440
 80044f0:	42420070 	.word	0x42420070

080044f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e076      	b.n	80045f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004516:	d009      	beq.n	800452c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
 800451e:	e005      	b.n	800452c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd f852 	bl	80015f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	0c1a      	lsrs	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f002 0204 	and.w	r2, r2, #4
 80045d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_SPI_Transmit+0x22>
 800461a:	2302      	movs	r3, #2
 800461c:	e12d      	b.n	800487a <HAL_SPI_Transmit+0x27e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004626:	f7fd f9b7 	bl	8001998 <HAL_GetTick>
 800462a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004640:	e116      	b.n	8004870 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_SPI_Transmit+0x52>
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004652:	e10d      	b.n	8004870 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2203      	movs	r2, #3
 8004658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469a:	d10f      	bne.n	80046bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d007      	beq.n	80046da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e2:	d14f      	bne.n	8004784 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0xf6>
 80046ec:	8afb      	ldrh	r3, [r7, #22]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d142      	bne.n	8004778 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004716:	e02f      	b.n	8004778 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d112      	bne.n	800474c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	86da      	strh	r2, [r3, #54]	; 0x36
 800474a:	e015      	b.n	8004778 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474c:	f7fd f924 	bl	8001998 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d803      	bhi.n	8004764 <HAL_SPI_Transmit+0x168>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d102      	bne.n	800476a <HAL_SPI_Transmit+0x16e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004776:	e07b      	b.n	8004870 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ca      	bne.n	8004718 <HAL_SPI_Transmit+0x11c>
 8004782:	e050      	b.n	8004826 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x196>
 800478c:	8afb      	ldrh	r3, [r7, #22]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d144      	bne.n	800481c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047b8:	e030      	b.n	800481c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d113      	bne.n	80047f0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80047ee:	e015      	b.n	800481c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f0:	f7fd f8d2 	bl	8001998 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d803      	bhi.n	8004808 <HAL_SPI_Transmit+0x20c>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d102      	bne.n	800480e <HAL_SPI_Transmit+0x212>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800481a:	e029      	b.n	8004870 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1c9      	bne.n	80047ba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fbcc 	bl	8004fc8 <SPI_EndRxTxTransaction>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e003      	b.n	8004870 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b088      	sub	sp, #32
 8004886:	af02      	add	r7, sp, #8
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d002      	beq.n	80048a8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
 80048a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048a6:	e0fb      	b.n	8004aa0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b0:	d112      	bne.n	80048d8 <HAL_SPI_Receive+0x56>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10e      	bne.n	80048d8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2204      	movs	r2, #4
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f8ef 	bl	8004ab2 <HAL_SPI_TransmitReceive>
 80048d4:	4603      	mov	r3, r0
 80048d6:	e0e8      	b.n	8004aaa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_SPI_Receive+0x64>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e0e1      	b.n	8004aaa <HAL_SPI_Receive+0x228>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ee:	f7fd f853 	bl	8001998 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_SPI_Receive+0x7e>
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004904:	e0cc      	b.n	8004aa0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2204      	movs	r2, #4
 800490a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d10f      	bne.n	800496e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d007      	beq.n	800498c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d16a      	bne.n	8004a6a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004994:	e032      	b.n	80049fc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d115      	bne.n	80049d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f103 020c 	add.w	r2, r3, #12
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ce:	e015      	b.n	80049fc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d0:	f7fc ffe2 	bl	8001998 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d803      	bhi.n	80049e8 <HAL_SPI_Receive+0x166>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d102      	bne.n	80049ee <HAL_SPI_Receive+0x16c>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049fa:	e051      	b.n	8004aa0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1c7      	bne.n	8004996 <HAL_SPI_Receive+0x114>
 8004a06:	e035      	b.n	8004a74 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d113      	bne.n	8004a3e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	b292      	uxth	r2, r2
 8004a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a3c:	e015      	b.n	8004a6a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3e:	f7fc ffab 	bl	8001998 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d803      	bhi.n	8004a56 <HAL_SPI_Receive+0x1d4>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d102      	bne.n	8004a5c <HAL_SPI_Receive+0x1da>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a68:	e01a      	b.n	8004aa0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1c9      	bne.n	8004a08 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa53 	bl	8004f24 <SPI_EndRxTransaction>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
 8004a96:	e003      	b.n	8004aa0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08c      	sub	sp, #48	; 0x30
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x26>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e198      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x358>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae0:	f7fc ff5a 	bl	8001998 <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d00f      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x70>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	d107      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x68>
 8004b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b20:	e16d      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x82>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x82>
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b3a:	e160      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d007      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	d17c      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x10a>
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d16a      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be0:	e057      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11b      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d113      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d119      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x1b8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c66:	2301      	movs	r3, #1
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c6a:	f7fc fe95 	bl	8001998 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d80b      	bhi.n	8004c92 <HAL_SPI_TransmitReceive+0x1e0>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d007      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c90:	e0b5      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1a2      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x130>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d19d      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x130>
 8004ca6:	e080      	b.n	8004daa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0x204>
 8004cb0:	8b7b      	ldrh	r3, [r7, #26]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d16f      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cdc:	e05b      	b.n	8004d96 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d11c      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x274>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x274>
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d114      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x2b6>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d014      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d64:	2301      	movs	r3, #1
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d68:	f7fc fe16 	bl	8001998 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d803      	bhi.n	8004d80 <HAL_SPI_TransmitReceive+0x2ce>
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x2d4>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d94:	e033      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d19e      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x22c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d199      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f90a 	bl	8004fc8 <SPI_EndRxTxTransaction>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d006      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dc6:	e01a      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df4:	e003      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3730      	adds	r7, #48	; 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e24:	f7fc fdb8 	bl	8001998 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e34:	f7fc fdb0 	bl	8001998 <HAL_GetTick>
 8004e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	015b      	lsls	r3, r3, #5
 8004e40:	0d1b      	lsrs	r3, r3, #20
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4a:	e054      	b.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d050      	beq.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e54:	f7fc fda0 	bl	8001998 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d902      	bls.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d13d      	bne.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e82:	d111      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d004      	beq.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d107      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb0:	d10f      	bne.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e017      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d19b      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000048 	.word	0x20000048

08004f24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f38:	d111      	bne.n	8004f5e <SPI_EndRxTransaction+0x3a>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d004      	beq.n	8004f4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d107      	bne.n	8004f5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d117      	bne.n	8004f98 <SPI_EndRxTransaction+0x74>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d112      	bne.n	8004f98 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff ff49 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e013      	b.n	8004fc0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff ff36 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e000      	b.n	8004fc0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff ff18 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e000      	b.n	8004ffc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e041      	b.n	800509a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc fc18 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 f82e 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a2d      	ldr	r2, [pc, #180]	; (800516c <TIM_Base_SetConfig+0xc8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <TIM_Base_SetConfig+0xcc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a29      	ldr	r2, [pc, #164]	; (8005174 <TIM_Base_SetConfig+0xd0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a28      	ldr	r2, [pc, #160]	; (8005178 <TIM_Base_SetConfig+0xd4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1e      	ldr	r2, [pc, #120]	; (800516c <TIM_Base_SetConfig+0xc8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x72>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x72>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <TIM_Base_SetConfig+0xcc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x72>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <TIM_Base_SetConfig+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x72>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <TIM_Base_SetConfig+0xd4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <TIM_Base_SetConfig+0xc8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	615a      	str	r2, [r3, #20]
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00

0800517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e04b      	b.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d00e      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10c      	bne.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00

08005248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005248:	b084      	sub	sp, #16
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	f107 001c 	add.w	r0, r7, #28
 8005256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 f9de 	bl	8006628 <USB_CoreReset>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005288:	b004      	add	sp, #16
 800528a:	4770      	bx	lr

0800528c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d165      	bne.n	800536c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4a3e      	ldr	r2, [pc, #248]	; (800539c <USB_SetTurnaroundTime+0x110>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d906      	bls.n	80052b6 <USB_SetTurnaroundTime+0x2a>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a3d      	ldr	r2, [pc, #244]	; (80053a0 <USB_SetTurnaroundTime+0x114>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d202      	bcs.n	80052b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052b0:	230f      	movs	r3, #15
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e05c      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <USB_SetTurnaroundTime+0x114>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d306      	bcc.n	80052cc <USB_SetTurnaroundTime+0x40>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <USB_SetTurnaroundTime+0x118>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d202      	bcs.n	80052cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052c6:	230e      	movs	r3, #14
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e051      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <USB_SetTurnaroundTime+0x118>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d306      	bcc.n	80052e2 <USB_SetTurnaroundTime+0x56>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <USB_SetTurnaroundTime+0x11c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d202      	bcs.n	80052e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052dc:	230d      	movs	r3, #13
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e046      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <USB_SetTurnaroundTime+0x11c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d306      	bcc.n	80052f8 <USB_SetTurnaroundTime+0x6c>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4a2f      	ldr	r2, [pc, #188]	; (80053ac <USB_SetTurnaroundTime+0x120>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d802      	bhi.n	80052f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052f2:	230c      	movs	r3, #12
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e03b      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <USB_SetTurnaroundTime+0x120>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d906      	bls.n	800530e <USB_SetTurnaroundTime+0x82>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a2b      	ldr	r2, [pc, #172]	; (80053b0 <USB_SetTurnaroundTime+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d802      	bhi.n	800530e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005308:	230b      	movs	r3, #11
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e030      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <USB_SetTurnaroundTime+0x124>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d906      	bls.n	8005324 <USB_SetTurnaroundTime+0x98>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <USB_SetTurnaroundTime+0x128>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800531e:	230a      	movs	r3, #10
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e025      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <USB_SetTurnaroundTime+0x128>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d906      	bls.n	800533a <USB_SetTurnaroundTime+0xae>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <USB_SetTurnaroundTime+0x12c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d202      	bcs.n	800533a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005334:	2309      	movs	r3, #9
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e01a      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <USB_SetTurnaroundTime+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d306      	bcc.n	8005350 <USB_SetTurnaroundTime+0xc4>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <USB_SetTurnaroundTime+0x130>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d802      	bhi.n	8005350 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800534a:	2308      	movs	r3, #8
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	e00f      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <USB_SetTurnaroundTime+0x130>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d906      	bls.n	8005366 <USB_SetTurnaroundTime+0xda>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <USB_SetTurnaroundTime+0x134>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d202      	bcs.n	8005366 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005360:	2307      	movs	r3, #7
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e004      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005366:	2306      	movs	r3, #6
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e001      	b.n	8005370 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800536c:	2309      	movs	r3, #9
 800536e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	00d8acbf 	.word	0x00d8acbf
 80053a0:	00e4e1c0 	.word	0x00e4e1c0
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	01067380 	.word	0x01067380
 80053ac:	011a499f 	.word	0x011a499f
 80053b0:	01312cff 	.word	0x01312cff
 80053b4:	014ca43f 	.word	0x014ca43f
 80053b8:	016e3600 	.word	0x016e3600
 80053bc:	01a6ab1f 	.word	0x01a6ab1f
 80053c0:	01e84800 	.word	0x01e84800

080053c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 0201 	bic.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d115      	bne.n	8005452 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005432:	2001      	movs	r0, #1
 8005434:	f7fc faba 	bl	80019ac <HAL_Delay>
      ms++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 f87a 	bl	8006538 <USB_GetMode>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d01e      	beq.n	8005488 <USB_SetCurrentMode+0x84>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b31      	cmp	r3, #49	; 0x31
 800544e:	d9f0      	bls.n	8005432 <USB_SetCurrentMode+0x2e>
 8005450:	e01a      	b.n	8005488 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005464:	2001      	movs	r0, #1
 8005466:	f7fc faa1 	bl	80019ac <HAL_Delay>
      ms++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 f861 	bl	8006538 <USB_GetMode>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <USB_SetCurrentMode+0x84>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b31      	cmp	r3, #49	; 0x31
 8005480:	d9f0      	bls.n	8005464 <USB_SetCurrentMode+0x60>
 8005482:	e001      	b.n	8005488 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e005      	b.n	8005494 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b32      	cmp	r3, #50	; 0x32
 800548c:	d101      	bne.n	8005492 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800549c:	b084      	sub	sp, #16
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e009      	b.n	80054d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3340      	adds	r3, #64	; 0x40
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b0e      	cmp	r3, #14
 80054d4:	d9f2      	bls.n	80054bc <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ee:	2103      	movs	r1, #3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f959 	bl	80057a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054f6:	2110      	movs	r1, #16
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8f1 	bl	80056e0 <USB_FlushTxFifo>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f91d 	bl	8005748 <USB_FlushRxFifo>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	461a      	mov	r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	461a      	mov	r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e043      	b.n	80055ca <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005558:	d118      	bne.n	800558c <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e013      	b.n	800559e <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e008      	b.n	800559e <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3301      	adds	r3, #1
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d3b7      	bcc.n	8005542 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e043      	b.n	8005660 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ee:	d118      	bne.n	8005622 <USB_DevInit+0x186>
    {
      if (i == 0U)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e013      	b.n	8005634 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	461a      	mov	r2, r3
 800561a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e008      	b.n	8005634 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	461a      	mov	r2, r3
 8005642:	2300      	movs	r3, #0
 8005644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	461a      	mov	r2, r3
 8005654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	d3b7      	bcc.n	80055d8 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f043 0210 	orr.w	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <USB_DevInit+0x240>)
 800569c:	4313      	orrs	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f043 0208 	orr.w	r2, r3, #8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c2:	f043 0304 	orr.w	r3, r3, #4
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d6:	b004      	add	sp, #16
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	803c3800 	.word	0x803c3800

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <USB_FlushTxFifo+0x64>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01b      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	daf2      	bge.n	80056ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <USB_FlushTxFifo+0x64>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d0f0      	beq.n	8005718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	00030d40 	.word	0x00030d40

08005748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <USB_FlushRxFifo+0x5c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e018      	b.n	8005798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	daf2      	bge.n	8005754 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2210      	movs	r2, #16
 8005776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <USB_FlushRxFifo+0x5c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e006      	b.n	8005798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d0f0      	beq.n	8005778 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	00030d40 	.word	0x00030d40

080057a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0306 	and.w	r3, r3, #6
 80057f0:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d002      	beq.n	80057fe <USB_GetDevSpeed+0x26>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d102      	bne.n	8005804 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057fe:	2302      	movs	r3, #2
 8005800:	75fb      	strb	r3, [r7, #23]
 8005802:	e001      	b.n	8005808 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005804:	230f      	movs	r3, #15
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d13a      	bne.n	80058a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584e:	4313      	orrs	r3, r2
 8005850:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d155      	bne.n	8005914 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005884:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800588c:	4313      	orrs	r3, r2
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e036      	b.n	8005914 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d11a      	bne.n	8005914 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	791b      	ldrb	r3, [r3, #4]
 80058f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058fa:	430b      	orrs	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d161      	bne.n	8005a00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800594e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005952:	d11f      	bne.n	8005994 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005972:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005992:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b4:	4013      	ands	r3, r2
 80059b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d8:	4013      	ands	r3, r2
 80059da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	0159      	lsls	r1, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	4619      	mov	r1, r3
 80059f8:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <USB_DeactivateEndpoint+0x1b0>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]
 80059fe:	e060      	b.n	8005ac2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a16:	d11f      	bne.n	8005a58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	2101      	movs	r1, #1
 8005a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	43db      	mvns	r3, r3
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a78:	4013      	ands	r3, r2
 8005a7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	43db      	mvns	r3, r3
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0159      	lsls	r1, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	440b      	add	r3, r1
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	4619      	mov	r1, r3
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <USB_DeactivateEndpoint+0x1b4>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	ec337800 	.word	0xec337800
 8005ad4:	eff37800 	.word	0xeff37800

08005ad8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	f040 8128 	bne.w	8005d46 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d132      	bne.n	8005b64 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	0cdb      	lsrs	r3, r3, #19
 8005b5e:	04db      	lsls	r3, r3, #19
 8005b60:	6113      	str	r3, [r2, #16]
 8005b62:	e092      	b.n	8005c8a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	0cdb      	lsrs	r3, r3, #19
 8005b80:	04db      	lsls	r3, r3, #19
 8005b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11a      	bne.n	8005be4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d903      	bls.n	8005bc2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	e01b      	b.n	8005c1c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6919      	ldr	r1, [r3, #16]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	1e59      	subs	r1, r3, #1
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c06:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c08:	4b8d      	ldr	r3, [pc, #564]	; (8005e40 <USB_EPStartXfer+0x368>)
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	6939      	ldr	r1, [r7, #16]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c32:	6939      	ldr	r1, [r7, #16]
 8005c34:	0148      	lsls	r0, r1, #5
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	4401      	add	r1, r0
 8005c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11f      	bne.n	8005c8a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c88:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	791b      	ldrb	r3, [r3, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d015      	beq.n	8005cde <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8139 	beq.w	8005f2e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	634b      	str	r3, [r1, #52]	; 0x34
 8005cdc:	e127      	b.n	8005f2e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d110      	bne.n	8005d10 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00f      	b.n	8005d30 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68d9      	ldr	r1, [r3, #12]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9a5 	bl	800608e <USB_WritePacket>
 8005d44:	e0f3      	b.n	8005f2e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d60:	0cdb      	lsrs	r3, r3, #19
 8005d62:	04db      	lsls	r3, r3, #19
 8005d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d12f      	bne.n	8005df0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbe:	6939      	ldr	r1, [r7, #16]
 8005dc0:	0148      	lsls	r0, r1, #5
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	4401      	add	r1, r0
 8005dc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dec:	6113      	str	r3, [r2, #16]
 8005dee:	e061      	b.n	8005eb4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d125      	bne.n	8005e44 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0e:	6939      	ldr	r1, [r7, #16]
 8005e10:	0148      	lsls	r0, r1, #5
 8005e12:	6979      	ldr	r1, [r7, #20]
 8005e14:	4401      	add	r1, r0
 8005e16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e3c:	6113      	str	r3, [r2, #16]
 8005e3e:	e039      	b.n	8005eb4 <USB_EPStartXfer+0x3dc>
 8005e40:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	89fa      	ldrh	r2, [r7, #14]
 8005e60:	fb03 f202 	mul.w	r2, r3, r2
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	89fb      	ldrh	r3, [r7, #14]
 8005e78:	04d9      	lsls	r1, r3, #19
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <USB_EPStartXfer+0x460>)
 8005e7c:	400b      	ands	r3, r1
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	0148      	lsls	r0, r1, #5
 8005e82:	6979      	ldr	r1, [r7, #20]
 8005e84:	4401      	add	r1, r0
 8005e86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea4:	6939      	ldr	r1, [r7, #16]
 8005ea6:	0148      	lsls	r0, r1, #5
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	4401      	add	r1, r0
 8005eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d128      	bne.n	8005f0e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d110      	bne.n	8005eee <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e00f      	b.n	8005f0e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	1ff80000 	.word	0x1ff80000

08005f3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d14a      	bne.n	8005ff0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f72:	f040 8086 	bne.w	8006082 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d902      	bls.n	8005fd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd2:	e056      	b.n	8006082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fec:	d0e7      	beq.n	8005fbe <USB_EPStopXfer+0x82>
 8005fee:	e048      	b.n	8006082 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006008:	d13b      	bne.n	8006082 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800602c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f242 7210 	movw	r2, #10000	; 0x2710
 800605e:	4293      	cmp	r3, r2
 8006060:	d902      	bls.n	8006068 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
          break;
 8006066:	e00c      	b.n	8006082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006080:	d0e7      	beq.n	8006052 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800608e:	b480      	push	{r7}
 8006090:	b089      	sub	sp, #36	; 0x24
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	4611      	mov	r1, r2
 800609a:	461a      	mov	r2, r3
 800609c:	460b      	mov	r3, r1
 800609e:	71fb      	strb	r3, [r7, #7]
 80060a0:	4613      	mov	r3, r2
 80060a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80060ac:	88bb      	ldrh	r3, [r7, #4]
 80060ae:	3303      	adds	r3, #3
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e018      	b.n	80060ec <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	031a      	lsls	r2, r3, #12
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	461a      	mov	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6013      	str	r3, [r2, #0]
    pSrc++;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3301      	adds	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	3301      	adds	r3, #1
 80060de:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	3301      	adds	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d3e2      	bcc.n	80060ba <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3724      	adds	r7, #36	; 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006100:	b480      	push	{r7}
 8006102:	b08b      	sub	sp, #44	; 0x2c
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	b29b      	uxth	r3, r3
 800611c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	e014      	b.n	8006156 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	601a      	str	r2, [r3, #0]
    pDest++;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	3301      	adds	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	3301      	adds	r3, #1
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	3301      	adds	r3, #1
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	3301      	adds	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	3301      	adds	r3, #1
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	429a      	cmp	r2, r3
 800615c:	d3e6      	bcc.n	800612c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800615e:	8bfb      	ldrh	r3, [r7, #30]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01e      	beq.n	80061a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616e:	461a      	mov	r2, r3
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	701a      	strb	r2, [r3, #0]
      i++;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	3301      	adds	r3, #1
 800618e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	3301      	adds	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006196:	8bfb      	ldrh	r3, [r7, #30]
 8006198:	3b01      	subs	r3, #1
 800619a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800619c:	8bfb      	ldrh	r3, [r7, #30]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1ea      	bne.n	8006178 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	372c      	adds	r7, #44	; 0x2c
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr

080061ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d12c      	bne.n	8006224 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	db12      	blt.n	8006202 <USB_EPSetStall+0x54>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006200:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e02b      	b.n	800627c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	db12      	blt.n	800625c <USB_EPSetStall+0xae>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800625a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800627a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d128      	bne.n	80062f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	791b      	ldrb	r3, [r3, #4]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d003      	beq.n	80062d4 <USB_EPClearStall+0x4c>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	791b      	ldrb	r3, [r3, #4]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d138      	bne.n	8006346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e027      	b.n	8006346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006310:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	791b      	ldrb	r3, [r3, #4]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d003      	beq.n	8006326 <USB_EPClearStall+0x9e>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	791b      	ldrb	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d10f      	bne.n	8006346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006370:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006374:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ca:	f023 0302 	bic.w	r3, r3, #2
 80063ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640a:	f043 0302 	orr.w	r3, r3, #2
 800640e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4013      	ands	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006434:	68fb      	ldr	r3, [r7, #12]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	0c1b      	lsrs	r3, r3, #16
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	4013      	ands	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	b29b      	uxth	r3, r3
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064d2:	68bb      	ldr	r3, [r7, #8]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	b2db      	uxtb	r3, r3
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4013      	ands	r3, r2
 800652a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800652c:	68bb      	ldr	r3, [r7, #8]
}
 800652e:	4618      	mov	r0, r3
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0301 	and.w	r3, r3, #1
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr
	...

08006598 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	333c      	adds	r3, #60	; 0x3c
 80065aa:	3304      	adds	r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <USB_EP0_OutStart+0x8c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d90a      	bls.n	80065ce <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c8:	d101      	bne.n	80065ce <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e024      	b.n	8006618 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fc:	f043 0318 	orr.w	r3, r3, #24
 8006600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006614:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	4f54300a 	.word	0x4f54300a

08006628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <USB_CoreReset+0x60>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e01b      	b.n	800667e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	daf2      	bge.n	8006634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a08      	ldr	r2, [pc, #32]	; (8006688 <USB_CoreReset+0x60>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e006      	b.n	800667e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d0f0      	beq.n	800665e <USB_CoreReset+0x36>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	00030d40 	.word	0x00030d40

0800668c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7c1b      	ldrb	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d115      	bne.n	80066d0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a8:	2202      	movs	r2, #2
 80066aa:	2181      	movs	r1, #129	; 0x81
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 ff22 	bl	80084f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066bc:	2202      	movs	r2, #2
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 ff18 	bl	80084f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80066ce:	e012      	b.n	80066f6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2202      	movs	r2, #2
 80066d4:	2181      	movs	r1, #129	; 0x81
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 ff0d 	bl	80084f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066e2:	2340      	movs	r3, #64	; 0x40
 80066e4:	2202      	movs	r2, #2
 80066e6:	2101      	movs	r1, #1
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 ff04 	bl	80084f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066f6:	2308      	movs	r3, #8
 80066f8:	2203      	movs	r2, #3
 80066fa:	2182      	movs	r1, #130	; 0x82
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fefa 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006708:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800670c:	f002 f81a 	bl	8008744 <USBD_static_malloc>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006722:	2301      	movs	r3, #1
 8006724:	73fb      	strb	r3, [r7, #15]
 8006726:	e026      	b.n	8006776 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	7c1b      	ldrb	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675c:	2101      	movs	r1, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 ffb9 	bl	80086d6 <USBD_LL_PrepareReceive>
 8006764:	e007      	b.n	8006776 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800676c:	2340      	movs	r3, #64	; 0x40
 800676e:	2101      	movs	r1, #1
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 ffb0 	bl	80086d6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006790:	2181      	movs	r1, #129	; 0x81
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fed5 	bl	8008542 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fece 	bl	8008542 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067ae:	2182      	movs	r1, #130	; 0x82
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fec6 	bl	8008542 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ffc0 	bl	800875c <USBD_static_free>
    pdev->pClassData = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006814:	2b00      	cmp	r3, #0
 8006816:	d039      	beq.n	800688c <USBD_CDC_Setup+0x9e>
 8006818:	2b20      	cmp	r3, #32
 800681a:	d17f      	bne.n	800691c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	88db      	ldrh	r3, [r3, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d029      	beq.n	8006878 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b25b      	sxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	da11      	bge.n	8006852 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800683a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	88d2      	ldrh	r2, [r2, #6]
 8006840:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006842:	6939      	ldr	r1, [r7, #16]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	88db      	ldrh	r3, [r3, #6]
 8006848:	461a      	mov	r2, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fa41 	bl	8007cd2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006850:	e06b      	b.n	800692a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	785a      	ldrb	r2, [r3, #1]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	88db      	ldrh	r3, [r3, #6]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006868:	6939      	ldr	r1, [r7, #16]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	461a      	mov	r2, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fa5c 	bl	8007d2e <USBD_CtlPrepareRx>
      break;
 8006876:	e058      	b.n	800692a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	7850      	ldrb	r0, [r2, #1]
 8006884:	2200      	movs	r2, #0
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	4798      	blx	r3
      break;
 800688a:	e04e      	b.n	800692a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b0b      	cmp	r3, #11
 8006892:	d02e      	beq.n	80068f2 <USBD_CDC_Setup+0x104>
 8006894:	2b0b      	cmp	r3, #11
 8006896:	dc38      	bgt.n	800690a <USBD_CDC_Setup+0x11c>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <USBD_CDC_Setup+0xb4>
 800689c:	2b0a      	cmp	r3, #10
 800689e:	d014      	beq.n	80068ca <USBD_CDC_Setup+0xdc>
 80068a0:	e033      	b.n	800690a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d107      	bne.n	80068bc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	2202      	movs	r2, #2
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fa0c 	bl	8007cd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ba:	e02e      	b.n	800691a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 f99d 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
          break;
 80068c8:	e027      	b.n	800691a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d107      	bne.n	80068e4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80068d4:	f107 030f 	add.w	r3, r7, #15
 80068d8:	2201      	movs	r2, #1
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f9f8 	bl	8007cd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068e2:	e01a      	b.n	800691a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 f989 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	75fb      	strb	r3, [r7, #23]
          break;
 80068f0:	e013      	b.n	800691a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d00d      	beq.n	8006918 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f97d 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 8006904:	2302      	movs	r3, #2
 8006906:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006908:	e006      	b.n	8006918 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 f976 	bl	8007bfe <USBD_CtlError>
          ret = USBD_FAIL;
 8006912:	2302      	movs	r3, #2
 8006914:	75fb      	strb	r3, [r7, #23]
          break;
 8006916:	e000      	b.n	800691a <USBD_CDC_Setup+0x12c>
          break;
 8006918:	bf00      	nop
      }
      break;
 800691a:	e006      	b.n	800692a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f96d 	bl	8007bfe <USBD_CtlError>
      ret = USBD_FAIL;
 8006924:	2302      	movs	r3, #2
 8006926:	75fb      	strb	r3, [r7, #23]
      break;
 8006928:	bf00      	nop
  }

  return ret;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d03a      	beq.n	80069d0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	331c      	adds	r3, #28
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d029      	beq.n	80069c4 <USBD_CDC_DataIn+0x90>
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	331c      	adds	r3, #28
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	78f9      	ldrb	r1, [r7, #3]
 8006984:	68b8      	ldr	r0, [r7, #8]
 8006986:	460b      	mov	r3, r1
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	440b      	add	r3, r1
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4403      	add	r3, r0
 8006990:	3344      	adds	r3, #68	; 0x44
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	fbb2 f1f3 	udiv	r1, r2, r3
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d110      	bne.n	80069c4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	331c      	adds	r3, #28
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069b6:	78f9      	ldrb	r1, [r7, #3]
 80069b8:	2300      	movs	r3, #0
 80069ba:	2200      	movs	r2, #0
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fe67 	bl	8008690 <USBD_LL_Transmit>
 80069c2:	e003      	b.n	80069cc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e000      	b.n	80069d2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80069d0:	2302      	movs	r3, #2
  }
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fe92 	bl	800871c <USBD_LL_GetRxDataSize>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4798      	blx	r3

    return USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d015      	beq.n	8006a76 <USBD_CDC_EP0_RxReady+0x46>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a50:	2bff      	cmp	r3, #255	; 0xff
 8006a52:	d010      	beq.n	8006a76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2243      	movs	r2, #67	; 0x43
 8006a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	200000dc 	.word	0x200000dc

08006aa0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2243      	movs	r2, #67	; 0x43
 8006aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006aae:	4b03      	ldr	r3, [pc, #12]	; (8006abc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000098 	.word	0x20000098

08006ac0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2243      	movs	r2, #67	; 0x43
 8006acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ace:	4b03      	ldr	r3, [pc, #12]	; (8006adc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000120 	.word	0x20000120

08006ae0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	220a      	movs	r2, #10
 8006aec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006aee:	4b03      	ldr	r3, [pc, #12]	; (8006afc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000054 	.word	0x20000054

08006b00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01c      	beq.n	8006bd8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2181      	movs	r1, #129	; 0x81
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fd60 	bl	8008690 <USBD_LL_Transmit>

      return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e002      	b.n	8006bda <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d017      	beq.n	8006c2c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7c1b      	ldrb	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0e:	2101      	movs	r1, #1
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fd60 	bl	80086d6 <USBD_LL_PrepareReceive>
 8006c16:	e007      	b.n	8006c28 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	2101      	movs	r1, #1
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fd57 	bl	80086d6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c2c:	2302      	movs	r3, #2
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	4613      	mov	r3, r2
 8006c42:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e01a      	b.n	8006c84 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	79fa      	ldrb	r2, [r7, #7]
 8006c7a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 fbdb 	bl	8008438 <USBD_LL_Init>

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d006      	beq.n	8006cae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
 8006cac:	e001      	b.n	8006cb2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fbfa 	bl	80084c0 <USBD_LL_Start>

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	4611      	mov	r1, r2
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 ff10 	bl	8007b86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d74:	461a      	mov	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d016      	beq.n	8006db8 <USBD_LL_SetupStage+0x6a>
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d81c      	bhi.n	8006dc8 <USBD_LL_SetupStage+0x7a>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <USBD_LL_SetupStage+0x4a>
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d008      	beq.n	8006da8 <USBD_LL_SetupStage+0x5a>
 8006d96:	e017      	b.n	8006dc8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fa03 	bl	80071ac <USBD_StdDevReq>
      break;
 8006da6:	e01a      	b.n	8006dde <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa65 	bl	8007280 <USBD_StdItfReq>
      break;
 8006db6:	e012      	b.n	8006dde <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 faa5 	bl	8007310 <USBD_StdEPReq>
      break;
 8006dc6:	e00a      	b.n	8006dde <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006dce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fbd2 	bl	8008580 <USBD_LL_StallEP>
      break;
 8006ddc:	bf00      	nop
  }

  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	460b      	mov	r3, r1
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d14b      	bne.n	8006e94 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d134      	bne.n	8006e78 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d919      	bls.n	8006e4e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	1ad2      	subs	r2, r2, r3
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d203      	bcs.n	8006e3c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	e002      	b.n	8006e42 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 ff8f 	bl	8007d6a <USBD_CtlContinueRx>
 8006e4c:	e038      	b.n	8006ec0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d105      	bne.n	8006e70 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 ff8c 	bl	8007d8e <USBD_CtlSendStatus>
 8006e76:	e023      	b.n	8006ec0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d11e      	bne.n	8006ec0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f001 fb77 	bl	8008580 <USBD_LL_StallEP>
 8006e92:	e015      	b.n	8006ec0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d108      	bne.n	8006ebc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	7afa      	ldrb	r2, [r7, #11]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	4798      	blx	r3
 8006eba:	e001      	b.n	8006ec0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e000      	b.n	8006ec2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d17f      	bne.n	8006fde <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d15c      	bne.n	8006fa8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d915      	bls.n	8006f26 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fef9 	bl	8007d0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f001 fbd9 	bl	80086d6 <USBD_LL_PrepareReceive>
 8006f24:	e04e      	b.n	8006fc4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	6912      	ldr	r2, [r2, #16]
 8006f2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f32:	fb01 f202 	mul.w	r2, r1, r2
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11c      	bne.n	8006f76 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d316      	bcc.n	8006f76 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d20f      	bcs.n	8006f76 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fed5 	bl	8007d0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f001 fbb1 	bl	80086d6 <USBD_LL_PrepareReceive>
 8006f74:	e026      	b.n	8006fc4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d105      	bne.n	8006f98 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f98:	2180      	movs	r1, #128	; 0x80
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f001 faf0 	bl	8008580 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 ff07 	bl	8007db4 <USBD_CtlReceiveStatus>
 8006fa6:	e00d      	b.n	8006fc4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d004      	beq.n	8006fbc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f001 fade 	bl	8008580 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d11d      	bne.n	800700a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fe81 	bl	8006cd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fdc:	e015      	b.n	800700a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00d      	beq.n	8007006 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d108      	bne.n	8007006 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	7afa      	ldrb	r2, [r7, #11]
 8006ffe:	4611      	mov	r1, r2
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	4798      	blx	r3
 8007004:	e001      	b.n	800700a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007006:	2302      	movs	r3, #2
 8007008:	e000      	b.n	800700c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fa67 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2240      	movs	r2, #64	; 0x40
 8007034:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	2200      	movs	r2, #0
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fa59 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2240      	movs	r2, #64	; 0x40
 800704e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6852      	ldr	r2, [r2, #4]
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	4611      	mov	r1, r2
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2204      	movs	r2, #4
 80070cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d105      	bne.n	80070fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	2b03      	cmp	r3, #3
 8007116:	d10b      	bne.n	8007130 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6852      	ldr	r2, [r2, #4]
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	4611      	mov	r1, r2
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d005      	beq.n	80071d2 <USBD_StdDevReq+0x26>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d84f      	bhi.n	800726a <USBD_StdDevReq+0xbe>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <USBD_StdDevReq+0x36>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d14b      	bne.n	800726a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      break;
 80071e0:	e048      	b.n	8007274 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	d839      	bhi.n	800725e <USBD_StdDevReq+0xb2>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_StdDevReq+0x44>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007241 	.word	0x08007241
 80071f4:	08007255 	.word	0x08007255
 80071f8:	0800725f 	.word	0x0800725f
 80071fc:	0800724b 	.word	0x0800724b
 8007200:	0800725f 	.word	0x0800725f
 8007204:	08007223 	.word	0x08007223
 8007208:	08007219 	.word	0x08007219
 800720c:	0800725f 	.word	0x0800725f
 8007210:	08007237 	.word	0x08007237
 8007214:	0800722d 	.word	0x0800722d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9dc 	bl	80075d8 <USBD_GetDescriptor>
          break;
 8007220:	e022      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb3f 	bl	80078a8 <USBD_SetAddress>
          break;
 800722a:	e01d      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fb7e 	bl	8007930 <USBD_SetConfig>
          break;
 8007234:	e018      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fc07 	bl	8007a4c <USBD_GetConfig>
          break;
 800723e:	e013      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc37 	bl	8007ab6 <USBD_GetStatus>
          break;
 8007248:	e00e      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc65 	bl	8007b1c <USBD_SetFeature>
          break;
 8007252:	e009      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fc74 	bl	8007b44 <USBD_ClrFeature>
          break;
 800725c:	e004      	b.n	8007268 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fccc 	bl	8007bfe <USBD_CtlError>
          break;
 8007266:	bf00      	nop
      }
      break;
 8007268:	e004      	b.n	8007274 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fcc6 	bl	8007bfe <USBD_CtlError>
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d005      	beq.n	80072a6 <USBD_StdItfReq+0x26>
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d82e      	bhi.n	80072fc <USBD_StdItfReq+0x7c>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <USBD_StdItfReq+0x26>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d12a      	bne.n	80072fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ac:	3b01      	subs	r3, #1
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d81d      	bhi.n	80072ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d813      	bhi.n	80072e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d110      	bne.n	80072f8 <USBD_StdItfReq+0x78>
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10d      	bne.n	80072f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fd56 	bl	8007d8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072e2:	e009      	b.n	80072f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fc89 	bl	8007bfe <USBD_CtlError>
          break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc84 	bl	8007bfe <USBD_CtlError>
          break;
 80072f6:	e000      	b.n	80072fa <USBD_StdItfReq+0x7a>
          break;
 80072f8:	bf00      	nop
      }
      break;
 80072fa:	e004      	b.n	8007306 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fc7d 	bl	8007bfe <USBD_CtlError>
      break;
 8007304:	bf00      	nop
  }

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	889b      	ldrh	r3, [r3, #4]
 8007322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d007      	beq.n	8007340 <USBD_StdEPReq+0x30>
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	f200 8146 	bhi.w	80075c2 <USBD_StdEPReq+0x2b2>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <USBD_StdEPReq+0x40>
 800733a:	2b20      	cmp	r3, #32
 800733c:	f040 8141 	bne.w	80075c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
      break;
 800734e:	e13d      	b.n	80075cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007358:	2b20      	cmp	r3, #32
 800735a:	d10a      	bne.n	8007372 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	e12d      	b.n	80075ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d007      	beq.n	800738a <USBD_StdEPReq+0x7a>
 800737a:	2b03      	cmp	r3, #3
 800737c:	f300 811b 	bgt.w	80075b6 <USBD_StdEPReq+0x2a6>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d072      	beq.n	800746a <USBD_StdEPReq+0x15a>
 8007384:	2b01      	cmp	r3, #1
 8007386:	d03a      	beq.n	80073fe <USBD_StdEPReq+0xee>
 8007388:	e115      	b.n	80075b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	2b02      	cmp	r3, #2
 8007392:	d002      	beq.n	800739a <USBD_StdEPReq+0x8a>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d015      	beq.n	80073c4 <USBD_StdEPReq+0xb4>
 8007398:	e02b      	b.n	80073f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <USBD_StdEPReq+0xaa>
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d009      	beq.n	80073ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f8e8 	bl	8008580 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 f8e4 	bl	8008580 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b8:	e020      	b.n	80073fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc1e 	bl	8007bfe <USBD_CtlError>
              break;
 80073c2:	e01b      	b.n	80073fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10e      	bne.n	80073ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <USBD_StdEPReq+0xda>
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d008      	beq.n	80073ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	88db      	ldrh	r3, [r3, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f8cb 	bl	8008580 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fccf 	bl	8007d8e <USBD_CtlSendStatus>

              break;
 80073f0:	e004      	b.n	80073fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc02 	bl	8007bfe <USBD_CtlError>
              break;
 80073fa:	bf00      	nop
          }
          break;
 80073fc:	e0e0      	b.n	80075c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	2b02      	cmp	r3, #2
 8007406:	d002      	beq.n	800740e <USBD_StdEPReq+0xfe>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d015      	beq.n	8007438 <USBD_StdEPReq+0x128>
 800740c:	e026      	b.n	800745c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00c      	beq.n	800742e <USBD_StdEPReq+0x11e>
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d009      	beq.n	800742e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f8ae 	bl	8008580 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007424:	2180      	movs	r1, #128	; 0x80
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f8aa 	bl	8008580 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800742c:	e01c      	b.n	8007468 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fbe4 	bl	8007bfe <USBD_CtlError>
              break;
 8007436:	e017      	b.n	8007468 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	885b      	ldrh	r3, [r3, #2]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d112      	bne.n	8007466 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007446:	2b00      	cmp	r3, #0
 8007448:	d004      	beq.n	8007454 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 f8b5 	bl	80085be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc9a 	bl	8007d8e <USBD_CtlSendStatus>
              }
              break;
 800745a:	e004      	b.n	8007466 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbcd 	bl	8007bfe <USBD_CtlError>
              break;
 8007464:	e000      	b.n	8007468 <USBD_StdEPReq+0x158>
              break;
 8007466:	bf00      	nop
          }
          break;
 8007468:	e0aa      	b.n	80075c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007470:	2b02      	cmp	r3, #2
 8007472:	d002      	beq.n	800747a <USBD_StdEPReq+0x16a>
 8007474:	2b03      	cmp	r3, #3
 8007476:	d032      	beq.n	80074de <USBD_StdEPReq+0x1ce>
 8007478:	e097      	b.n	80075aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <USBD_StdEPReq+0x180>
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b80      	cmp	r3, #128	; 0x80
 8007484:	d004      	beq.n	8007490 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fbb8 	bl	8007bfe <USBD_CtlError>
                break;
 800748e:	e091      	b.n	80075b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	da0b      	bge.n	80074b0 <USBD_StdEPReq+0x1a0>
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	3310      	adds	r3, #16
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	3304      	adds	r3, #4
 80074ae:	e00b      	b.n	80074c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4413      	add	r3, r2
 80074c6:	3304      	adds	r3, #4
 80074c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2202      	movs	r2, #2
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fbfb 	bl	8007cd2 <USBD_CtlSendData>
              break;
 80074dc:	e06a      	b.n	80075b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da11      	bge.n	800750a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	3318      	adds	r3, #24
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d117      	bne.n	8007530 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb7b 	bl	8007bfe <USBD_CtlError>
                  break;
 8007508:	e054      	b.n	80075b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb68 	bl	8007bfe <USBD_CtlError>
                  break;
 800752e:	e041      	b.n	80075b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	da0b      	bge.n	8007550 <USBD_StdEPReq+0x240>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	3310      	adds	r3, #16
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	3304      	adds	r3, #4
 800754e:	e00b      	b.n	8007568 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	3304      	adds	r3, #4
 8007568:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <USBD_StdEPReq+0x266>
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d103      	bne.n	800757e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	e00e      	b.n	800759c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 f83a 	bl	80085fc <USBD_LL_IsStallEP>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e002      	b.n	800759c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2202      	movs	r2, #2
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb95 	bl	8007cd2 <USBD_CtlSendData>
              break;
 80075a8:	e004      	b.n	80075b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fb26 	bl	8007bfe <USBD_CtlError>
              break;
 80075b2:	bf00      	nop
          }
          break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fb20 	bl	8007bfe <USBD_CtlError>
          break;
 80075be:	bf00      	nop
      }
      break;
 80075c0:	e004      	b.n	80075cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb1a 	bl	8007bfe <USBD_CtlError>
      break;
 80075ca:	bf00      	nop
  }

  return ret;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	2b06      	cmp	r3, #6
 80075fa:	f200 8128 	bhi.w	800784e <USBD_GetDescriptor+0x276>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USBD_GetDescriptor+0x2c>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007621 	.word	0x08007621
 8007608:	08007639 	.word	0x08007639
 800760c:	08007679 	.word	0x08007679
 8007610:	0800784f 	.word	0x0800784f
 8007614:	0800784f 	.word	0x0800784f
 8007618:	080077ef 	.word	0x080077ef
 800761c:	0800781b 	.word	0x0800781b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
      break;
 8007636:	e112      	b.n	800785e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7c1b      	ldrb	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10d      	bne.n	800765c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	f107 0208 	add.w	r2, r7, #8
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	2202      	movs	r2, #2
 8007658:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800765a:	e100      	b.n	800785e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	f107 0208 	add.w	r2, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	2202      	movs	r2, #2
 8007674:	701a      	strb	r2, [r3, #0]
      break;
 8007676:	e0f2      	b.n	800785e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	885b      	ldrh	r3, [r3, #2]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b05      	cmp	r3, #5
 8007680:	f200 80ac 	bhi.w	80077dc <USBD_GetDescriptor+0x204>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <USBD_GetDescriptor+0xb4>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076a5 	.word	0x080076a5
 8007690:	080076d9 	.word	0x080076d9
 8007694:	0800770d 	.word	0x0800770d
 8007698:	08007741 	.word	0x08007741
 800769c:	08007775 	.word	0x08007775
 80076a0:	080077a9 	.word	0x080077a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 0108 	add.w	r1, r7, #8
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c6:	e091      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa97 	bl	8007bfe <USBD_CtlError>
            err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
          break;
 80076d6:	e089      	b.n	80077ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	7c12      	ldrb	r2, [r2, #16]
 80076f0:	f107 0108 	add.w	r1, r7, #8
 80076f4:	4610      	mov	r0, r2
 80076f6:	4798      	blx	r3
 80076f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fa:	e077      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa7d 	bl	8007bfe <USBD_CtlError>
            err++;
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	3301      	adds	r3, #1
 8007708:	72fb      	strb	r3, [r7, #11]
          break;
 800770a:	e06f      	b.n	80077ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7c12      	ldrb	r2, [r2, #16]
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772e:	e05d      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa63 	bl	8007bfe <USBD_CtlError>
            err++;
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	3301      	adds	r3, #1
 800773c:	72fb      	strb	r3, [r7, #11]
          break;
 800773e:	e055      	b.n	80077ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 0108 	add.w	r1, r7, #8
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007762:	e043      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa49 	bl	8007bfe <USBD_CtlError>
            err++;
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	3301      	adds	r3, #1
 8007770:	72fb      	strb	r3, [r7, #11]
          break;
 8007772:	e03b      	b.n	80077ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007796:	e029      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa2f 	bl	8007bfe <USBD_CtlError>
            err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
          break;
 80077a6:	e021      	b.n	80077ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e00f      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa15 	bl	8007bfe <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e007      	b.n	80077ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa0d 	bl	8007bfe <USBD_CtlError>
          err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077ea:	e038      	b.n	800785e <USBD_GetDescriptor+0x286>
 80077ec:	e037      	b.n	800785e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	7c1b      	ldrb	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	f107 0208 	add.w	r2, r7, #8
 8007802:	4610      	mov	r0, r2
 8007804:	4798      	blx	r3
 8007806:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007808:	e029      	b.n	800785e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f9f6 	bl	8007bfe <USBD_CtlError>
        err++;
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	3301      	adds	r3, #1
 8007816:	72fb      	strb	r3, [r7, #11]
      break;
 8007818:	e021      	b.n	800785e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c1b      	ldrb	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10d      	bne.n	800783e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	f107 0208 	add.w	r2, r7, #8
 800782e:	4610      	mov	r0, r2
 8007830:	4798      	blx	r3
 8007832:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	2207      	movs	r2, #7
 800783a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800783c:	e00f      	b.n	800785e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9dc 	bl	8007bfe <USBD_CtlError>
        err++;
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	3301      	adds	r3, #1
 800784a:	72fb      	strb	r3, [r7, #11]
      break;
 800784c:	e007      	b.n	800785e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9d4 	bl	8007bfe <USBD_CtlError>
      err++;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	3301      	adds	r3, #1
 800785a:	72fb      	strb	r3, [r7, #11]
      break;
 800785c:	bf00      	nop
  }

  if (err != 0U)
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11c      	bne.n	800789e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007864:	893b      	ldrh	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d011      	beq.n	800788e <USBD_GetDescriptor+0x2b6>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	88db      	ldrh	r3, [r3, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00d      	beq.n	800788e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	88da      	ldrh	r2, [r3, #6]
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	4293      	cmp	r3, r2
 800787a:	bf28      	it	cs
 800787c:	4613      	movcs	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007882:	893b      	ldrh	r3, [r7, #8]
 8007884:	461a      	mov	r2, r3
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa22 	bl	8007cd2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa79 	bl	8007d8e <USBD_CtlSendStatus>
 800789c:	e000      	b.n	80078a0 <USBD_GetDescriptor+0x2c8>
    return;
 800789e:	bf00      	nop
    }
  }
}
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop

080078a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	889b      	ldrh	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d130      	bne.n	800791c <USBD_SetAddress+0x74>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d12c      	bne.n	800791c <USBD_SetAddress+0x74>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	2b7f      	cmp	r3, #127	; 0x7f
 80078c8:	d828      	bhi.n	800791c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	885b      	ldrh	r3, [r3, #2]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d104      	bne.n	80078ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f98b 	bl	8007bfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e8:	e01d      	b.n	8007926 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7bfa      	ldrb	r2, [r7, #15]
 80078ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 feab 	bl	8008652 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fa46 	bl	8007d8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	e009      	b.n	8007926 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	e004      	b.n	8007926 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f96d 	bl	8007bfe <USBD_CtlError>
  }
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <USBD_SetConfig+0x118>)
 8007942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007944:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <USBD_SetConfig+0x118>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d904      	bls.n	8007956 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f955 	bl	8007bfe <USBD_CtlError>
 8007954:	e075      	b.n	8007a42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	2b02      	cmp	r3, #2
 800795e:	d002      	beq.n	8007966 <USBD_SetConfig+0x36>
 8007960:	2b03      	cmp	r3, #3
 8007962:	d023      	beq.n	80079ac <USBD_SetConfig+0x7c>
 8007964:	e062      	b.n	8007a2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007966:	4b38      	ldr	r3, [pc, #224]	; (8007a48 <USBD_SetConfig+0x118>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01a      	beq.n	80079a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <USBD_SetConfig+0x118>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2203      	movs	r2, #3
 800797c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007980:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <USBD_SetConfig+0x118>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff f9af 	bl	8006cea <USBD_SetClassConfig>
 800798c:	4603      	mov	r3, r0
 800798e:	2b02      	cmp	r3, #2
 8007990:	d104      	bne.n	800799c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f932 	bl	8007bfe <USBD_CtlError>
            return;
 800799a:	e052      	b.n	8007a42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9f6 	bl	8007d8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079a2:	e04e      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f2 	bl	8007d8e <USBD_CtlSendStatus>
        break;
 80079aa:	e04a      	b.n	8007a42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079ac:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <USBD_SetConfig+0x118>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d112      	bne.n	80079da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079bc:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <USBD_SetConfig+0x118>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079c6:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <USBD_SetConfig+0x118>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff f9ab 	bl	8006d28 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9db 	bl	8007d8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079d8:	e033      	b.n	8007a42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <USBD_SetConfig+0x118>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d01d      	beq.n	8007a24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff f999 	bl	8006d28 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <USBD_SetConfig+0x118>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <USBD_SetConfig+0x118>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff f96f 	bl	8006cea <USBD_SetClassConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d104      	bne.n	8007a1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8f2 	bl	8007bfe <USBD_CtlError>
            return;
 8007a1a:	e012      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9b6 	bl	8007d8e <USBD_CtlSendStatus>
        break;
 8007a22:	e00e      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9b2 	bl	8007d8e <USBD_CtlSendStatus>
        break;
 8007a2a:	e00a      	b.n	8007a42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8e5 	bl	8007bfe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <USBD_SetConfig+0x118>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff f974 	bl	8006d28 <USBD_ClrClassConfig>
        break;
 8007a40:	bf00      	nop
    }
  }
}
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000388 	.word	0x20000388

08007a4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	88db      	ldrh	r3, [r3, #6]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d004      	beq.n	8007a68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8cc 	bl	8007bfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a66:	e022      	b.n	8007aae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	dc02      	bgt.n	8007a78 <USBD_GetConfig+0x2c>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dc03      	bgt.n	8007a7e <USBD_GetConfig+0x32>
 8007a76:	e015      	b.n	8007aa4 <USBD_GetConfig+0x58>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d00b      	beq.n	8007a94 <USBD_GetConfig+0x48>
 8007a7c:	e012      	b.n	8007aa4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3308      	adds	r3, #8
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f920 	bl	8007cd2 <USBD_CtlSendData>
        break;
 8007a92:	e00c      	b.n	8007aae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	2201      	movs	r2, #1
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f918 	bl	8007cd2 <USBD_CtlSendData>
        break;
 8007aa2:	e004      	b.n	8007aae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f8a9 	bl	8007bfe <USBD_CtlError>
        break;
 8007aac:	bf00      	nop
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d81e      	bhi.n	8007b0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	88db      	ldrh	r3, [r3, #6]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d004      	beq.n	8007ade <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f891 	bl	8007bfe <USBD_CtlError>
        break;
 8007adc:	e01a      	b.n	8007b14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f043 0202 	orr.w	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	330c      	adds	r3, #12
 8007afe:	2202      	movs	r2, #2
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8e5 	bl	8007cd2 <USBD_CtlSendData>
      break;
 8007b08:	e004      	b.n	8007b14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f876 	bl	8007bfe <USBD_CtlError>
      break;
 8007b12:	bf00      	nop
  }
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	885b      	ldrh	r3, [r3, #2]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d106      	bne.n	8007b3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f929 	bl	8007d8e <USBD_CtlSendStatus>
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b54:	3b01      	subs	r3, #1
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d80b      	bhi.n	8007b72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	885b      	ldrh	r3, [r3, #2]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d10c      	bne.n	8007b7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f90f 	bl	8007d8e <USBD_CtlSendStatus>
      }
      break;
 8007b70:	e004      	b.n	8007b7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f842 	bl	8007bfe <USBD_CtlError>
      break;
 8007b7a:	e000      	b.n	8007b7e <USBD_ClrFeature+0x3a>
      break;
 8007b7c:	bf00      	nop
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785a      	ldrb	r2, [r3, #1]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	3303      	adds	r3, #3
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	3305      	adds	r3, #5
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	3306      	adds	r3, #6
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	3307      	adds	r3, #7
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	4413      	add	r3, r2
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	80da      	strh	r2, [r3, #6]

}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fcb8 	bl	8008580 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fcb4 	bl	8008580 <USBD_LL_StallEP>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d032      	beq.n	8007c9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f834 	bl	8007ca4 <USBD_GetLen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	3301      	adds	r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	75fa      	strb	r2, [r7, #23]
 8007c50:	461a      	mov	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	75fa      	strb	r2, [r7, #23]
 8007c62:	461a      	mov	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4413      	add	r3, r2
 8007c68:	2203      	movs	r2, #3
 8007c6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c6c:	e012      	b.n	8007c94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	60fa      	str	r2, [r7, #12]
 8007c74:	7dfa      	ldrb	r2, [r7, #23]
 8007c76:	1c51      	adds	r1, r2, #1
 8007c78:	75f9      	strb	r1, [r7, #23]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	440a      	add	r2, r1
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	75fa      	strb	r2, [r7, #23]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e8      	bne.n	8007c6e <USBD_GetString+0x4e>
    }
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cb0:	e005      	b.n	8007cbe <USBD_GetLen+0x1a>
  {
    len++;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f5      	bne.n	8007cb2 <USBD_GetLen+0xe>
  }

  return len;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr

08007cd2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cee:	88fa      	ldrh	r2, [r7, #6]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cf4:	88fb      	ldrh	r3, [r7, #6]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fcc8 	bl	8008690 <USBD_LL_Transmit>

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	4613      	mov	r3, r2
 8007d16:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fcb6 	bl	8008690 <USBD_LL_Transmit>

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fcbb 	bl	80086d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	4613      	mov	r3, r2
 8007d76:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fca9 	bl	80086d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2200      	movs	r2, #0
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc73 	bl	8008690 <USBD_LL_Transmit>

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2205      	movs	r2, #5
 8007dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fc83 	bl	80086d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f8c2 	bl	8007f74 <CDC_Transmit_FS>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4912      	ldr	r1, [pc, #72]	; (8007e48 <MX_USB_DEVICE_Init+0x50>)
 8007e00:	4812      	ldr	r0, [pc, #72]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e02:	f7fe ff18 	bl	8006c36 <USBD_Init>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e0c:	f7f9 fae8 	bl	80013e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e10:	490f      	ldr	r1, [pc, #60]	; (8007e50 <MX_USB_DEVICE_Init+0x58>)
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e14:	f7fe ff3a 	bl	8006c8c <USBD_RegisterClass>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e1e:	f7f9 fadf 	bl	80013e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e22:	490c      	ldr	r1, [pc, #48]	; (8007e54 <MX_USB_DEVICE_Init+0x5c>)
 8007e24:	4809      	ldr	r0, [pc, #36]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e26:	f7fe fe6b 	bl	8006b00 <USBD_CDC_RegisterInterface>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e30:	f7f9 fad6 	bl	80013e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <MX_USB_DEVICE_Init+0x54>)
 8007e36:	f7fe ff42 	bl	8006cbe <USBD_Start>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e40:	f7f9 face 	bl	80013e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e44:	bf00      	nop
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20000174 	.word	0x20000174
 8007e4c:	2000038c 	.word	0x2000038c
 8007e50:	20000060 	.word	0x20000060
 8007e54:	20000164 	.word	0x20000164

08007e58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4905      	ldr	r1, [pc, #20]	; (8007e74 <CDC_Init_FS+0x1c>)
 8007e60:	4805      	ldr	r0, [pc, #20]	; (8007e78 <CDC_Init_FS+0x20>)
 8007e62:	f7fe fe63 	bl	8006b2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e66:	4905      	ldr	r1, [pc, #20]	; (8007e7c <CDC_Init_FS+0x24>)
 8007e68:	4803      	ldr	r0, [pc, #12]	; (8007e78 <CDC_Init_FS+0x20>)
 8007e6a:	f7fe fe78 	bl	8006b5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000a50 	.word	0x20000a50
 8007e78:	2000038c 	.word	0x2000038c
 8007e7c:	20000650 	.word	0x20000650

08007e80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
	...

08007e90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b23      	cmp	r3, #35	; 0x23
 8007ea4:	d84a      	bhi.n	8007f3c <CDC_Control_FS+0xac>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <CDC_Control_FS+0x1c>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f3d 	.word	0x08007f3d
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f3d 	.word	0x08007f3d
 8007f0c:	08007f3d 	.word	0x08007f3d
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f3d 	.word	0x08007f3d
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f3d 	.word	0x08007f3d
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f3d 	.word	0x08007f3d
 8007f34:	08007f3d 	.word	0x08007f3d
 8007f38:	08007f3d 	.word	0x08007f3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f3c:	bf00      	nop
  }

  return (USBD_OK);
 8007f3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop

08007f4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4805      	ldr	r0, [pc, #20]	; (8007f70 <CDC_Receive_FS+0x24>)
 8007f5a:	f7fe fe00 	bl	8006b5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f5e:	4804      	ldr	r0, [pc, #16]	; (8007f70 <CDC_Receive_FS+0x24>)
 8007f60:	f7fe fe3f 	bl	8006be2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	2000038c 	.word	0x2000038c

08007f74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f84:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <CDC_Transmit_FS+0x48>)
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e00b      	b.n	8007fb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f9a:	887b      	ldrh	r3, [r7, #2]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4806      	ldr	r0, [pc, #24]	; (8007fbc <CDC_Transmit_FS+0x48>)
 8007fa2:	f7fe fdc3 	bl	8006b2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fa6:	4805      	ldr	r0, [pc, #20]	; (8007fbc <CDC_Transmit_FS+0x48>)
 8007fa8:	f7fe fdec 	bl	8006b84 <USBD_CDC_TransmitPacket>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	2000038c 	.word	0x2000038c

08007fc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2212      	movs	r2, #18
 8007fd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fd2:	4b03      	ldr	r3, [pc, #12]	; (8007fe0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20000190 	.word	0x20000190

08007fe4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ff6:	4b03      	ldr	r3, [pc, #12]	; (8008004 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	200001a4 	.word	0x200001a4

08008008 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d105      	bne.n	8008026 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4907      	ldr	r1, [pc, #28]	; (800803c <USBD_FS_ProductStrDescriptor+0x34>)
 800801e:	4808      	ldr	r0, [pc, #32]	; (8008040 <USBD_FS_ProductStrDescriptor+0x38>)
 8008020:	f7ff fdfe 	bl	8007c20 <USBD_GetString>
 8008024:	e004      	b.n	8008030 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	4904      	ldr	r1, [pc, #16]	; (800803c <USBD_FS_ProductStrDescriptor+0x34>)
 800802a:	4805      	ldr	r0, [pc, #20]	; (8008040 <USBD_FS_ProductStrDescriptor+0x38>)
 800802c:	f7ff fdf8 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008030:	4b02      	ldr	r3, [pc, #8]	; (800803c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000e50 	.word	0x20000e50
 8008040:	0800919c 	.word	0x0800919c

08008044 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	4904      	ldr	r1, [pc, #16]	; (8008064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008054:	4804      	ldr	r0, [pc, #16]	; (8008068 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008056:	f7ff fde3 	bl	8007c20 <USBD_GetString>
  return USBD_StrDesc;
 800805a:	4b02      	ldr	r3, [pc, #8]	; (8008064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000e50 	.word	0x20000e50
 8008068:	080091b4 	.word	0x080091b4

0800806c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	221a      	movs	r2, #26
 800807c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800807e:	f000 f843 	bl	8008108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008082:	4b02      	ldr	r3, [pc, #8]	; (800808c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200001a8 	.word	0x200001a8

08008090 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d105      	bne.n	80080ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	4907      	ldr	r1, [pc, #28]	; (80080c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080a6:	4808      	ldr	r0, [pc, #32]	; (80080c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a8:	f7ff fdba 	bl	8007c20 <USBD_GetString>
 80080ac:	e004      	b.n	80080b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4904      	ldr	r1, [pc, #16]	; (80080c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080b2:	4805      	ldr	r0, [pc, #20]	; (80080c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080b4:	f7ff fdb4 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000e50 	.word	0x20000e50
 80080c8:	080091c8 	.word	0x080091c8

080080cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4907      	ldr	r1, [pc, #28]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080e2:	4808      	ldr	r0, [pc, #32]	; (8008104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e4:	f7ff fd9c 	bl	8007c20 <USBD_GetString>
 80080e8:	e004      	b.n	80080f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4904      	ldr	r1, [pc, #16]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ee:	4805      	ldr	r0, [pc, #20]	; (8008104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080f0:	f7ff fd96 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000e50 	.word	0x20000e50
 8008104:	080091d4 	.word	0x080091d4

08008108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <Get_SerialNum+0x44>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008114:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <Get_SerialNum+0x48>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800811a:	4b0e      	ldr	r3, [pc, #56]	; (8008154 <Get_SerialNum+0x4c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800812e:	2208      	movs	r2, #8
 8008130:	4909      	ldr	r1, [pc, #36]	; (8008158 <Get_SerialNum+0x50>)
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 f814 	bl	8008160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008138:	2204      	movs	r2, #4
 800813a:	4908      	ldr	r1, [pc, #32]	; (800815c <Get_SerialNum+0x54>)
 800813c:	68b8      	ldr	r0, [r7, #8]
 800813e:	f000 f80f 	bl	8008160 <IntToUnicode>
  }
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	1ffff7e8 	.word	0x1ffff7e8
 8008150:	1ffff7ec 	.word	0x1ffff7ec
 8008154:	1ffff7f0 	.word	0x1ffff7f0
 8008158:	200001aa 	.word	0x200001aa
 800815c:	200001ba 	.word	0x200001ba

08008160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]
 8008176:	e027      	b.n	80081c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0f1b      	lsrs	r3, r3, #28
 800817c:	2b09      	cmp	r3, #9
 800817e:	d80b      	bhi.n	8008198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0f1b      	lsrs	r3, r3, #28
 8008184:	b2da      	uxtb	r2, r3
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4619      	mov	r1, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	440b      	add	r3, r1
 8008190:	3230      	adds	r2, #48	; 0x30
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e00a      	b.n	80081ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	0f1b      	lsrs	r3, r3, #28
 800819c:	b2da      	uxtb	r2, r3
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4619      	mov	r1, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	440b      	add	r3, r1
 80081a8:	3237      	adds	r2, #55	; 0x37
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	3301      	adds	r3, #1
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4413      	add	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	3301      	adds	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
 80081c8:	7dfa      	ldrb	r2, [r7, #23]
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3d3      	bcc.n	8008178 <IntToUnicode+0x18>
  }
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr

080081dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081fa:	d12c      	bne.n	8008256 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081fc:	4b18      	ldr	r3, [pc, #96]	; (8008260 <HAL_PCD_MspInit+0x84>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	4a17      	ldr	r2, [pc, #92]	; (8008260 <HAL_PCD_MspInit+0x84>)
 8008202:	f043 0304 	orr.w	r3, r3, #4
 8008206:	6193      	str	r3, [r2, #24]
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <HAL_PCD_MspInit+0x84>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821e:	2300      	movs	r3, #0
 8008220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	4619      	mov	r1, r3
 8008228:	480e      	ldr	r0, [pc, #56]	; (8008264 <HAL_PCD_MspInit+0x88>)
 800822a:	f7fa f867 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <HAL_PCD_MspInit+0x84>)
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <HAL_PCD_MspInit+0x84>)
 8008234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008238:	6153      	str	r3, [r2, #20]
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_PCD_MspInit+0x84>)
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008242:	60bb      	str	r3, [r7, #8]
 8008244:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008246:	2200      	movs	r2, #0
 8008248:	2100      	movs	r1, #0
 800824a:	2043      	movs	r0, #67	; 0x43
 800824c:	f7fa f81f 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008250:	2043      	movs	r0, #67	; 0x43
 8008252:	f7fa f838 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008256:	bf00      	nop
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40021000 	.word	0x40021000
 8008264:	40010800 	.word	0x40010800

08008268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fd65 	bl	8006d4e <USBD_LL_SetupStage>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	4619      	mov	r1, r3
 80082b6:	f7fe fd97 	bl	8006de8 <USBD_LL_DataOutStage>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4413      	add	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	3348      	adds	r3, #72	; 0x48
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	4619      	mov	r1, r3
 80082ea:	f7fe fdee 	bl	8006eca <USBD_LL_DataInStage>
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe fefe 	bl	8007106 <USBD_LL_SOF>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800831a:	2301      	movs	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d001      	beq.n	800832a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008326:	f7f9 f85b 	bl	80013e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008330:	7bfa      	ldrb	r2, [r7, #15]
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe feae 	bl	8007096 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fe67 	bl	8007014 <USBD_LL_Reset>
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fea8 	bl	80070b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008384:	4b04      	ldr	r3, [pc, #16]	; (8008398 <HAL_PCD_SuspendCallback+0x48>)
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	4a03      	ldr	r2, [pc, #12]	; (8008398 <HAL_PCD_SuspendCallback+0x48>)
 800838a:	f043 0306 	orr.w	r3, r3, #6
 800838e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	e000ed00 	.word	0xe000ed00

0800839c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fe96 	bl	80070dc <USBD_LL_Resume>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe febf 	bl	8007152 <USBD_LL_IsoOUTIncomplete>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fea1 	bl	800713a <USBD_LL_IsoINIncomplete>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe feab 	bl	800716a <USBD_LL_DevConnected>
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fea7 	bl	800717e <USBD_LL_DevDisconnected>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d133      	bne.n	80084b0 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008448:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <USBD_LL_Init+0x84>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <USBD_LL_Init+0x84>)
 8008454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008458:	4b18      	ldr	r3, [pc, #96]	; (80084bc <USBD_LL_Init+0x84>)
 800845a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800845e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008460:	4b16      	ldr	r3, [pc, #88]	; (80084bc <USBD_LL_Init+0x84>)
 8008462:	2204      	movs	r2, #4
 8008464:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008466:	4b15      	ldr	r3, [pc, #84]	; (80084bc <USBD_LL_Init+0x84>)
 8008468:	2202      	movs	r2, #2
 800846a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800846c:	4b13      	ldr	r3, [pc, #76]	; (80084bc <USBD_LL_Init+0x84>)
 800846e:	2202      	movs	r2, #2
 8008470:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <USBD_LL_Init+0x84>)
 8008474:	2200      	movs	r2, #0
 8008476:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <USBD_LL_Init+0x84>)
 800847a:	2200      	movs	r2, #0
 800847c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800847e:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <USBD_LL_Init+0x84>)
 8008480:	2201      	movs	r2, #1
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008484:	480d      	ldr	r0, [pc, #52]	; (80084bc <USBD_LL_Init+0x84>)
 8008486:	f7fa f8ee 	bl	8002666 <HAL_PCD_Init>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008490:	f7f8 ffa6 	bl	80013e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008494:	2180      	movs	r1, #128	; 0x80
 8008496:	4809      	ldr	r0, [pc, #36]	; (80084bc <USBD_LL_Init+0x84>)
 8008498:	f7fb fa06 	bl	80038a8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800849c:	2240      	movs	r2, #64	; 0x40
 800849e:	2100      	movs	r1, #0
 80084a0:	4806      	ldr	r0, [pc, #24]	; (80084bc <USBD_LL_Init+0x84>)
 80084a2:	f7fb f9bb 	bl	800381c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084a6:	2280      	movs	r2, #128	; 0x80
 80084a8:	2101      	movs	r1, #1
 80084aa:	4804      	ldr	r0, [pc, #16]	; (80084bc <USBD_LL_Init+0x84>)
 80084ac:	f7fb f9b6 	bl	800381c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001050 	.word	0x20001050

080084c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa f9e2 	bl	80028a0 <HAL_PCD_Start>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f944 	bl	8008770 <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	461a      	mov	r2, r3
 8008504:	4603      	mov	r3, r0
 8008506:	70fb      	strb	r3, [r7, #3]
 8008508:	460b      	mov	r3, r1
 800850a:	70bb      	strb	r3, [r7, #2]
 800850c:	4613      	mov	r3, r2
 800850e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800851e:	78bb      	ldrb	r3, [r7, #2]
 8008520:	883a      	ldrh	r2, [r7, #0]
 8008522:	78f9      	ldrb	r1, [r7, #3]
 8008524:	f7fa fe5b 	bl	80031de <HAL_PCD_EP_Open>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f91e 	bl	8008770 <USBD_Get_USB_Status>
 8008534:	4603      	mov	r3, r0
 8008536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7fa fea4 	bl	80032ae <HAL_PCD_EP_Close>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f8ff 	bl	8008770 <USBD_Get_USB_Status>
 8008572:	4603      	mov	r3, r0
 8008574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008576:	7bbb      	ldrb	r3, [r7, #14]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fa ff49 	bl	8003436 <HAL_PCD_EP_SetStall>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f8e0 	bl	8008770 <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fa ff8c 	bl	80034fa <HAL_PCD_EP_ClrStall>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f8c1 	bl	8008770 <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800860e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da0b      	bge.n	8008630 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	4613      	mov	r3, r2
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	333e      	adds	r3, #62	; 0x3e
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	e00b      	b.n	8008648 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008636:	68f9      	ldr	r1, [r7, #12]
 8008638:	4613      	mov	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008646:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f7fa fd8f 	bl	8003194 <HAL_PCD_SetAddress>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f877 	bl	8008770 <USBD_Get_USB_Status>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008686:	7bbb      	ldrb	r3, [r7, #14]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	461a      	mov	r2, r3
 800869c:	460b      	mov	r3, r1
 800869e:	72fb      	strb	r3, [r7, #11]
 80086a0:	4613      	mov	r3, r2
 80086a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086b2:	893b      	ldrh	r3, [r7, #8]
 80086b4:	7af9      	ldrb	r1, [r7, #11]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	f7fa fe8c 	bl	80033d4 <HAL_PCD_EP_Transmit>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f854 	bl	8008770 <USBD_Get_USB_Status>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	461a      	mov	r2, r3
 80086e2:	460b      	mov	r3, r1
 80086e4:	72fb      	strb	r3, [r7, #11]
 80086e6:	4613      	mov	r3, r2
 80086e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086f8:	893b      	ldrh	r3, [r7, #8]
 80086fa:	7af9      	ldrb	r1, [r7, #11]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	f7fa fe20 	bl	8003342 <HAL_PCD_EP_Receive>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 f831 	bl	8008770 <USBD_Get_USB_Status>
 800870e:	4603      	mov	r3, r0
 8008710:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008712:	7dbb      	ldrb	r3, [r7, #22]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800872e:	78fa      	ldrb	r2, [r7, #3]
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fa fe37 	bl	80033a6 <HAL_PCD_EP_GetRxCount>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <USBD_static_malloc+0x14>)
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr
 8008758:	20001554 	.word	0x20001554

0800875c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr
	...

08008770 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d817      	bhi.n	80087b4 <USBD_Get_USB_Status+0x44>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <USBD_Get_USB_Status+0x1c>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087a3 	.word	0x080087a3
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087af 	.word	0x080087af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	e00b      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	73fb      	strb	r3, [r7, #15]
    break;
 80087a6:	e008      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	e005      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087ae:	2302      	movs	r3, #2
 80087b0:	73fb      	strb	r3, [r7, #15]
    break;
 80087b2:	e002      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087b4:	2302      	movs	r3, #2
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	bf00      	nop
  }
  return usb_status;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop

080087c8 <malloc>:
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <malloc+0xc>)
 80087ca:	4601      	mov	r1, r0
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f000 b82b 	b.w	8008828 <_malloc_r>
 80087d2:	bf00      	nop
 80087d4:	20000210 	.word	0x20000210

080087d8 <free>:
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <free+0xc>)
 80087da:	4601      	mov	r1, r0
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f000 b935 	b.w	8008a4c <_free_r>
 80087e2:	bf00      	nop
 80087e4:	20000210 	.word	0x20000210

080087e8 <sbrk_aligned>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	4e0e      	ldr	r6, [pc, #56]	; (8008824 <sbrk_aligned+0x3c>)
 80087ec:	460c      	mov	r4, r1
 80087ee:	6831      	ldr	r1, [r6, #0]
 80087f0:	4605      	mov	r5, r0
 80087f2:	b911      	cbnz	r1, 80087fa <sbrk_aligned+0x12>
 80087f4:	f000 f8e0 	bl	80089b8 <_sbrk_r>
 80087f8:	6030      	str	r0, [r6, #0]
 80087fa:	4621      	mov	r1, r4
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 f8db 	bl	80089b8 <_sbrk_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d00a      	beq.n	800881c <sbrk_aligned+0x34>
 8008806:	1cc4      	adds	r4, r0, #3
 8008808:	f024 0403 	bic.w	r4, r4, #3
 800880c:	42a0      	cmp	r0, r4
 800880e:	d007      	beq.n	8008820 <sbrk_aligned+0x38>
 8008810:	1a21      	subs	r1, r4, r0
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f8d0 	bl	80089b8 <_sbrk_r>
 8008818:	3001      	adds	r0, #1
 800881a:	d101      	bne.n	8008820 <sbrk_aligned+0x38>
 800881c:	f04f 34ff 	mov.w	r4, #4294967295
 8008820:	4620      	mov	r0, r4
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	20001778 	.word	0x20001778

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	f025 0503 	bic.w	r5, r5, #3
 8008832:	3508      	adds	r5, #8
 8008834:	2d0c      	cmp	r5, #12
 8008836:	bf38      	it	cc
 8008838:	250c      	movcc	r5, #12
 800883a:	2d00      	cmp	r5, #0
 800883c:	4607      	mov	r7, r0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d905      	bls.n	8008850 <_malloc_r+0x28>
 8008844:	230c      	movs	r3, #12
 8008846:	2600      	movs	r6, #0
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	4630      	mov	r0, r6
 800884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008850:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008924 <_malloc_r+0xfc>
 8008854:	f000 f868 	bl	8008928 <__malloc_lock>
 8008858:	f8d8 3000 	ldr.w	r3, [r8]
 800885c:	461c      	mov	r4, r3
 800885e:	bb5c      	cbnz	r4, 80088b8 <_malloc_r+0x90>
 8008860:	4629      	mov	r1, r5
 8008862:	4638      	mov	r0, r7
 8008864:	f7ff ffc0 	bl	80087e8 <sbrk_aligned>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	4604      	mov	r4, r0
 800886c:	d155      	bne.n	800891a <_malloc_r+0xf2>
 800886e:	f8d8 4000 	ldr.w	r4, [r8]
 8008872:	4626      	mov	r6, r4
 8008874:	2e00      	cmp	r6, #0
 8008876:	d145      	bne.n	8008904 <_malloc_r+0xdc>
 8008878:	2c00      	cmp	r4, #0
 800887a:	d048      	beq.n	800890e <_malloc_r+0xe6>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	4631      	mov	r1, r6
 8008880:	4638      	mov	r0, r7
 8008882:	eb04 0903 	add.w	r9, r4, r3
 8008886:	f000 f897 	bl	80089b8 <_sbrk_r>
 800888a:	4581      	cmp	r9, r0
 800888c:	d13f      	bne.n	800890e <_malloc_r+0xe6>
 800888e:	6821      	ldr	r1, [r4, #0]
 8008890:	4638      	mov	r0, r7
 8008892:	1a6d      	subs	r5, r5, r1
 8008894:	4629      	mov	r1, r5
 8008896:	f7ff ffa7 	bl	80087e8 <sbrk_aligned>
 800889a:	3001      	adds	r0, #1
 800889c:	d037      	beq.n	800890e <_malloc_r+0xe6>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	442b      	add	r3, r5
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	f8d8 3000 	ldr.w	r3, [r8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d038      	beq.n	800891e <_malloc_r+0xf6>
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	42a2      	cmp	r2, r4
 80088b0:	d12b      	bne.n	800890a <_malloc_r+0xe2>
 80088b2:	2200      	movs	r2, #0
 80088b4:	605a      	str	r2, [r3, #4]
 80088b6:	e00f      	b.n	80088d8 <_malloc_r+0xb0>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	1b52      	subs	r2, r2, r5
 80088bc:	d41f      	bmi.n	80088fe <_malloc_r+0xd6>
 80088be:	2a0b      	cmp	r2, #11
 80088c0:	d917      	bls.n	80088f2 <_malloc_r+0xca>
 80088c2:	1961      	adds	r1, r4, r5
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	6025      	str	r5, [r4, #0]
 80088c8:	bf18      	it	ne
 80088ca:	6059      	strne	r1, [r3, #4]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	bf08      	it	eq
 80088d0:	f8c8 1000 	streq.w	r1, [r8]
 80088d4:	5162      	str	r2, [r4, r5]
 80088d6:	604b      	str	r3, [r1, #4]
 80088d8:	4638      	mov	r0, r7
 80088da:	f104 060b 	add.w	r6, r4, #11
 80088de:	f000 f829 	bl	8008934 <__malloc_unlock>
 80088e2:	f026 0607 	bic.w	r6, r6, #7
 80088e6:	1d23      	adds	r3, r4, #4
 80088e8:	1af2      	subs	r2, r6, r3
 80088ea:	d0ae      	beq.n	800884a <_malloc_r+0x22>
 80088ec:	1b9b      	subs	r3, r3, r6
 80088ee:	50a3      	str	r3, [r4, r2]
 80088f0:	e7ab      	b.n	800884a <_malloc_r+0x22>
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	6862      	ldr	r2, [r4, #4]
 80088f6:	d1dd      	bne.n	80088b4 <_malloc_r+0x8c>
 80088f8:	f8c8 2000 	str.w	r2, [r8]
 80088fc:	e7ec      	b.n	80088d8 <_malloc_r+0xb0>
 80088fe:	4623      	mov	r3, r4
 8008900:	6864      	ldr	r4, [r4, #4]
 8008902:	e7ac      	b.n	800885e <_malloc_r+0x36>
 8008904:	4634      	mov	r4, r6
 8008906:	6876      	ldr	r6, [r6, #4]
 8008908:	e7b4      	b.n	8008874 <_malloc_r+0x4c>
 800890a:	4613      	mov	r3, r2
 800890c:	e7cc      	b.n	80088a8 <_malloc_r+0x80>
 800890e:	230c      	movs	r3, #12
 8008910:	4638      	mov	r0, r7
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	f000 f80e 	bl	8008934 <__malloc_unlock>
 8008918:	e797      	b.n	800884a <_malloc_r+0x22>
 800891a:	6025      	str	r5, [r4, #0]
 800891c:	e7dc      	b.n	80088d8 <_malloc_r+0xb0>
 800891e:	605b      	str	r3, [r3, #4]
 8008920:	deff      	udf	#255	; 0xff
 8008922:	bf00      	nop
 8008924:	20001774 	.word	0x20001774

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	; (8008930 <__malloc_lock+0x8>)
 800892a:	f000 b87f 	b.w	8008a2c <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	200018b8 	.word	0x200018b8

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	; (800893c <__malloc_unlock+0x8>)
 8008936:	f000 b87a 	b.w	8008a2e <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	200018b8 	.word	0x200018b8

08008940 <siprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008946:	b500      	push	{lr}
 8008948:	b09c      	sub	sp, #112	; 0x70
 800894a:	ab1d      	add	r3, sp, #116	; 0x74
 800894c:	9002      	str	r0, [sp, #8]
 800894e:	9006      	str	r0, [sp, #24]
 8008950:	9107      	str	r1, [sp, #28]
 8008952:	9104      	str	r1, [sp, #16]
 8008954:	4808      	ldr	r0, [pc, #32]	; (8008978 <siprintf+0x38>)
 8008956:	4909      	ldr	r1, [pc, #36]	; (800897c <siprintf+0x3c>)
 8008958:	f853 2b04 	ldr.w	r2, [r3], #4
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	6800      	ldr	r0, [r0, #0]
 8008960:	a902      	add	r1, sp, #8
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f000 f914 	bl	8008b90 <_svfiprintf_r>
 8008968:	2200      	movs	r2, #0
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	b01c      	add	sp, #112	; 0x70
 8008970:	f85d eb04 	ldr.w	lr, [sp], #4
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	20000210 	.word	0x20000210
 800897c:	ffff0208 	.word	0xffff0208

08008980 <memset>:
 8008980:	4603      	mov	r3, r0
 8008982:	4402      	add	r2, r0
 8008984:	4293      	cmp	r3, r2
 8008986:	d100      	bne.n	800898a <memset+0xa>
 8008988:	4770      	bx	lr
 800898a:	f803 1b01 	strb.w	r1, [r3], #1
 800898e:	e7f9      	b.n	8008984 <memset+0x4>

08008990 <strncat>:
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	7825      	ldrb	r5, [r4, #0]
 8008996:	4623      	mov	r3, r4
 8008998:	3401      	adds	r4, #1
 800899a:	2d00      	cmp	r5, #0
 800899c:	d1fa      	bne.n	8008994 <strncat+0x4>
 800899e:	3a01      	subs	r2, #1
 80089a0:	d304      	bcc.n	80089ac <strncat+0x1c>
 80089a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a6:	f803 4b01 	strb.w	r4, [r3], #1
 80089aa:	b904      	cbnz	r4, 80089ae <strncat+0x1e>
 80089ac:	bd30      	pop	{r4, r5, pc}
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1f5      	bne.n	800899e <strncat+0xe>
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e7f3      	b.n	800899e <strncat+0xe>
	...

080089b8 <_sbrk_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	2300      	movs	r3, #0
 80089bc:	4d05      	ldr	r5, [pc, #20]	; (80089d4 <_sbrk_r+0x1c>)
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7f8 feda 	bl	800177c <_sbrk>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_sbrk_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_sbrk_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200018b4 	.word	0x200018b4

080089d8 <__errno>:
 80089d8:	4b01      	ldr	r3, [pc, #4]	; (80089e0 <__errno+0x8>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000210 	.word	0x20000210

080089e4 <__libc_init_array>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	2600      	movs	r6, #0
 80089e8:	4d0c      	ldr	r5, [pc, #48]	; (8008a1c <__libc_init_array+0x38>)
 80089ea:	4c0d      	ldr	r4, [pc, #52]	; (8008a20 <__libc_init_array+0x3c>)
 80089ec:	1b64      	subs	r4, r4, r5
 80089ee:	10a4      	asrs	r4, r4, #2
 80089f0:	42a6      	cmp	r6, r4
 80089f2:	d109      	bne.n	8008a08 <__libc_init_array+0x24>
 80089f4:	f000 fbbe 	bl	8009174 <_init>
 80089f8:	2600      	movs	r6, #0
 80089fa:	4d0a      	ldr	r5, [pc, #40]	; (8008a24 <__libc_init_array+0x40>)
 80089fc:	4c0a      	ldr	r4, [pc, #40]	; (8008a28 <__libc_init_array+0x44>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	d105      	bne.n	8008a12 <__libc_init_array+0x2e>
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0c:	4798      	blx	r3
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7ee      	b.n	80089f0 <__libc_init_array+0xc>
 8008a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a16:	4798      	blx	r3
 8008a18:	3601      	adds	r6, #1
 8008a1a:	e7f2      	b.n	8008a02 <__libc_init_array+0x1e>
 8008a1c:	0800965c 	.word	0x0800965c
 8008a20:	0800965c 	.word	0x0800965c
 8008a24:	0800965c 	.word	0x0800965c
 8008a28:	08009660 	.word	0x08009660

08008a2c <__retarget_lock_acquire_recursive>:
 8008a2c:	4770      	bx	lr

08008a2e <__retarget_lock_release_recursive>:
 8008a2e:	4770      	bx	lr

08008a30 <memcpy>:
 8008a30:	440a      	add	r2, r1
 8008a32:	4291      	cmp	r1, r2
 8008a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a38:	d100      	bne.n	8008a3c <memcpy+0xc>
 8008a3a:	4770      	bx	lr
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a42:	4291      	cmp	r1, r2
 8008a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a48:	d1f9      	bne.n	8008a3e <memcpy+0xe>
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <_free_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4605      	mov	r5, r0
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d040      	beq.n	8008ad6 <_free_r+0x8a>
 8008a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a58:	1f0c      	subs	r4, r1, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfb8      	it	lt
 8008a5e:	18e4      	addlt	r4, r4, r3
 8008a60:	f7ff ff62 	bl	8008928 <__malloc_lock>
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <_free_r+0x8c>)
 8008a66:	6813      	ldr	r3, [r2, #0]
 8008a68:	b933      	cbnz	r3, 8008a78 <_free_r+0x2c>
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6014      	str	r4, [r2, #0]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a74:	f7ff bf5e 	b.w	8008934 <__malloc_unlock>
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d908      	bls.n	8008a8e <_free_r+0x42>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf01      	itttt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	1809      	addeq	r1, r1, r0
 8008a8a:	6021      	streq	r1, [r4, #0]
 8008a8c:	e7ed      	b.n	8008a6a <_free_r+0x1e>
 8008a8e:	461a      	mov	r2, r3
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b10b      	cbz	r3, 8008a98 <_free_r+0x4c>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d9fa      	bls.n	8008a8e <_free_r+0x42>
 8008a98:	6811      	ldr	r1, [r2, #0]
 8008a9a:	1850      	adds	r0, r2, r1
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d10b      	bne.n	8008ab8 <_free_r+0x6c>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	4401      	add	r1, r0
 8008aa4:	1850      	adds	r0, r2, r1
 8008aa6:	4283      	cmp	r3, r0
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	d1e0      	bne.n	8008a6e <_free_r+0x22>
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4408      	add	r0, r1
 8008ab2:	6010      	str	r0, [r2, #0]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	e7da      	b.n	8008a6e <_free_r+0x22>
 8008ab8:	d902      	bls.n	8008ac0 <_free_r+0x74>
 8008aba:	230c      	movs	r3, #12
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	e7d6      	b.n	8008a6e <_free_r+0x22>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	1821      	adds	r1, r4, r0
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf01      	itttt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	1809      	addeq	r1, r1, r0
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	6054      	str	r4, [r2, #4]
 8008ad4:	e7cb      	b.n	8008a6e <_free_r+0x22>
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20001774 	.word	0x20001774

08008adc <__ssputs_r>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	461f      	mov	r7, r3
 8008ae2:	688e      	ldr	r6, [r1, #8]
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	42be      	cmp	r6, r7
 8008ae8:	460c      	mov	r4, r1
 8008aea:	4690      	mov	r8, r2
 8008aec:	680b      	ldr	r3, [r1, #0]
 8008aee:	d82c      	bhi.n	8008b4a <__ssputs_r+0x6e>
 8008af0:	898a      	ldrh	r2, [r1, #12]
 8008af2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af6:	d026      	beq.n	8008b46 <__ssputs_r+0x6a>
 8008af8:	6965      	ldr	r5, [r4, #20]
 8008afa:	6909      	ldr	r1, [r1, #16]
 8008afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b00:	eba3 0901 	sub.w	r9, r3, r1
 8008b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b08:	1c7b      	adds	r3, r7, #1
 8008b0a:	444b      	add	r3, r9
 8008b0c:	106d      	asrs	r5, r5, #1
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf38      	it	cc
 8008b12:	461d      	movcc	r5, r3
 8008b14:	0553      	lsls	r3, r2, #21
 8008b16:	d527      	bpl.n	8008b68 <__ssputs_r+0x8c>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7ff fe85 	bl	8008828 <_malloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b360      	cbz	r0, 8008b7c <__ssputs_r+0xa0>
 8008b22:	464a      	mov	r2, r9
 8008b24:	6921      	ldr	r1, [r4, #16]
 8008b26:	f7ff ff83 	bl	8008a30 <memcpy>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	6126      	str	r6, [r4, #16]
 8008b38:	444e      	add	r6, r9
 8008b3a:	6026      	str	r6, [r4, #0]
 8008b3c:	463e      	mov	r6, r7
 8008b3e:	6165      	str	r5, [r4, #20]
 8008b40:	eba5 0509 	sub.w	r5, r5, r9
 8008b44:	60a5      	str	r5, [r4, #8]
 8008b46:	42be      	cmp	r6, r7
 8008b48:	d900      	bls.n	8008b4c <__ssputs_r+0x70>
 8008b4a:	463e      	mov	r6, r7
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4641      	mov	r1, r8
 8008b50:	6820      	ldr	r0, [r4, #0]
 8008b52:	f000 faaf 	bl	80090b4 <memmove>
 8008b56:	2000      	movs	r0, #0
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	1b9b      	subs	r3, r3, r6
 8008b5c:	60a3      	str	r3, [r4, #8]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	4433      	add	r3, r6
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b68:	462a      	mov	r2, r5
 8008b6a:	f000 facb 	bl	8009104 <_realloc_r>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1e0      	bne.n	8008b36 <__ssputs_r+0x5a>
 8008b74:	4650      	mov	r0, sl
 8008b76:	6921      	ldr	r1, [r4, #16]
 8008b78:	f7ff ff68 	bl	8008a4c <_free_r>
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	f8ca 3000 	str.w	r3, [sl]
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	e7e9      	b.n	8008b64 <__ssputs_r+0x88>

08008b90 <_svfiprintf_r>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	4698      	mov	r8, r3
 8008b96:	898b      	ldrh	r3, [r1, #12]
 8008b98:	4607      	mov	r7, r0
 8008b9a:	061b      	lsls	r3, r3, #24
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	b09d      	sub	sp, #116	; 0x74
 8008ba2:	d50e      	bpl.n	8008bc2 <_svfiprintf_r+0x32>
 8008ba4:	690b      	ldr	r3, [r1, #16]
 8008ba6:	b963      	cbnz	r3, 8008bc2 <_svfiprintf_r+0x32>
 8008ba8:	2140      	movs	r1, #64	; 0x40
 8008baa:	f7ff fe3d 	bl	8008828 <_malloc_r>
 8008bae:	6028      	str	r0, [r5, #0]
 8008bb0:	6128      	str	r0, [r5, #16]
 8008bb2:	b920      	cbnz	r0, 8008bbe <_svfiprintf_r+0x2e>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e0d0      	b.n	8008d60 <_svfiprintf_r+0x1d0>
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	616b      	str	r3, [r5, #20]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc6:	2320      	movs	r3, #32
 8008bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bcc:	2330      	movs	r3, #48	; 0x30
 8008bce:	f04f 0901 	mov.w	r9, #1
 8008bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008d78 <_svfiprintf_r+0x1e8>
 8008bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bde:	4623      	mov	r3, r4
 8008be0:	469a      	mov	sl, r3
 8008be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be6:	b10a      	cbz	r2, 8008bec <_svfiprintf_r+0x5c>
 8008be8:	2a25      	cmp	r2, #37	; 0x25
 8008bea:	d1f9      	bne.n	8008be0 <_svfiprintf_r+0x50>
 8008bec:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf0:	d00b      	beq.n	8008c0a <_svfiprintf_r+0x7a>
 8008bf2:	465b      	mov	r3, fp
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f7ff ff6f 	bl	8008adc <__ssputs_r>
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f000 80a9 	beq.w	8008d56 <_svfiprintf_r+0x1c6>
 8008c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c06:	445a      	add	r2, fp
 8008c08:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80a1 	beq.w	8008d56 <_svfiprintf_r+0x1c6>
 8008c14:	2300      	movs	r3, #0
 8008c16:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c1e:	f10a 0a01 	add.w	sl, sl, #1
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	9307      	str	r3, [sp, #28]
 8008c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c2c:	4654      	mov	r4, sl
 8008c2e:	2205      	movs	r2, #5
 8008c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c34:	4850      	ldr	r0, [pc, #320]	; (8008d78 <_svfiprintf_r+0x1e8>)
 8008c36:	f000 fa57 	bl	80090e8 <memchr>
 8008c3a:	9a04      	ldr	r2, [sp, #16]
 8008c3c:	b9d8      	cbnz	r0, 8008c76 <_svfiprintf_r+0xe6>
 8008c3e:	06d0      	lsls	r0, r2, #27
 8008c40:	bf44      	itt	mi
 8008c42:	2320      	movmi	r3, #32
 8008c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c48:	0711      	lsls	r1, r2, #28
 8008c4a:	bf44      	itt	mi
 8008c4c:	232b      	movmi	r3, #43	; 0x2b
 8008c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c52:	f89a 3000 	ldrb.w	r3, [sl]
 8008c56:	2b2a      	cmp	r3, #42	; 0x2a
 8008c58:	d015      	beq.n	8008c86 <_svfiprintf_r+0xf6>
 8008c5a:	4654      	mov	r4, sl
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	f04f 0c0a 	mov.w	ip, #10
 8008c62:	9a07      	ldr	r2, [sp, #28]
 8008c64:	4621      	mov	r1, r4
 8008c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6a:	3b30      	subs	r3, #48	; 0x30
 8008c6c:	2b09      	cmp	r3, #9
 8008c6e:	d94d      	bls.n	8008d0c <_svfiprintf_r+0x17c>
 8008c70:	b1b0      	cbz	r0, 8008ca0 <_svfiprintf_r+0x110>
 8008c72:	9207      	str	r2, [sp, #28]
 8008c74:	e014      	b.n	8008ca0 <_svfiprintf_r+0x110>
 8008c76:	eba0 0308 	sub.w	r3, r0, r8
 8008c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	46a2      	mov	sl, r4
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	e7d2      	b.n	8008c2c <_svfiprintf_r+0x9c>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	1d19      	adds	r1, r3, #4
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	9103      	str	r1, [sp, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bfbb      	ittet	lt
 8008c92:	425b      	neglt	r3, r3
 8008c94:	f042 0202 	orrlt.w	r2, r2, #2
 8008c98:	9307      	strge	r3, [sp, #28]
 8008c9a:	9307      	strlt	r3, [sp, #28]
 8008c9c:	bfb8      	it	lt
 8008c9e:	9204      	strlt	r2, [sp, #16]
 8008ca0:	7823      	ldrb	r3, [r4, #0]
 8008ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca4:	d10c      	bne.n	8008cc0 <_svfiprintf_r+0x130>
 8008ca6:	7863      	ldrb	r3, [r4, #1]
 8008ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8008caa:	d134      	bne.n	8008d16 <_svfiprintf_r+0x186>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	3402      	adds	r4, #2
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9203      	str	r2, [sp, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfb8      	it	lt
 8008cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cbe:	9305      	str	r3, [sp, #20]
 8008cc0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008d7c <_svfiprintf_r+0x1ec>
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	7821      	ldrb	r1, [r4, #0]
 8008cca:	f000 fa0d 	bl	80090e8 <memchr>
 8008cce:	b138      	cbz	r0, 8008ce0 <_svfiprintf_r+0x150>
 8008cd0:	2240      	movs	r2, #64	; 0x40
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	eba0 000a 	sub.w	r0, r0, sl
 8008cd8:	4082      	lsls	r2, r0
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	3401      	adds	r4, #1
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce4:	2206      	movs	r2, #6
 8008ce6:	4826      	ldr	r0, [pc, #152]	; (8008d80 <_svfiprintf_r+0x1f0>)
 8008ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cec:	f000 f9fc 	bl	80090e8 <memchr>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d038      	beq.n	8008d66 <_svfiprintf_r+0x1d6>
 8008cf4:	4b23      	ldr	r3, [pc, #140]	; (8008d84 <_svfiprintf_r+0x1f4>)
 8008cf6:	bb1b      	cbnz	r3, 8008d40 <_svfiprintf_r+0x1b0>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	3307      	adds	r3, #7
 8008cfc:	f023 0307 	bic.w	r3, r3, #7
 8008d00:	3308      	adds	r3, #8
 8008d02:	9303      	str	r3, [sp, #12]
 8008d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d06:	4433      	add	r3, r6
 8008d08:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0a:	e768      	b.n	8008bde <_svfiprintf_r+0x4e>
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	2001      	movs	r0, #1
 8008d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d14:	e7a6      	b.n	8008c64 <_svfiprintf_r+0xd4>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 0c0a 	mov.w	ip, #10
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	3401      	adds	r4, #1
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d28:	3a30      	subs	r2, #48	; 0x30
 8008d2a:	2a09      	cmp	r2, #9
 8008d2c:	d903      	bls.n	8008d36 <_svfiprintf_r+0x1a6>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0c6      	beq.n	8008cc0 <_svfiprintf_r+0x130>
 8008d32:	9105      	str	r1, [sp, #20]
 8008d34:	e7c4      	b.n	8008cc0 <_svfiprintf_r+0x130>
 8008d36:	4604      	mov	r4, r0
 8008d38:	2301      	movs	r3, #1
 8008d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d3e:	e7f0      	b.n	8008d22 <_svfiprintf_r+0x192>
 8008d40:	ab03      	add	r3, sp, #12
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	462a      	mov	r2, r5
 8008d46:	4638      	mov	r0, r7
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <_svfiprintf_r+0x1f8>)
 8008d4a:	a904      	add	r1, sp, #16
 8008d4c:	f3af 8000 	nop.w
 8008d50:	1c42      	adds	r2, r0, #1
 8008d52:	4606      	mov	r6, r0
 8008d54:	d1d6      	bne.n	8008d04 <_svfiprintf_r+0x174>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	065b      	lsls	r3, r3, #25
 8008d5a:	f53f af2d 	bmi.w	8008bb8 <_svfiprintf_r+0x28>
 8008d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d60:	b01d      	add	sp, #116	; 0x74
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	ab03      	add	r3, sp, #12
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <_svfiprintf_r+0x1f8>)
 8008d70:	a904      	add	r1, sp, #16
 8008d72:	f000 f87d 	bl	8008e70 <_printf_i>
 8008d76:	e7eb      	b.n	8008d50 <_svfiprintf_r+0x1c0>
 8008d78:	08009620 	.word	0x08009620
 8008d7c:	08009626 	.word	0x08009626
 8008d80:	0800962a 	.word	0x0800962a
 8008d84:	00000000 	.word	0x00000000
 8008d88:	08008add 	.word	0x08008add

08008d8c <_printf_common>:
 8008d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d90:	4616      	mov	r6, r2
 8008d92:	4699      	mov	r9, r3
 8008d94:	688a      	ldr	r2, [r1, #8]
 8008d96:	690b      	ldr	r3, [r1, #16]
 8008d98:	4607      	mov	r7, r0
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	bfb8      	it	lt
 8008d9e:	4613      	movlt	r3, r2
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008da6:	460c      	mov	r4, r1
 8008da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dac:	b10a      	cbz	r2, 8008db2 <_printf_common+0x26>
 8008dae:	3301      	adds	r3, #1
 8008db0:	6033      	str	r3, [r6, #0]
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	0699      	lsls	r1, r3, #26
 8008db6:	bf42      	ittt	mi
 8008db8:	6833      	ldrmi	r3, [r6, #0]
 8008dba:	3302      	addmi	r3, #2
 8008dbc:	6033      	strmi	r3, [r6, #0]
 8008dbe:	6825      	ldr	r5, [r4, #0]
 8008dc0:	f015 0506 	ands.w	r5, r5, #6
 8008dc4:	d106      	bne.n	8008dd4 <_printf_common+0x48>
 8008dc6:	f104 0a19 	add.w	sl, r4, #25
 8008dca:	68e3      	ldr	r3, [r4, #12]
 8008dcc:	6832      	ldr	r2, [r6, #0]
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	dc2b      	bgt.n	8008e2c <_printf_common+0xa0>
 8008dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dd8:	1e13      	subs	r3, r2, #0
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	bf18      	it	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	0692      	lsls	r2, r2, #26
 8008de2:	d430      	bmi.n	8008e46 <_printf_common+0xba>
 8008de4:	4649      	mov	r1, r9
 8008de6:	4638      	mov	r0, r7
 8008de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dec:	47c0      	blx	r8
 8008dee:	3001      	adds	r0, #1
 8008df0:	d023      	beq.n	8008e3a <_printf_common+0xae>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	6922      	ldr	r2, [r4, #16]
 8008df6:	f003 0306 	and.w	r3, r3, #6
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	bf14      	ite	ne
 8008dfe:	2500      	movne	r5, #0
 8008e00:	6833      	ldreq	r3, [r6, #0]
 8008e02:	f04f 0600 	mov.w	r6, #0
 8008e06:	bf08      	it	eq
 8008e08:	68e5      	ldreq	r5, [r4, #12]
 8008e0a:	f104 041a 	add.w	r4, r4, #26
 8008e0e:	bf08      	it	eq
 8008e10:	1aed      	subeq	r5, r5, r3
 8008e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e16:	bf08      	it	eq
 8008e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	bfc4      	itt	gt
 8008e20:	1a9b      	subgt	r3, r3, r2
 8008e22:	18ed      	addgt	r5, r5, r3
 8008e24:	42b5      	cmp	r5, r6
 8008e26:	d11a      	bne.n	8008e5e <_printf_common+0xd2>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e008      	b.n	8008e3e <_printf_common+0xb2>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	4652      	mov	r2, sl
 8008e30:	4649      	mov	r1, r9
 8008e32:	4638      	mov	r0, r7
 8008e34:	47c0      	blx	r8
 8008e36:	3001      	adds	r0, #1
 8008e38:	d103      	bne.n	8008e42 <_printf_common+0xb6>
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	3501      	adds	r5, #1
 8008e44:	e7c1      	b.n	8008dca <_printf_common+0x3e>
 8008e46:	2030      	movs	r0, #48	; 0x30
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e54:	4422      	add	r2, r4
 8008e56:	3302      	adds	r3, #2
 8008e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e5c:	e7c2      	b.n	8008de4 <_printf_common+0x58>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4622      	mov	r2, r4
 8008e62:	4649      	mov	r1, r9
 8008e64:	4638      	mov	r0, r7
 8008e66:	47c0      	blx	r8
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d0e6      	beq.n	8008e3a <_printf_common+0xae>
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	e7d9      	b.n	8008e24 <_printf_common+0x98>

08008e70 <_printf_i>:
 8008e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	7e0f      	ldrb	r7, [r1, #24]
 8008e76:	4691      	mov	r9, r2
 8008e78:	2f78      	cmp	r7, #120	; 0x78
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	469a      	mov	sl, r3
 8008e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e86:	d807      	bhi.n	8008e98 <_printf_i+0x28>
 8008e88:	2f62      	cmp	r7, #98	; 0x62
 8008e8a:	d80a      	bhi.n	8008ea2 <_printf_i+0x32>
 8008e8c:	2f00      	cmp	r7, #0
 8008e8e:	f000 80d5 	beq.w	800903c <_printf_i+0x1cc>
 8008e92:	2f58      	cmp	r7, #88	; 0x58
 8008e94:	f000 80c1 	beq.w	800901a <_printf_i+0x1aa>
 8008e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea0:	e03a      	b.n	8008f18 <_printf_i+0xa8>
 8008ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ea6:	2b15      	cmp	r3, #21
 8008ea8:	d8f6      	bhi.n	8008e98 <_printf_i+0x28>
 8008eaa:	a101      	add	r1, pc, #4	; (adr r1, 8008eb0 <_printf_i+0x40>)
 8008eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb0:	08008f09 	.word	0x08008f09
 8008eb4:	08008f1d 	.word	0x08008f1d
 8008eb8:	08008e99 	.word	0x08008e99
 8008ebc:	08008e99 	.word	0x08008e99
 8008ec0:	08008e99 	.word	0x08008e99
 8008ec4:	08008e99 	.word	0x08008e99
 8008ec8:	08008f1d 	.word	0x08008f1d
 8008ecc:	08008e99 	.word	0x08008e99
 8008ed0:	08008e99 	.word	0x08008e99
 8008ed4:	08008e99 	.word	0x08008e99
 8008ed8:	08008e99 	.word	0x08008e99
 8008edc:	08009023 	.word	0x08009023
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008fdd 	.word	0x08008fdd
 8008ee8:	08008e99 	.word	0x08008e99
 8008eec:	08008e99 	.word	0x08008e99
 8008ef0:	08009045 	.word	0x08009045
 8008ef4:	08008e99 	.word	0x08008e99
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008e99 	.word	0x08008e99
 8008f00:	08008e99 	.word	0x08008e99
 8008f04:	08008fe5 	.word	0x08008fe5
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	1d1a      	adds	r2, r3, #4
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	602a      	str	r2, [r5, #0]
 8008f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e0a0      	b.n	800905e <_printf_i+0x1ee>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	0607      	lsls	r7, r0, #24
 8008f22:	f103 0104 	add.w	r1, r3, #4
 8008f26:	6029      	str	r1, [r5, #0]
 8008f28:	d501      	bpl.n	8008f2e <_printf_i+0xbe>
 8008f2a:	681e      	ldr	r6, [r3, #0]
 8008f2c:	e003      	b.n	8008f36 <_printf_i+0xc6>
 8008f2e:	0646      	lsls	r6, r0, #25
 8008f30:	d5fb      	bpl.n	8008f2a <_printf_i+0xba>
 8008f32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	da03      	bge.n	8008f42 <_printf_i+0xd2>
 8008f3a:	232d      	movs	r3, #45	; 0x2d
 8008f3c:	4276      	negs	r6, r6
 8008f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f42:	230a      	movs	r3, #10
 8008f44:	4859      	ldr	r0, [pc, #356]	; (80090ac <_printf_i+0x23c>)
 8008f46:	e012      	b.n	8008f6e <_printf_i+0xfe>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	6820      	ldr	r0, [r4, #0]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	6029      	str	r1, [r5, #0]
 8008f50:	0605      	lsls	r5, r0, #24
 8008f52:	d501      	bpl.n	8008f58 <_printf_i+0xe8>
 8008f54:	681e      	ldr	r6, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <_printf_i+0xee>
 8008f58:	0641      	lsls	r1, r0, #25
 8008f5a:	d5fb      	bpl.n	8008f54 <_printf_i+0xe4>
 8008f5c:	881e      	ldrh	r6, [r3, #0]
 8008f5e:	2f6f      	cmp	r7, #111	; 0x6f
 8008f60:	bf0c      	ite	eq
 8008f62:	2308      	moveq	r3, #8
 8008f64:	230a      	movne	r3, #10
 8008f66:	4851      	ldr	r0, [pc, #324]	; (80090ac <_printf_i+0x23c>)
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f6e:	6865      	ldr	r5, [r4, #4]
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	bfa8      	it	ge
 8008f74:	6821      	ldrge	r1, [r4, #0]
 8008f76:	60a5      	str	r5, [r4, #8]
 8008f78:	bfa4      	itt	ge
 8008f7a:	f021 0104 	bicge.w	r1, r1, #4
 8008f7e:	6021      	strge	r1, [r4, #0]
 8008f80:	b90e      	cbnz	r6, 8008f86 <_printf_i+0x116>
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	d04b      	beq.n	800901e <_printf_i+0x1ae>
 8008f86:	4615      	mov	r5, r2
 8008f88:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f8c:	fb03 6711 	mls	r7, r3, r1, r6
 8008f90:	5dc7      	ldrb	r7, [r0, r7]
 8008f92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f96:	4637      	mov	r7, r6
 8008f98:	42bb      	cmp	r3, r7
 8008f9a:	460e      	mov	r6, r1
 8008f9c:	d9f4      	bls.n	8008f88 <_printf_i+0x118>
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d10b      	bne.n	8008fba <_printf_i+0x14a>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	07de      	lsls	r6, r3, #31
 8008fa6:	d508      	bpl.n	8008fba <_printf_i+0x14a>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	6861      	ldr	r1, [r4, #4]
 8008fac:	4299      	cmp	r1, r3
 8008fae:	bfde      	ittt	le
 8008fb0:	2330      	movle	r3, #48	; 0x30
 8008fb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fba:	1b52      	subs	r2, r2, r5
 8008fbc:	6122      	str	r2, [r4, #16]
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	aa03      	add	r2, sp, #12
 8008fca:	f7ff fedf 	bl	8008d8c <_printf_common>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d14a      	bne.n	8009068 <_printf_i+0x1f8>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	b004      	add	sp, #16
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	f043 0320 	orr.w	r3, r3, #32
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	2778      	movs	r7, #120	; 0x78
 8008fe6:	4832      	ldr	r0, [pc, #200]	; (80090b0 <_printf_i+0x240>)
 8008fe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	6829      	ldr	r1, [r5, #0]
 8008ff0:	061f      	lsls	r7, r3, #24
 8008ff2:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff6:	d402      	bmi.n	8008ffe <_printf_i+0x18e>
 8008ff8:	065f      	lsls	r7, r3, #25
 8008ffa:	bf48      	it	mi
 8008ffc:	b2b6      	uxthmi	r6, r6
 8008ffe:	07df      	lsls	r7, r3, #31
 8009000:	bf48      	it	mi
 8009002:	f043 0320 	orrmi.w	r3, r3, #32
 8009006:	6029      	str	r1, [r5, #0]
 8009008:	bf48      	it	mi
 800900a:	6023      	strmi	r3, [r4, #0]
 800900c:	b91e      	cbnz	r6, 8009016 <_printf_i+0x1a6>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f023 0320 	bic.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2310      	movs	r3, #16
 8009018:	e7a6      	b.n	8008f68 <_printf_i+0xf8>
 800901a:	4824      	ldr	r0, [pc, #144]	; (80090ac <_printf_i+0x23c>)
 800901c:	e7e4      	b.n	8008fe8 <_printf_i+0x178>
 800901e:	4615      	mov	r5, r2
 8009020:	e7bd      	b.n	8008f9e <_printf_i+0x12e>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	6826      	ldr	r6, [r4, #0]
 8009026:	1d18      	adds	r0, r3, #4
 8009028:	6961      	ldr	r1, [r4, #20]
 800902a:	6028      	str	r0, [r5, #0]
 800902c:	0635      	lsls	r5, r6, #24
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	d501      	bpl.n	8009036 <_printf_i+0x1c6>
 8009032:	6019      	str	r1, [r3, #0]
 8009034:	e002      	b.n	800903c <_printf_i+0x1cc>
 8009036:	0670      	lsls	r0, r6, #25
 8009038:	d5fb      	bpl.n	8009032 <_printf_i+0x1c2>
 800903a:	8019      	strh	r1, [r3, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	4615      	mov	r5, r2
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	e7bc      	b.n	8008fbe <_printf_i+0x14e>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	2100      	movs	r1, #0
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	602a      	str	r2, [r5, #0]
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	4628      	mov	r0, r5
 8009052:	f000 f849 	bl	80090e8 <memchr>
 8009056:	b108      	cbz	r0, 800905c <_printf_i+0x1ec>
 8009058:	1b40      	subs	r0, r0, r5
 800905a:	6060      	str	r0, [r4, #4]
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	2300      	movs	r3, #0
 8009062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009066:	e7aa      	b.n	8008fbe <_printf_i+0x14e>
 8009068:	462a      	mov	r2, r5
 800906a:	4649      	mov	r1, r9
 800906c:	4640      	mov	r0, r8
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	47d0      	blx	sl
 8009072:	3001      	adds	r0, #1
 8009074:	d0ad      	beq.n	8008fd2 <_printf_i+0x162>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	079b      	lsls	r3, r3, #30
 800907a:	d413      	bmi.n	80090a4 <_printf_i+0x234>
 800907c:	68e0      	ldr	r0, [r4, #12]
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	4298      	cmp	r0, r3
 8009082:	bfb8      	it	lt
 8009084:	4618      	movlt	r0, r3
 8009086:	e7a6      	b.n	8008fd6 <_printf_i+0x166>
 8009088:	2301      	movs	r3, #1
 800908a:	4632      	mov	r2, r6
 800908c:	4649      	mov	r1, r9
 800908e:	4640      	mov	r0, r8
 8009090:	47d0      	blx	sl
 8009092:	3001      	adds	r0, #1
 8009094:	d09d      	beq.n	8008fd2 <_printf_i+0x162>
 8009096:	3501      	adds	r5, #1
 8009098:	68e3      	ldr	r3, [r4, #12]
 800909a:	9903      	ldr	r1, [sp, #12]
 800909c:	1a5b      	subs	r3, r3, r1
 800909e:	42ab      	cmp	r3, r5
 80090a0:	dcf2      	bgt.n	8009088 <_printf_i+0x218>
 80090a2:	e7eb      	b.n	800907c <_printf_i+0x20c>
 80090a4:	2500      	movs	r5, #0
 80090a6:	f104 0619 	add.w	r6, r4, #25
 80090aa:	e7f5      	b.n	8009098 <_printf_i+0x228>
 80090ac:	08009631 	.word	0x08009631
 80090b0:	08009642 	.word	0x08009642

080090b4 <memmove>:
 80090b4:	4288      	cmp	r0, r1
 80090b6:	b510      	push	{r4, lr}
 80090b8:	eb01 0402 	add.w	r4, r1, r2
 80090bc:	d902      	bls.n	80090c4 <memmove+0x10>
 80090be:	4284      	cmp	r4, r0
 80090c0:	4623      	mov	r3, r4
 80090c2:	d807      	bhi.n	80090d4 <memmove+0x20>
 80090c4:	1e43      	subs	r3, r0, #1
 80090c6:	42a1      	cmp	r1, r4
 80090c8:	d008      	beq.n	80090dc <memmove+0x28>
 80090ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d2:	e7f8      	b.n	80090c6 <memmove+0x12>
 80090d4:	4601      	mov	r1, r0
 80090d6:	4402      	add	r2, r0
 80090d8:	428a      	cmp	r2, r1
 80090da:	d100      	bne.n	80090de <memmove+0x2a>
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090e6:	e7f7      	b.n	80090d8 <memmove+0x24>

080090e8 <memchr>:
 80090e8:	4603      	mov	r3, r0
 80090ea:	b510      	push	{r4, lr}
 80090ec:	b2c9      	uxtb	r1, r1
 80090ee:	4402      	add	r2, r0
 80090f0:	4293      	cmp	r3, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	d101      	bne.n	80090fa <memchr+0x12>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e003      	b.n	8009102 <memchr+0x1a>
 80090fa:	7804      	ldrb	r4, [r0, #0]
 80090fc:	3301      	adds	r3, #1
 80090fe:	428c      	cmp	r4, r1
 8009100:	d1f6      	bne.n	80090f0 <memchr+0x8>
 8009102:	bd10      	pop	{r4, pc}

08009104 <_realloc_r>:
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	4680      	mov	r8, r0
 800910a:	4614      	mov	r4, r2
 800910c:	460e      	mov	r6, r1
 800910e:	b921      	cbnz	r1, 800911a <_realloc_r+0x16>
 8009110:	4611      	mov	r1, r2
 8009112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009116:	f7ff bb87 	b.w	8008828 <_malloc_r>
 800911a:	b92a      	cbnz	r2, 8009128 <_realloc_r+0x24>
 800911c:	f7ff fc96 	bl	8008a4c <_free_r>
 8009120:	4625      	mov	r5, r4
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	f000 f81b 	bl	8009162 <_malloc_usable_size_r>
 800912c:	4284      	cmp	r4, r0
 800912e:	4607      	mov	r7, r0
 8009130:	d802      	bhi.n	8009138 <_realloc_r+0x34>
 8009132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009136:	d812      	bhi.n	800915e <_realloc_r+0x5a>
 8009138:	4621      	mov	r1, r4
 800913a:	4640      	mov	r0, r8
 800913c:	f7ff fb74 	bl	8008828 <_malloc_r>
 8009140:	4605      	mov	r5, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d0ed      	beq.n	8009122 <_realloc_r+0x1e>
 8009146:	42bc      	cmp	r4, r7
 8009148:	4622      	mov	r2, r4
 800914a:	4631      	mov	r1, r6
 800914c:	bf28      	it	cs
 800914e:	463a      	movcs	r2, r7
 8009150:	f7ff fc6e 	bl	8008a30 <memcpy>
 8009154:	4631      	mov	r1, r6
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff fc78 	bl	8008a4c <_free_r>
 800915c:	e7e1      	b.n	8009122 <_realloc_r+0x1e>
 800915e:	4635      	mov	r5, r6
 8009160:	e7df      	b.n	8009122 <_realloc_r+0x1e>

08009162 <_malloc_usable_size_r>:
 8009162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009166:	1f18      	subs	r0, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	bfbc      	itt	lt
 800916c:	580b      	ldrlt	r3, [r1, r0]
 800916e:	18c0      	addlt	r0, r0, r3
 8009170:	4770      	bx	lr
	...

08009174 <_init>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr

08009180 <_fini>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	bf00      	nop
 8009184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009186:	bc08      	pop	{r3}
 8009188:	469e      	mov	lr, r3
 800918a:	4770      	bx	lr
